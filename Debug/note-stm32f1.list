
note-stm32f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e08  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  08007f18  08007f18  00017f18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008430  08008430  00020238  2**0
                  CONTENTS
  4 .ARM          00000000  08008430  08008430  00020238  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008430  08008430  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008430  08008430  00018430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008434  08008434  00018434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08008438  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  20000238  08008670  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  08008670  00020554  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f36  00000000  00000000  00020261  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002931  00000000  00000000  00031197  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f78  00000000  00000000  00033ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f00  00000000  00000000  00034a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015346  00000000  00000000  00035940  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bd3d  00000000  00000000  0004ac86  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007031d  00000000  00000000  000569c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c6ce0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004588  00000000  00000000  000c6d5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000238 	.word	0x20000238
 800012c:	00000000 	.word	0x00000000
 8000130:	08007f00 	.word	0x08007f00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000023c 	.word	0x2000023c
 800014c:	08007f00 	.word	0x08007f00

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_d2iz>:
 8000a20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a28:	d215      	bcs.n	8000a56 <__aeabi_d2iz+0x36>
 8000a2a:	d511      	bpl.n	8000a50 <__aeabi_d2iz+0x30>
 8000a2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a34:	d912      	bls.n	8000a5c <__aeabi_d2iz+0x3c>
 8000a36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a46:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4a:	bf18      	it	ne
 8000a4c:	4240      	negne	r0, r0
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d105      	bne.n	8000a68 <__aeabi_d2iz+0x48>
 8000a5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	bf08      	it	eq
 8000a62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_d2uiz>:
 8000a70:	004a      	lsls	r2, r1, #1
 8000a72:	d211      	bcs.n	8000a98 <__aeabi_d2uiz+0x28>
 8000a74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a78:	d211      	bcs.n	8000a9e <__aeabi_d2uiz+0x2e>
 8000a7a:	d50d      	bpl.n	8000a98 <__aeabi_d2uiz+0x28>
 8000a7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a84:	d40e      	bmi.n	8000aa4 <__aeabi_d2uiz+0x34>
 8000a86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_d2uiz+0x3a>
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0000 	mov.w	r0, #0
 8000aae:	4770      	bx	lr

08000ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_Init+0x28>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_Init+0x28>)
 8000aba:	f043 0310 	orr.w	r3, r3, #16
 8000abe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f000 f967 	bl	8000d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f000 f808 	bl	8000adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000acc:	f003 fbee 	bl	80042ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40022000 	.word	0x40022000

08000adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_InitTick+0x54>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_InitTick+0x58>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 f98d 	bl	8000e1a <HAL_SYSTICK_Config>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e00e      	b.n	8000b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	d80a      	bhi.n	8000b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b10:	2200      	movs	r2, #0
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	f000 f947 	bl	8000daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b1c:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <HAL_InitTick+0x5c>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	e000      	b.n	8000b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000008 	.word	0x20000008
 8000b34:	20000004 	.word	0x20000004
 8000b38:	20000000 	.word	0x20000000

08000b3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_IncTick+0x1c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_IncTick+0x20>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a03      	ldr	r2, [pc, #12]	; (8000b5c <HAL_IncTick+0x20>)
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	20000004 	.word	0x20000004
 8000b5c:	200004b8 	.word	0x200004b8

08000b60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b02      	ldr	r3, [pc, #8]	; (8000b70 <HAL_GetTick+0x10>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	200004b8 	.word	0x200004b8

08000b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b7c:	f7ff fff0 	bl	8000b60 <HAL_GetTick>
 8000b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b8c:	d005      	beq.n	8000b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <HAL_Delay+0x40>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4413      	add	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b9a:	bf00      	nop
 8000b9c:	f7ff ffe0 	bl	8000b60 <HAL_GetTick>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d8f7      	bhi.n	8000b9c <HAL_Delay+0x28>
  {
  }
}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000004 	.word	0x20000004

08000bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bea:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	60d3      	str	r3, [r2, #12]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <__NVIC_GetPriorityGrouping+0x18>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	f003 0307 	and.w	r3, r3, #7
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db0b      	blt.n	8000c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f003 021f 	and.w	r2, r3, #31
 8000c34:	4906      	ldr	r1, [pc, #24]	; (8000c50 <__NVIC_EnableIRQ+0x34>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	095b      	lsrs	r3, r3, #5
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	e000e100 	.word	0xe000e100

08000c54 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	db10      	blt.n	8000c88 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	f003 021f 	and.w	r2, r3, #31
 8000c6c:	4909      	ldr	r1, [pc, #36]	; (8000c94 <__NVIC_DisableIRQ+0x40>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	095b      	lsrs	r3, r3, #5
 8000c74:	2001      	movs	r0, #1
 8000c76:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7a:	3320      	adds	r3, #32
 8000c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c84:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000e100 	.word	0xe000e100

08000c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	6039      	str	r1, [r7, #0]
 8000ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	db0a      	blt.n	8000cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	490c      	ldr	r1, [pc, #48]	; (8000ce4 <__NVIC_SetPriority+0x4c>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	0112      	lsls	r2, r2, #4
 8000cb8:	b2d2      	uxtb	r2, r2
 8000cba:	440b      	add	r3, r1
 8000cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc0:	e00a      	b.n	8000cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4908      	ldr	r1, [pc, #32]	; (8000ce8 <__NVIC_SetPriority+0x50>)
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	f003 030f 	and.w	r3, r3, #15
 8000cce:	3b04      	subs	r3, #4
 8000cd0:	0112      	lsls	r2, r2, #4
 8000cd2:	b2d2      	uxtb	r2, r2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	761a      	strb	r2, [r3, #24]
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000e100 	.word	0xe000e100
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b089      	sub	sp, #36	; 0x24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f1c3 0307 	rsb	r3, r3, #7
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	bf28      	it	cs
 8000d0a:	2304      	movcs	r3, #4
 8000d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3304      	adds	r3, #4
 8000d12:	2b06      	cmp	r3, #6
 8000d14:	d902      	bls.n	8000d1c <NVIC_EncodePriority+0x30>
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3b03      	subs	r3, #3
 8000d1a:	e000      	b.n	8000d1e <NVIC_EncodePriority+0x32>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	f04f 32ff 	mov.w	r2, #4294967295
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43da      	mvns	r2, r3
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	401a      	ands	r2, r3
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d34:	f04f 31ff 	mov.w	r1, #4294967295
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3e:	43d9      	mvns	r1, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	4313      	orrs	r3, r2
         );
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3724      	adds	r7, #36	; 0x24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d60:	d301      	bcc.n	8000d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00f      	b.n	8000d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d66:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <SysTick_Config+0x40>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6e:	210f      	movs	r1, #15
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f7ff ff90 	bl	8000c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <SysTick_Config+0x40>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7e:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <SysTick_Config+0x40>)
 8000d80:	2207      	movs	r2, #7
 8000d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	e000e010 	.word	0xe000e010

08000d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff ff0b 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b086      	sub	sp, #24
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	4603      	mov	r3, r0
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
 8000db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dbc:	f7ff ff20 	bl	8000c00 <__NVIC_GetPriorityGrouping>
 8000dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	68b9      	ldr	r1, [r7, #8]
 8000dc6:	6978      	ldr	r0, [r7, #20]
 8000dc8:	f7ff ff90 	bl	8000cec <NVIC_EncodePriority>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff5f 	bl	8000c98 <__NVIC_SetPriority>
}
 8000dda:	bf00      	nop
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff13 	bl	8000c1c <__NVIC_EnableIRQ>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	4603      	mov	r3, r0
 8000e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff21 	bl	8000c54 <__NVIC_DisableIRQ>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ff94 	bl	8000d50 <SysTick_Config>
 8000e28:	4603      	mov	r3, r0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d005      	beq.n	8000e56 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2204      	movs	r2, #4
 8000e4e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	73fb      	strb	r3, [r7, #15]
 8000e54:	e051      	b.n	8000efa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f022 020e 	bic.w	r2, r2, #14
 8000e64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 0201 	bic.w	r2, r2, #1
 8000e74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a22      	ldr	r2, [pc, #136]	; (8000f04 <HAL_DMA_Abort_IT+0xd0>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d029      	beq.n	8000ed4 <HAL_DMA_Abort_IT+0xa0>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a20      	ldr	r2, [pc, #128]	; (8000f08 <HAL_DMA_Abort_IT+0xd4>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d022      	beq.n	8000ed0 <HAL_DMA_Abort_IT+0x9c>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a1f      	ldr	r2, [pc, #124]	; (8000f0c <HAL_DMA_Abort_IT+0xd8>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d01a      	beq.n	8000eca <HAL_DMA_Abort_IT+0x96>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a1d      	ldr	r2, [pc, #116]	; (8000f10 <HAL_DMA_Abort_IT+0xdc>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d012      	beq.n	8000ec4 <HAL_DMA_Abort_IT+0x90>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a1c      	ldr	r2, [pc, #112]	; (8000f14 <HAL_DMA_Abort_IT+0xe0>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d00a      	beq.n	8000ebe <HAL_DMA_Abort_IT+0x8a>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a1a      	ldr	r2, [pc, #104]	; (8000f18 <HAL_DMA_Abort_IT+0xe4>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d102      	bne.n	8000eb8 <HAL_DMA_Abort_IT+0x84>
 8000eb2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000eb6:	e00e      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xa2>
 8000eb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ebc:	e00b      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xa2>
 8000ebe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec2:	e008      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xa2>
 8000ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec8:	e005      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xa2>
 8000eca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ece:	e002      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xa2>
 8000ed0:	2310      	movs	r3, #16
 8000ed2:	e000      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xa2>
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	4a11      	ldr	r2, [pc, #68]	; (8000f1c <HAL_DMA_Abort_IT+0xe8>)
 8000ed8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2201      	movs	r2, #1
 8000ede:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	4798      	blx	r3
    } 
  }
  return status;
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40020008 	.word	0x40020008
 8000f08:	4002001c 	.word	0x4002001c
 8000f0c:	40020030 	.word	0x40020030
 8000f10:	40020044 	.word	0x40020044
 8000f14:	40020058 	.word	0x40020058
 8000f18:	4002006c 	.word	0x4002006c
 8000f1c:	40020000 	.word	0x40020000

08000f20 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b08b      	sub	sp, #44	; 0x2c
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4a:	e127      	b.n	800119c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	69fa      	ldr	r2, [r7, #28]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	f040 8116 	bne.w	8001196 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b12      	cmp	r3, #18
 8000f70:	d034      	beq.n	8000fdc <HAL_GPIO_Init+0xa4>
 8000f72:	2b12      	cmp	r3, #18
 8000f74:	d80d      	bhi.n	8000f92 <HAL_GPIO_Init+0x5a>
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d02b      	beq.n	8000fd2 <HAL_GPIO_Init+0x9a>
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d804      	bhi.n	8000f88 <HAL_GPIO_Init+0x50>
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d031      	beq.n	8000fe6 <HAL_GPIO_Init+0xae>
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d01c      	beq.n	8000fc0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f86:	e048      	b.n	800101a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d043      	beq.n	8001014 <HAL_GPIO_Init+0xdc>
 8000f8c:	2b11      	cmp	r3, #17
 8000f8e:	d01b      	beq.n	8000fc8 <HAL_GPIO_Init+0x90>
          break;
 8000f90:	e043      	b.n	800101a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f92:	4a89      	ldr	r2, [pc, #548]	; (80011b8 <HAL_GPIO_Init+0x280>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d026      	beq.n	8000fe6 <HAL_GPIO_Init+0xae>
 8000f98:	4a87      	ldr	r2, [pc, #540]	; (80011b8 <HAL_GPIO_Init+0x280>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d806      	bhi.n	8000fac <HAL_GPIO_Init+0x74>
 8000f9e:	4a87      	ldr	r2, [pc, #540]	; (80011bc <HAL_GPIO_Init+0x284>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d020      	beq.n	8000fe6 <HAL_GPIO_Init+0xae>
 8000fa4:	4a86      	ldr	r2, [pc, #536]	; (80011c0 <HAL_GPIO_Init+0x288>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d01d      	beq.n	8000fe6 <HAL_GPIO_Init+0xae>
          break;
 8000faa:	e036      	b.n	800101a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fac:	4a85      	ldr	r2, [pc, #532]	; (80011c4 <HAL_GPIO_Init+0x28c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d019      	beq.n	8000fe6 <HAL_GPIO_Init+0xae>
 8000fb2:	4a85      	ldr	r2, [pc, #532]	; (80011c8 <HAL_GPIO_Init+0x290>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d016      	beq.n	8000fe6 <HAL_GPIO_Init+0xae>
 8000fb8:	4a84      	ldr	r2, [pc, #528]	; (80011cc <HAL_GPIO_Init+0x294>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d013      	beq.n	8000fe6 <HAL_GPIO_Init+0xae>
          break;
 8000fbe:	e02c      	b.n	800101a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	623b      	str	r3, [r7, #32]
          break;
 8000fc6:	e028      	b.n	800101a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	623b      	str	r3, [r7, #32]
          break;
 8000fd0:	e023      	b.n	800101a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	3308      	adds	r3, #8
 8000fd8:	623b      	str	r3, [r7, #32]
          break;
 8000fda:	e01e      	b.n	800101a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	330c      	adds	r3, #12
 8000fe2:	623b      	str	r3, [r7, #32]
          break;
 8000fe4:	e019      	b.n	800101a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d102      	bne.n	8000ff4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fee:	2304      	movs	r3, #4
 8000ff0:	623b      	str	r3, [r7, #32]
          break;
 8000ff2:	e012      	b.n	800101a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d105      	bne.n	8001008 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	611a      	str	r2, [r3, #16]
          break;
 8001006:	e008      	b.n	800101a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001008:	2308      	movs	r3, #8
 800100a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69fa      	ldr	r2, [r7, #28]
 8001010:	615a      	str	r2, [r3, #20]
          break;
 8001012:	e002      	b.n	800101a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001014:	2300      	movs	r3, #0
 8001016:	623b      	str	r3, [r7, #32]
          break;
 8001018:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	2bff      	cmp	r3, #255	; 0xff
 800101e:	d801      	bhi.n	8001024 <HAL_GPIO_Init+0xec>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	e001      	b.n	8001028 <HAL_GPIO_Init+0xf0>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3304      	adds	r3, #4
 8001028:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	2bff      	cmp	r3, #255	; 0xff
 800102e:	d802      	bhi.n	8001036 <HAL_GPIO_Init+0xfe>
 8001030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	e002      	b.n	800103c <HAL_GPIO_Init+0x104>
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	3b08      	subs	r3, #8
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	210f      	movs	r1, #15
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	401a      	ands	r2, r3
 800104e:	6a39      	ldr	r1, [r7, #32]
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	fa01 f303 	lsl.w	r3, r1, r3
 8001056:	431a      	orrs	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 8096 	beq.w	8001196 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800106a:	4b59      	ldr	r3, [pc, #356]	; (80011d0 <HAL_GPIO_Init+0x298>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	4a58      	ldr	r2, [pc, #352]	; (80011d0 <HAL_GPIO_Init+0x298>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6193      	str	r3, [r2, #24]
 8001076:	4b56      	ldr	r3, [pc, #344]	; (80011d0 <HAL_GPIO_Init+0x298>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001082:	4a54      	ldr	r2, [pc, #336]	; (80011d4 <HAL_GPIO_Init+0x29c>)
 8001084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3302      	adds	r3, #2
 800108a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	220f      	movs	r2, #15
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	4013      	ands	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a4b      	ldr	r2, [pc, #300]	; (80011d8 <HAL_GPIO_Init+0x2a0>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d013      	beq.n	80010d6 <HAL_GPIO_Init+0x19e>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a4a      	ldr	r2, [pc, #296]	; (80011dc <HAL_GPIO_Init+0x2a4>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d00d      	beq.n	80010d2 <HAL_GPIO_Init+0x19a>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a49      	ldr	r2, [pc, #292]	; (80011e0 <HAL_GPIO_Init+0x2a8>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d007      	beq.n	80010ce <HAL_GPIO_Init+0x196>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a48      	ldr	r2, [pc, #288]	; (80011e4 <HAL_GPIO_Init+0x2ac>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d101      	bne.n	80010ca <HAL_GPIO_Init+0x192>
 80010c6:	2303      	movs	r3, #3
 80010c8:	e006      	b.n	80010d8 <HAL_GPIO_Init+0x1a0>
 80010ca:	2304      	movs	r3, #4
 80010cc:	e004      	b.n	80010d8 <HAL_GPIO_Init+0x1a0>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e002      	b.n	80010d8 <HAL_GPIO_Init+0x1a0>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <HAL_GPIO_Init+0x1a0>
 80010d6:	2300      	movs	r3, #0
 80010d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010da:	f002 0203 	and.w	r2, r2, #3
 80010de:	0092      	lsls	r2, r2, #2
 80010e0:	4093      	lsls	r3, r2
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010e8:	493a      	ldr	r1, [pc, #232]	; (80011d4 <HAL_GPIO_Init+0x29c>)
 80010ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ec:	089b      	lsrs	r3, r3, #2
 80010ee:	3302      	adds	r3, #2
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d006      	beq.n	8001110 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001102:	4b39      	ldr	r3, [pc, #228]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	4938      	ldr	r1, [pc, #224]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	600b      	str	r3, [r1, #0]
 800110e:	e006      	b.n	800111e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001110:	4b35      	ldr	r3, [pc, #212]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	43db      	mvns	r3, r3
 8001118:	4933      	ldr	r1, [pc, #204]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 800111a:	4013      	ands	r3, r2
 800111c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d006      	beq.n	8001138 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800112a:	4b2f      	ldr	r3, [pc, #188]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	492e      	ldr	r1, [pc, #184]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	604b      	str	r3, [r1, #4]
 8001136:	e006      	b.n	8001146 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001138:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	43db      	mvns	r3, r3
 8001140:	4929      	ldr	r1, [pc, #164]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 8001142:	4013      	ands	r3, r2
 8001144:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d006      	beq.n	8001160 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001152:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	4924      	ldr	r1, [pc, #144]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	608b      	str	r3, [r1, #8]
 800115e:	e006      	b.n	800116e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001160:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	43db      	mvns	r3, r3
 8001168:	491f      	ldr	r1, [pc, #124]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 800116a:	4013      	ands	r3, r2
 800116c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d006      	beq.n	8001188 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800117a:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 800117c:	68da      	ldr	r2, [r3, #12]
 800117e:	491a      	ldr	r1, [pc, #104]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	60cb      	str	r3, [r1, #12]
 8001186:	e006      	b.n	8001196 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 800118a:	68da      	ldr	r2, [r3, #12]
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	43db      	mvns	r3, r3
 8001190:	4915      	ldr	r1, [pc, #84]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 8001192:	4013      	ands	r3, r2
 8001194:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	3301      	adds	r3, #1
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	fa22 f303 	lsr.w	r3, r2, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f47f aed0 	bne.w	8000f4c <HAL_GPIO_Init+0x14>
  }
}
 80011ac:	bf00      	nop
 80011ae:	372c      	adds	r7, #44	; 0x2c
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	10210000 	.word	0x10210000
 80011bc:	10110000 	.word	0x10110000
 80011c0:	10120000 	.word	0x10120000
 80011c4:	10310000 	.word	0x10310000
 80011c8:	10320000 	.word	0x10320000
 80011cc:	10220000 	.word	0x10220000
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40010000 	.word	0x40010000
 80011d8:	40010800 	.word	0x40010800
 80011dc:	40010c00 	.word	0x40010c00
 80011e0:	40011000 	.word	0x40011000
 80011e4:	40011400 	.word	0x40011400
 80011e8:	40010400 	.word	0x40010400

080011ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80011fa:	e09a      	b.n	8001332 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80011fc:	2201      	movs	r2, #1
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 808d 	beq.w	800132c <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8001212:	4a4e      	ldr	r2, [pc, #312]	; (800134c <HAL_GPIO_DeInit+0x160>)
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	089b      	lsrs	r3, r3, #2
 8001218:	3302      	adds	r3, #2
 800121a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	220f      	movs	r2, #15
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	4013      	ands	r3, r2
 8001232:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a46      	ldr	r2, [pc, #280]	; (8001350 <HAL_GPIO_DeInit+0x164>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d013      	beq.n	8001264 <HAL_GPIO_DeInit+0x78>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a45      	ldr	r2, [pc, #276]	; (8001354 <HAL_GPIO_DeInit+0x168>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d00d      	beq.n	8001260 <HAL_GPIO_DeInit+0x74>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a44      	ldr	r2, [pc, #272]	; (8001358 <HAL_GPIO_DeInit+0x16c>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d007      	beq.n	800125c <HAL_GPIO_DeInit+0x70>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a43      	ldr	r2, [pc, #268]	; (800135c <HAL_GPIO_DeInit+0x170>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d101      	bne.n	8001258 <HAL_GPIO_DeInit+0x6c>
 8001254:	2303      	movs	r3, #3
 8001256:	e006      	b.n	8001266 <HAL_GPIO_DeInit+0x7a>
 8001258:	2304      	movs	r3, #4
 800125a:	e004      	b.n	8001266 <HAL_GPIO_DeInit+0x7a>
 800125c:	2302      	movs	r3, #2
 800125e:	e002      	b.n	8001266 <HAL_GPIO_DeInit+0x7a>
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <HAL_GPIO_DeInit+0x7a>
 8001264:	2300      	movs	r3, #0
 8001266:	69fa      	ldr	r2, [r7, #28]
 8001268:	f002 0203 	and.w	r2, r2, #3
 800126c:	0092      	lsls	r2, r2, #2
 800126e:	4093      	lsls	r3, r2
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	429a      	cmp	r2, r3
 8001274:	d132      	bne.n	80012dc <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	220f      	movs	r2, #15
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001286:	4a31      	ldr	r2, [pc, #196]	; (800134c <HAL_GPIO_DeInit+0x160>)
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	089b      	lsrs	r3, r3, #2
 800128c:	3302      	adds	r3, #2
 800128e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	43da      	mvns	r2, r3
 8001296:	482d      	ldr	r0, [pc, #180]	; (800134c <HAL_GPIO_DeInit+0x160>)
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	400a      	ands	r2, r1
 800129e:	3302      	adds	r3, #2
 80012a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80012a4:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <HAL_GPIO_DeInit+0x174>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	492c      	ldr	r1, [pc, #176]	; (8001360 <HAL_GPIO_DeInit+0x174>)
 80012ae:	4013      	ands	r3, r2
 80012b0:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80012b2:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <HAL_GPIO_DeInit+0x174>)
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	4929      	ldr	r1, [pc, #164]	; (8001360 <HAL_GPIO_DeInit+0x174>)
 80012bc:	4013      	ands	r3, r2
 80012be:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80012c0:	4b27      	ldr	r3, [pc, #156]	; (8001360 <HAL_GPIO_DeInit+0x174>)
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	4925      	ldr	r1, [pc, #148]	; (8001360 <HAL_GPIO_DeInit+0x174>)
 80012ca:	4013      	ands	r3, r2
 80012cc:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80012ce:	4b24      	ldr	r3, [pc, #144]	; (8001360 <HAL_GPIO_DeInit+0x174>)
 80012d0:	68da      	ldr	r2, [r3, #12]
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	4922      	ldr	r1, [pc, #136]	; (8001360 <HAL_GPIO_DeInit+0x174>)
 80012d8:	4013      	ands	r3, r2
 80012da:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	2bff      	cmp	r3, #255	; 0xff
 80012e0:	d801      	bhi.n	80012e6 <HAL_GPIO_DeInit+0xfa>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	e001      	b.n	80012ea <HAL_GPIO_DeInit+0xfe>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3304      	adds	r3, #4
 80012ea:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	2bff      	cmp	r3, #255	; 0xff
 80012f0:	d802      	bhi.n	80012f8 <HAL_GPIO_DeInit+0x10c>
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	e002      	b.n	80012fe <HAL_GPIO_DeInit+0x112>
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	3b08      	subs	r3, #8
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	210f      	movs	r1, #15
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	fa01 f303 	lsl.w	r3, r1, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	401a      	ands	r2, r3
 8001310:	2104      	movs	r1, #4
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	fa01 f303 	lsl.w	r3, r1, r3
 8001318:	431a      	orrs	r2, r3
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68da      	ldr	r2, [r3, #12]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	43db      	mvns	r3, r3
 8001326:	401a      	ands	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	3301      	adds	r3, #1
 8001330:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	fa22 f303 	lsr.w	r3, r2, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	f47f af5e 	bne.w	80011fc <HAL_GPIO_DeInit+0x10>
  }
}
 8001340:	bf00      	nop
 8001342:	3724      	adds	r7, #36	; 0x24
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40010000 	.word	0x40010000
 8001350:	40010800 	.word	0x40010800
 8001354:	40010c00 	.word	0x40010c00
 8001358:	40011000 	.word	0x40011000
 800135c:	40011400 	.word	0x40011400
 8001360:	40010400 	.word	0x40010400

08001364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
 8001370:	4613      	mov	r3, r2
 8001372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001374:	787b      	ldrb	r3, [r7, #1]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800137a:	887a      	ldrh	r2, [r7, #2]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001380:	e003      	b.n	800138a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	041a      	lsls	r2, r3, #16
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	611a      	str	r2, [r3, #16]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800139e:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013a0:	695a      	ldr	r2, [r3, #20]
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	4013      	ands	r3, r2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d006      	beq.n	80013b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013aa:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013b0:	88fb      	ldrh	r3, [r7, #6]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f002 fefc 	bl	80041b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40010400 	.word	0x40010400

080013c4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013dc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80013e4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013ec:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	2b10      	cmp	r3, #16
 80013f2:	d003      	beq.n	80013fc <HAL_I2C_EV_IRQHandler+0x38>
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	2b40      	cmp	r3, #64	; 0x40
 80013f8:	f040 80b6 	bne.w	8001568 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10d      	bne.n	8001432 <HAL_I2C_EV_IRQHandler+0x6e>
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800141c:	d003      	beq.n	8001426 <HAL_I2C_EV_IRQHandler+0x62>
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001424:	d101      	bne.n	800142a <HAL_I2C_EV_IRQHandler+0x66>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <HAL_I2C_EV_IRQHandler+0x68>
 800142a:	2300      	movs	r3, #0
 800142c:	2b01      	cmp	r3, #1
 800142e:	f000 8127 	beq.w	8001680 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00c      	beq.n	8001456 <HAL_I2C_EV_IRQHandler+0x92>
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	0a5b      	lsrs	r3, r3, #9
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	2b00      	cmp	r3, #0
 8001446:	d006      	beq.n	8001456 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f001 fb74 	bl	8002b36 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 fd03 	bl	8001e5a <I2C_Master_SB>
 8001454:	e087      	b.n	8001566 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	08db      	lsrs	r3, r3, #3
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d009      	beq.n	8001476 <HAL_I2C_EV_IRQHandler+0xb2>
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	0a5b      	lsrs	r3, r3, #9
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 fd78 	bl	8001f64 <I2C_Master_ADD10>
 8001474:	e077      	b.n	8001566 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	085b      	lsrs	r3, r3, #1
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d009      	beq.n	8001496 <HAL_I2C_EV_IRQHandler+0xd2>
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	0a5b      	lsrs	r3, r3, #9
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 fd91 	bl	8001fb6 <I2C_Master_ADDR>
 8001494:	e067      	b.n	8001566 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	089b      	lsrs	r3, r3, #2
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d030      	beq.n	8001504 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014b0:	f000 80e8 	beq.w	8001684 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	09db      	lsrs	r3, r3, #7
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00f      	beq.n	80014e0 <HAL_I2C_EV_IRQHandler+0x11c>
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	0a9b      	lsrs	r3, r3, #10
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d009      	beq.n	80014e0 <HAL_I2C_EV_IRQHandler+0x11c>
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	089b      	lsrs	r3, r3, #2
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d103      	bne.n	80014e0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 f9e4 	bl	80018a6 <I2C_MasterTransmit_TXE>
 80014de:	e042      	b.n	8001566 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	089b      	lsrs	r3, r3, #2
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80cb 	beq.w	8001684 <HAL_I2C_EV_IRQHandler+0x2c0>
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	0a5b      	lsrs	r3, r3, #9
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 80c4 	beq.w	8001684 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 faca 	bl	8001a96 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001502:	e0bf      	b.n	8001684 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800150e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001512:	f000 80b7 	beq.w	8001684 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	099b      	lsrs	r3, r3, #6
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00f      	beq.n	8001542 <HAL_I2C_EV_IRQHandler+0x17e>
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	0a9b      	lsrs	r3, r3, #10
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d009      	beq.n	8001542 <HAL_I2C_EV_IRQHandler+0x17e>
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	089b      	lsrs	r3, r3, #2
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d103      	bne.n	8001542 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 fb21 	bl	8001b82 <I2C_MasterReceive_RXNE>
 8001540:	e011      	b.n	8001566 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 809a 	beq.w	8001684 <HAL_I2C_EV_IRQHandler+0x2c0>
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	0a5b      	lsrs	r3, r3, #9
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 8093 	beq.w	8001684 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 fb91 	bl	8001c86 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001564:	e08e      	b.n	8001684 <HAL_I2C_EV_IRQHandler+0x2c0>
 8001566:	e08d      	b.n	8001684 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	2b00      	cmp	r3, #0
 800156e:	d004      	beq.n	800157a <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	61fb      	str	r3, [r7, #28]
 8001578:	e007      	b.n	800158a <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	085b      	lsrs	r3, r3, #1
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d012      	beq.n	80015bc <HAL_I2C_EV_IRQHandler+0x1f8>
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	0a5b      	lsrs	r3, r3, #9
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00c      	beq.n	80015bc <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80015b2:	69b9      	ldr	r1, [r7, #24]
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 ff55 	bl	8002464 <I2C_Slave_ADDR>
 80015ba:	e066      	b.n	800168a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	091b      	lsrs	r3, r3, #4
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d009      	beq.n	80015dc <HAL_I2C_EV_IRQHandler+0x218>
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	0a5b      	lsrs	r3, r3, #9
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 ff89 	bl	80024ec <I2C_Slave_STOPF>
 80015da:	e056      	b.n	800168a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80015dc:	7bbb      	ldrb	r3, [r7, #14]
 80015de:	2b21      	cmp	r3, #33	; 0x21
 80015e0:	d002      	beq.n	80015e8 <HAL_I2C_EV_IRQHandler+0x224>
 80015e2:	7bbb      	ldrb	r3, [r7, #14]
 80015e4:	2b29      	cmp	r3, #41	; 0x29
 80015e6:	d125      	bne.n	8001634 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	09db      	lsrs	r3, r3, #7
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00f      	beq.n	8001614 <HAL_I2C_EV_IRQHandler+0x250>
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	0a9b      	lsrs	r3, r3, #10
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d009      	beq.n	8001614 <HAL_I2C_EV_IRQHandler+0x250>
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d103      	bne.n	8001614 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 fe6d 	bl	80022ec <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001612:	e039      	b.n	8001688 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	089b      	lsrs	r3, r3, #2
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d033      	beq.n	8001688 <HAL_I2C_EV_IRQHandler+0x2c4>
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	0a5b      	lsrs	r3, r3, #9
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b00      	cmp	r3, #0
 800162a:	d02d      	beq.n	8001688 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 fe9a 	bl	8002366 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001632:	e029      	b.n	8001688 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	099b      	lsrs	r3, r3, #6
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00f      	beq.n	8001660 <HAL_I2C_EV_IRQHandler+0x29c>
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	0a9b      	lsrs	r3, r3, #10
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b00      	cmp	r3, #0
 800164a:	d009      	beq.n	8001660 <HAL_I2C_EV_IRQHandler+0x29c>
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	089b      	lsrs	r3, r3, #2
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	d103      	bne.n	8001660 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 fea4 	bl	80023a6 <I2C_SlaveReceive_RXNE>
 800165e:	e014      	b.n	800168a <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	089b      	lsrs	r3, r3, #2
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00e      	beq.n	800168a <HAL_I2C_EV_IRQHandler+0x2c6>
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	0a5b      	lsrs	r3, r3, #9
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b00      	cmp	r3, #0
 8001676:	d008      	beq.n	800168a <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 fed2 	bl	8002422 <I2C_SlaveReceive_BTF>
 800167e:	e004      	b.n	800168a <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8001680:	bf00      	nop
 8001682:	e002      	b.n	800168a <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001684:	bf00      	nop
 8001686:	e000      	b.n	800168a <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001688:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800168a:	3720      	adds	r7, #32
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	0a1b      	lsrs	r3, r3, #8
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d016      	beq.n	80016e6 <HAL_I2C_ER_IRQHandler+0x56>
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	0a1b      	lsrs	r3, r3, #8
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d010      	beq.n	80016e6 <HAL_I2C_ER_IRQHandler+0x56>
  {
    error |= HAL_I2C_ERROR_BERR;
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80016d4:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016e4:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	0a5b      	lsrs	r3, r3, #9
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00e      	beq.n	8001710 <HAL_I2C_ER_IRQHandler+0x80>
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d008      	beq.n	8001710 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800170e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	0a9b      	lsrs	r3, r3, #10
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b00      	cmp	r3, #0
 800171a:	d041      	beq.n	80017a0 <HAL_I2C_ER_IRQHandler+0x110>
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	0a1b      	lsrs	r3, r3, #8
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b00      	cmp	r3, #0
 8001726:	d03b      	beq.n	80017a0 <HAL_I2C_ER_IRQHandler+0x110>
  {
    tmp1 = hi2c->Mode;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800172e:	76fb      	strb	r3, [r7, #27]
    tmp2 = hi2c->XferCount;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001734:	b29b      	uxth	r3, r3
 8001736:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800173e:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001746:	7efb      	ldrb	r3, [r7, #27]
 8001748:	2b20      	cmp	r3, #32
 800174a:	d112      	bne.n	8001772 <HAL_I2C_ER_IRQHandler+0xe2>
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10f      	bne.n	8001772 <HAL_I2C_ER_IRQHandler+0xe2>
 8001752:	7cfb      	ldrb	r3, [r7, #19]
 8001754:	2b21      	cmp	r3, #33	; 0x21
 8001756:	d008      	beq.n	800176a <HAL_I2C_ER_IRQHandler+0xda>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001758:	7cfb      	ldrb	r3, [r7, #19]
 800175a:	2b29      	cmp	r3, #41	; 0x29
 800175c:	d005      	beq.n	800176a <HAL_I2C_ER_IRQHandler+0xda>
 800175e:	7cfb      	ldrb	r3, [r7, #19]
 8001760:	2b28      	cmp	r3, #40	; 0x28
 8001762:	d106      	bne.n	8001772 <HAL_I2C_ER_IRQHandler+0xe2>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2b21      	cmp	r3, #33	; 0x21
 8001768:	d103      	bne.n	8001772 <HAL_I2C_ER_IRQHandler+0xe2>
    {
      I2C_Slave_AF(hi2c);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 ffee 	bl	800274c <I2C_Slave_AF>
 8001770:	e016      	b.n	80017a0 <HAL_I2C_ER_IRQHandler+0x110>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800177a:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	f043 0304 	orr.w	r3, r3, #4
 8001782:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b10      	cmp	r3, #16
 800178e:	d107      	bne.n	80017a0 <HAL_I2C_ER_IRQHandler+0x110>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800179e:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	0adb      	lsrs	r3, r3, #11
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00e      	beq.n	80017ca <HAL_I2C_ER_IRQHandler+0x13a>
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	0a1b      	lsrs	r3, r3, #8
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d008      	beq.n	80017ca <HAL_I2C_ER_IRQHandler+0x13a>
  {
    error |= HAL_I2C_ERROR_OVR;
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	f043 0308 	orr.w	r3, r3, #8
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80017c8:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <HAL_I2C_ER_IRQHandler+0x152>
  {
    hi2c->ErrorCode |= error;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f001 f825 	bl	800282c <I2C_ITError>
  }
}
 80017e2:	bf00      	nop
 80017e4:	3728      	adds	r7, #40	; 0x28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr

08001820 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	460b      	mov	r3, r1
 800183c:	70fb      	strb	r3, [r7, #3]
 800183e:	4613      	mov	r3, r2
 8001840:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr

08001882 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr

080018a6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b084      	sub	sp, #16
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018bc:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d150      	bne.n	800196e <I2C_MasterTransmit_TXE+0xc8>
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	2b21      	cmp	r3, #33	; 0x21
 80018d0:	d14d      	bne.n	800196e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2b08      	cmp	r3, #8
 80018d6:	d01d      	beq.n	8001914 <I2C_MasterTransmit_TXE+0x6e>
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	2b20      	cmp	r3, #32
 80018dc:	d01a      	beq.n	8001914 <I2C_MasterTransmit_TXE+0x6e>
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018e4:	d016      	beq.n	8001914 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80018f4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2211      	movs	r2, #17
 80018fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2220      	movs	r2, #32
 8001908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff ff6c 	bl	80017ea <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001912:	e0bc      	b.n	8001a8e <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001922:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001932:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2220      	movs	r2, #32
 800193e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b40      	cmp	r3, #64	; 0x40
 800194c:	d107      	bne.n	800195e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff ff81 	bl	800185e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800195c:	e097      	b.n	8001a8e <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ff3f 	bl	80017ea <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800196c:	e08f      	b.n	8001a8e <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	2b21      	cmp	r3, #33	; 0x21
 8001972:	d007      	beq.n	8001984 <I2C_MasterTransmit_TXE+0xde>
 8001974:	7bbb      	ldrb	r3, [r7, #14]
 8001976:	2b40      	cmp	r3, #64	; 0x40
 8001978:	f040 8089 	bne.w	8001a8e <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	2b22      	cmp	r3, #34	; 0x22
 8001980:	f040 8085 	bne.w	8001a8e <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001988:	b29b      	uxth	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d108      	bne.n	80019a0 <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800199c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800199e:	e076      	b.n	8001a8e <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b40      	cmp	r3, #64	; 0x40
 80019aa:	d15d      	bne.n	8001a68 <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d11d      	bne.n	80019f0 <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d10b      	bne.n	80019d4 <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019cc:	1c9a      	adds	r2, r3, #2
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80019d2:	e05c      	b.n	8001a8e <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019d8:	b29b      	uxth	r3, r3
 80019da:	121b      	asrs	r3, r3, #8
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	651a      	str	r2, [r3, #80]	; 0x50
}
 80019ee:	e04e      	b.n	8001a8e <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d10b      	bne.n	8001a10 <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a08:	1c5a      	adds	r2, r3, #1
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001a0e:	e03e      	b.n	8001a8e <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d13a      	bne.n	8001a8e <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b22      	cmp	r3, #34	; 0x22
 8001a22:	d108      	bne.n	8001a36 <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a32:	601a      	str	r2, [r3, #0]
}
 8001a34:	e02b      	b.n	8001a8e <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b21      	cmp	r3, #33	; 0x21
 8001a40:	d125      	bne.n	8001a8e <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	781a      	ldrb	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001a66:	e012      	b.n	8001a8e <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	781a      	ldrb	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	3b01      	subs	r3, #1
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001a8c:	e7ff      	b.n	8001a8e <I2C_MasterTransmit_TXE+0x1e8>
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b084      	sub	sp, #16
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b21      	cmp	r3, #33	; 0x21
 8001aae:	d164      	bne.n	8001b7a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d012      	beq.n	8001ae0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	781a      	ldrb	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	1c5a      	adds	r2, r3, #1
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 8001ade:	e04c      	b.n	8001b7a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b08      	cmp	r3, #8
 8001ae4:	d01d      	beq.n	8001b22 <I2C_MasterTransmit_BTF+0x8c>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2b20      	cmp	r3, #32
 8001aea:	d01a      	beq.n	8001b22 <I2C_MasterTransmit_BTF+0x8c>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001af2:	d016      	beq.n	8001b22 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b02:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2211      	movs	r2, #17
 8001b08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2220      	movs	r2, #32
 8001b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff fe65 	bl	80017ea <HAL_I2C_MasterTxCpltCallback>
}
 8001b20:	e02b      	b.n	8001b7a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b30:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b40:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b40      	cmp	r3, #64	; 0x40
 8001b5a:	d107      	bne.n	8001b6c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff fe7a 	bl	800185e <HAL_I2C_MemTxCpltCallback>
}
 8001b6a:	e006      	b.n	8001b7a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff fe38 	bl	80017ea <HAL_I2C_MasterTxCpltCallback>
}
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b084      	sub	sp, #16
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b22      	cmp	r3, #34	; 0x22
 8001b94:	d173      	bne.n	8001c7e <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	d920      	bls.n	8001be6 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	691a      	ldr	r2, [r3, #16]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	d154      	bne.n	8001c7e <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001be2:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8001be4:	e04b      	b.n	8001c7e <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d047      	beq.n	8001c7e <I2C_MasterReceive_RXNE+0xfc>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d002      	beq.n	8001bfa <I2C_MasterReceive_RXNE+0x78>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d141      	bne.n	8001c7e <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c08:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c18:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	691a      	ldr	r2, [r3, #16]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	1c5a      	adds	r2, r3, #1
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2220      	movs	r2, #32
 8001c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b40      	cmp	r3, #64	; 0x40
 8001c52:	d10a      	bne.n	8001c6a <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff fe04 	bl	8001870 <HAL_I2C_MemRxCpltCallback>
}
 8001c68:	e009      	b.n	8001c7e <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2212      	movs	r2, #18
 8001c76:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff fdbf 	bl	80017fc <HAL_I2C_MasterRxCpltCallback>
}
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b084      	sub	sp, #16
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c92:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d11b      	bne.n	8001cd6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cac:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	691a      	ldr	r2, [r3, #16]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001cd4:	e0bd      	b.n	8001e52 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	d129      	bne.n	8001d34 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cee:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d00a      	beq.n	8001d0c <I2C_MasterReceive_BTF+0x86>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d007      	beq.n	8001d0c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d0a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691a      	ldr	r2, [r3, #16]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	1c5a      	adds	r2, r3, #1
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001d32:	e08e      	b.n	8001e52 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d176      	bne.n	8001e2c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d002      	beq.n	8001d4a <I2C_MasterReceive_BTF+0xc4>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2b10      	cmp	r3, #16
 8001d48:	d108      	bne.n	8001d5c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	e019      	b.n	8001d90 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d002      	beq.n	8001d68 <I2C_MasterReceive_BTF+0xe2>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d108      	bne.n	8001d7a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	e00a      	b.n	8001d90 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2b10      	cmp	r3, #16
 8001d7e:	d007      	beq.n	8001d90 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d8e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	691a      	ldr	r2, [r3, #16]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001dea:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2220      	movs	r2, #32
 8001df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b40      	cmp	r3, #64	; 0x40
 8001dfe:	d10a      	bne.n	8001e16 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff fd2e 	bl	8001870 <HAL_I2C_MemRxCpltCallback>
}
 8001e14:	e01d      	b.n	8001e52 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2212      	movs	r2, #18
 8001e22:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff fce9 	bl	80017fc <HAL_I2C_MasterRxCpltCallback>
}
 8001e2a:	e012      	b.n	8001e52 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b40      	cmp	r3, #64	; 0x40
 8001e6c:	d117      	bne.n	8001e9e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d109      	bne.n	8001e8a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e86:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001e88:	e067      	b.n	8001f5a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	611a      	str	r2, [r3, #16]
}
 8001e9c:	e05d      	b.n	8001f5a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ea6:	d133      	bne.n	8001f10 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b21      	cmp	r3, #33	; 0x21
 8001eb2:	d109      	bne.n	8001ec8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ec4:	611a      	str	r2, [r3, #16]
 8001ec6:	e008      	b.n	8001eda <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d103      	bne.n	8001eea <I2C_Master_SB+0x90>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d037      	beq.n	8001f5a <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d104      	bne.n	8001efe <I2C_Master_SB+0xa4>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d02d      	beq.n	8001f5a <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f0c:	605a      	str	r2, [r3, #4]
}
 8001f0e:	e024      	b.n	8001f5a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10e      	bne.n	8001f36 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	11db      	asrs	r3, r3, #7
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	f003 0306 	and.w	r3, r3, #6
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f063 030f 	orn	r3, r3, #15
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	611a      	str	r2, [r3, #16]
}
 8001f34:	e011      	b.n	8001f5a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d10d      	bne.n	8001f5a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	11db      	asrs	r3, r3, #7
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	f003 0306 	and.w	r3, r3, #6
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	f063 030e 	orn	r3, r3, #14
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	611a      	str	r2, [r3, #16]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d103      	bne.n	8001f88 <I2C_Master_ADD10+0x24>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d011      	beq.n	8001fac <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d104      	bne.n	8001f9c <I2C_Master_ADD10+0x38>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d007      	beq.n	8001fac <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001faa:	605a      	str	r2, [r3, #4]
    }
  }
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr

08001fb6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b091      	sub	sp, #68	; 0x44
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fc4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fcc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b22      	cmp	r3, #34	; 0x22
 8001fde:	f040 8174 	bne.w	80022ca <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10f      	bne.n	800200a <I2C_Master_ADDR+0x54>
 8001fea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001fee:	2b40      	cmp	r3, #64	; 0x40
 8001ff0:	d10b      	bne.n	800200a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	633b      	str	r3, [r7, #48]	; 0x30
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	633b      	str	r3, [r7, #48]	; 0x30
 8002006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002008:	e16b      	b.n	80022e2 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800200e:	2b00      	cmp	r3, #0
 8002010:	d11d      	bne.n	800204e <I2C_Master_ADDR+0x98>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800201a:	d118      	bne.n	800204e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800201c:	2300      	movs	r3, #0
 800201e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002030:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002040:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	651a      	str	r2, [r3, #80]	; 0x50
 800204c:	e149      	b.n	80022e2 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002052:	b29b      	uxth	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d113      	bne.n	8002080 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002058:	2300      	movs	r3, #0
 800205a:	62bb      	str	r3, [r7, #40]	; 0x28
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	62bb      	str	r3, [r7, #40]	; 0x28
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	62bb      	str	r3, [r7, #40]	; 0x28
 800206c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	e120      	b.n	80022c2 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002084:	b29b      	uxth	r3, r3
 8002086:	2b01      	cmp	r3, #1
 8002088:	f040 808a 	bne.w	80021a0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800208c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800208e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002092:	d137      	bne.n	8002104 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020a2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020b2:	d113      	bne.n	80020dc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020c2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020c4:	2300      	movs	r3, #0
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	e0f2      	b.n	80022c2 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020dc:	2300      	movs	r3, #0
 80020de:	623b      	str	r3, [r7, #32]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	623b      	str	r3, [r7, #32]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	623b      	str	r3, [r7, #32]
 80020f0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	e0de      	b.n	80022c2 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002106:	2b08      	cmp	r3, #8
 8002108:	d02e      	beq.n	8002168 <I2C_Master_ADDR+0x1b2>
 800210a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800210c:	2b20      	cmp	r3, #32
 800210e:	d02b      	beq.n	8002168 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002112:	2b12      	cmp	r3, #18
 8002114:	d102      	bne.n	800211c <I2C_Master_ADDR+0x166>
 8002116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002118:	2b01      	cmp	r3, #1
 800211a:	d125      	bne.n	8002168 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800211c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211e:	2b04      	cmp	r3, #4
 8002120:	d00e      	beq.n	8002140 <I2C_Master_ADDR+0x18a>
 8002122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002124:	2b02      	cmp	r3, #2
 8002126:	d00b      	beq.n	8002140 <I2C_Master_ADDR+0x18a>
 8002128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800212a:	2b10      	cmp	r3, #16
 800212c:	d008      	beq.n	8002140 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	e007      	b.n	8002150 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800214e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	61fb      	str	r3, [r7, #28]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	e0ac      	b.n	80022c2 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002176:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002178:	2300      	movs	r3, #0
 800217a:	61bb      	str	r3, [r7, #24]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	61bb      	str	r3, [r7, #24]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	61bb      	str	r3, [r7, #24]
 800218c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	e090      	b.n	80022c2 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d158      	bne.n	800225c <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80021aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d021      	beq.n	80021f4 <I2C_Master_ADDR+0x23e>
 80021b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d01e      	beq.n	80021f4 <I2C_Master_ADDR+0x23e>
 80021b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b8:	2b10      	cmp	r3, #16
 80021ba:	d01b      	beq.n	80021f4 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021ca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	e012      	b.n	800221a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002202:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002204:	2300      	movs	r3, #0
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002228:	d14b      	bne.n	80022c2 <I2C_Master_ADDR+0x30c>
 800222a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002230:	d00b      	beq.n	800224a <I2C_Master_ADDR+0x294>
 8002232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002234:	2b01      	cmp	r3, #1
 8002236:	d008      	beq.n	800224a <I2C_Master_ADDR+0x294>
 8002238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800223a:	2b08      	cmp	r3, #8
 800223c:	d005      	beq.n	800224a <I2C_Master_ADDR+0x294>
 800223e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002240:	2b10      	cmp	r3, #16
 8002242:	d002      	beq.n	800224a <I2C_Master_ADDR+0x294>
 8002244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002246:	2b20      	cmp	r3, #32
 8002248:	d13b      	bne.n	80022c2 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	e032      	b.n	80022c2 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800226a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002276:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800227a:	d117      	bne.n	80022ac <I2C_Master_ADDR+0x2f6>
 800227c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800227e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002282:	d00b      	beq.n	800229c <I2C_Master_ADDR+0x2e6>
 8002284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002286:	2b01      	cmp	r3, #1
 8002288:	d008      	beq.n	800229c <I2C_Master_ADDR+0x2e6>
 800228a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800228c:	2b08      	cmp	r3, #8
 800228e:	d005      	beq.n	800229c <I2C_Master_ADDR+0x2e6>
 8002290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002292:	2b10      	cmp	r3, #16
 8002294:	d002      	beq.n	800229c <I2C_Master_ADDR+0x2e6>
 8002296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002298:	2b20      	cmp	r3, #32
 800229a:	d107      	bne.n	80022ac <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80022aa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ac:	2300      	movs	r3, #0
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80022c8:	e00b      	b.n	80022e2 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	60bb      	str	r3, [r7, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	68bb      	ldr	r3, [r7, #8]
}
 80022e0:	e7ff      	b.n	80022e2 <I2C_Master_ADDR+0x32c>
 80022e2:	bf00      	nop
 80022e4:	3744      	adds	r7, #68	; 0x44
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr

080022ec <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022fa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002300:	b29b      	uxth	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d02b      	beq.n	800235e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	781a      	ldrb	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002320:	b29b      	uxth	r3, r3
 8002322:	3b01      	subs	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232e:	b29b      	uxth	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d114      	bne.n	800235e <I2C_SlaveTransmit_TXE+0x72>
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	2b29      	cmp	r3, #41	; 0x29
 8002338:	d111      	bne.n	800235e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002348:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2221      	movs	r2, #33	; 0x21
 800234e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2228      	movs	r2, #40	; 0x28
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff fa58 	bl	800180e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002372:	b29b      	uxth	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d011      	beq.n	800239c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	781a      	ldrb	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002392:	b29b      	uxth	r3, r3
 8002394:	3b01      	subs	r3, #1
 8002396:	b29a      	uxth	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr

080023a6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b084      	sub	sp, #16
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d02c      	beq.n	800241a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	691a      	ldr	r2, [r3, #16]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d114      	bne.n	800241a <I2C_SlaveReceive_RXNE+0x74>
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	2b2a      	cmp	r3, #42	; 0x2a
 80023f4:	d111      	bne.n	800241a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002404:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2222      	movs	r2, #34	; 0x22
 800240a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2228      	movs	r2, #40	; 0x28
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff fa03 	bl	8001820 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242e:	b29b      	uxth	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d012      	beq.n	800245a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691a      	ldr	r2, [r3, #16]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002450:	b29b      	uxth	r3, r3
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002478:	b2db      	uxtb	r3, r3
 800247a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800247e:	2b28      	cmp	r3, #40	; 0x28
 8002480:	d127      	bne.n	80024d2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002490:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	089b      	lsrs	r3, r3, #2
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800249e:	2301      	movs	r3, #1
 80024a0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	09db      	lsrs	r3, r3, #7
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d103      	bne.n	80024b6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	81bb      	strh	r3, [r7, #12]
 80024b4:	e002      	b.n	80024bc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80024c4:	89ba      	ldrh	r2, [r7, #12]
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	4619      	mov	r1, r3
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff f9b1 	bl	8001832 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80024d0:	e008      	b.n	80024e4 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f06f 0202 	mvn.w	r2, #2
 80024da:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80024e4:	bf00      	nop
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024fa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800250a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800250c:	2300      	movs	r3, #0
 800250e:	60bb      	str	r3, [r7, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	60bb      	str	r3, [r7, #8]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0201 	orr.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002538:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002544:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002548:	d172      	bne.n	8002630 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	2b22      	cmp	r3, #34	; 0x22
 800254e:	d002      	beq.n	8002556 <I2C_Slave_STOPF+0x6a>
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	2b2a      	cmp	r3, #42	; 0x2a
 8002554:	d135      	bne.n	80025c2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	b29a      	uxth	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d005      	beq.n	800257a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f043 0204 	orr.w	r2, r3, #4
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002588:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe fcc6 	bl	8000f20 <HAL_DMA_GetState>
 8002594:	4603      	mov	r3, r0
 8002596:	2b01      	cmp	r3, #1
 8002598:	d049      	beq.n	800262e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259e:	4a69      	ldr	r2, [pc, #420]	; (8002744 <I2C_Slave_STOPF+0x258>)
 80025a0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe fc44 	bl	8000e34 <HAL_DMA_Abort_IT>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d03d      	beq.n	800262e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025bc:	4610      	mov	r0, r2
 80025be:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025c0:	e035      	b.n	800262e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f043 0204 	orr.w	r2, r3, #4
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fe fc90 	bl	8000f20 <HAL_DMA_GetState>
 8002600:	4603      	mov	r3, r0
 8002602:	2b01      	cmp	r3, #1
 8002604:	d014      	beq.n	8002630 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260a:	4a4e      	ldr	r2, [pc, #312]	; (8002744 <I2C_Slave_STOPF+0x258>)
 800260c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002612:	4618      	mov	r0, r3
 8002614:	f7fe fc0e 	bl	8000e34 <HAL_DMA_Abort_IT>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d008      	beq.n	8002630 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002628:	4610      	mov	r0, r2
 800262a:	4798      	blx	r3
 800262c:	e000      	b.n	8002630 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800262e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d03e      	beq.n	80026b8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b04      	cmp	r3, #4
 8002646:	d112      	bne.n	800266e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002664:	b29b      	uxth	r3, r3
 8002666:	3b01      	subs	r3, #1
 8002668:	b29a      	uxth	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002678:	2b40      	cmp	r3, #64	; 0x40
 800267a:	d112      	bne.n	80026a2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002698:	b29b      	uxth	r3, r3
 800269a:	3b01      	subs	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	f043 0204 	orr.w	r2, r3, #4
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f8b3 	bl	800282c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80026c6:	e039      	b.n	800273c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	2b2a      	cmp	r3, #42	; 0x2a
 80026cc:	d109      	bne.n	80026e2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2228      	movs	r2, #40	; 0x28
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff f89f 	bl	8001820 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b28      	cmp	r3, #40	; 0x28
 80026ec:	d111      	bne.n	8002712 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a15      	ldr	r2, [pc, #84]	; (8002748 <I2C_Slave_STOPF+0x25c>)
 80026f2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2220      	movs	r2, #32
 80026fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff f89e 	bl	800184c <HAL_I2C_ListenCpltCallback>
}
 8002710:	e014      	b.n	800273c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	2b22      	cmp	r3, #34	; 0x22
 8002718:	d002      	beq.n	8002720 <I2C_Slave_STOPF+0x234>
 800271a:	7bfb      	ldrb	r3, [r7, #15]
 800271c:	2b22      	cmp	r3, #34	; 0x22
 800271e:	d10d      	bne.n	800273c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2220      	movs	r2, #32
 800272a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff f872 	bl	8001820 <HAL_I2C_SlaveRxCpltCallback>
}
 800273c:	bf00      	nop
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	08002a59 	.word	0x08002a59
 8002748:	ffff0000 	.word	0xffff0000

0800274c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800275a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002760:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2b08      	cmp	r3, #8
 8002766:	d002      	beq.n	800276e <I2C_Slave_AF+0x22>
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2b20      	cmp	r3, #32
 800276c:	d129      	bne.n	80027c2 <I2C_Slave_AF+0x76>
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	2b28      	cmp	r3, #40	; 0x28
 8002772:	d126      	bne.n	80027c2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a2c      	ldr	r2, [pc, #176]	; (8002828 <I2C_Slave_AF+0xdc>)
 8002778:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002788:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002792:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff f846 	bl	800184c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80027c0:	e02e      	b.n	8002820 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	2b21      	cmp	r3, #33	; 0x21
 80027c6:	d126      	bne.n	8002816 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a17      	ldr	r2, [pc, #92]	; (8002828 <I2C_Slave_AF+0xdc>)
 80027cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2221      	movs	r2, #33	; 0x21
 80027d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027f2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027fc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800280c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7fe fffd 	bl	800180e <HAL_I2C_SlaveTxCpltCallback>
}
 8002814:	e004      	b.n	8002820 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800281e:	615a      	str	r2, [r3, #20]
}
 8002820:	bf00      	nop
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	ffff0000 	.word	0xffff0000

0800282c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283a:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b10      	cmp	r3, #16
 8002846:	d10a      	bne.n	800285e <I2C_ITError+0x32>
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	2b22      	cmp	r3, #34	; 0x22
 800284c:	d107      	bne.n	800285e <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800285c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002864:	2b28      	cmp	r3, #40	; 0x28
 8002866:	d107      	bne.n	8002878 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2228      	movs	r2, #40	; 0x28
 8002872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002876:	e015      	b.n	80028a4 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002886:	d006      	beq.n	8002896 <I2C_ITError+0x6a>
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	2b60      	cmp	r3, #96	; 0x60
 800288c:	d003      	beq.n	8002896 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028b2:	d161      	bne.n	8002978 <I2C_ITError+0x14c>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028c2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d020      	beq.n	8002912 <I2C_ITError+0xe6>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d4:	4a5e      	ldr	r2, [pc, #376]	; (8002a50 <I2C_ITError+0x224>)
 80028d6:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fe faa9 	bl	8000e34 <HAL_DMA_Abort_IT>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 8089 	beq.w	80029fc <I2C_ITError+0x1d0>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 0201 	bic.w	r2, r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800290c:	4610      	mov	r0, r2
 800290e:	4798      	blx	r3
 8002910:	e074      	b.n	80029fc <I2C_ITError+0x1d0>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002916:	4a4e      	ldr	r2, [pc, #312]	; (8002a50 <I2C_ITError+0x224>)
 8002918:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe fa88 	bl	8000e34 <HAL_DMA_Abort_IT>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d068      	beq.n	80029fc <I2C_ITError+0x1d0>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002934:	2b40      	cmp	r3, #64	; 0x40
 8002936:	d10b      	bne.n	8002950 <I2C_ITError+0x124>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	691a      	ldr	r2, [r3, #16]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0201 	bic.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002972:	4610      	mov	r0, r2
 8002974:	4798      	blx	r3
 8002976:	e041      	b.n	80029fc <I2C_ITError+0x1d0>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b60      	cmp	r3, #96	; 0x60
 8002982:	d125      	bne.n	80029d0 <I2C_ITError+0x1a4>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299c:	2b40      	cmp	r3, #64	; 0x40
 800299e:	d10b      	bne.n	80029b8 <I2C_ITError+0x18c>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	691a      	ldr	r2, [r3, #16]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0201 	bic.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7fe ff63 	bl	8001894 <HAL_I2C_AbortCpltCallback>
 80029ce:	e015      	b.n	80029fc <I2C_ITError+0x1d0>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029da:	2b40      	cmp	r3, #64	; 0x40
 80029dc:	d10b      	bne.n	80029f6 <I2C_ITError+0x1ca>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7fe ff43 	bl	8001882 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a02:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d11b      	bne.n	8002a48 <I2C_ITError+0x21c>
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	2b28      	cmp	r3, #40	; 0x28
 8002a14:	d118      	bne.n	8002a48 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a24:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <I2C_ITError+0x228>)
 8002a2a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2220      	movs	r2, #32
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fe ff02 	bl	800184c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002a48:	bf00      	nop
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	08002a59 	.word	0x08002a59
 8002a54:	ffff0000 	.word	0xffff0000

08002a58 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a6c:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a72:	2200      	movs	r2, #0
 8002a74:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a8c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a98:	2200      	movs	r2, #0
 8002a9a:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0201 	bic.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b60      	cmp	r3, #96	; 0x60
 8002abe:	d10e      	bne.n	8002ade <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f7fe fedc 	bl	8001894 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002adc:	e027      	b.n	8002b2e <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ade:	7afb      	ldrb	r3, [r7, #11]
 8002ae0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ae4:	2b28      	cmp	r3, #40	; 0x28
 8002ae6:	d117      	bne.n	8002b18 <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0201 	orr.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b06:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2228      	movs	r2, #40	; 0x28
 8002b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b16:	e007      	b.n	8002b28 <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f7fe feaa 	bl	8001882 <HAL_I2C_ErrorCallback>
}
 8002b2e:	bf00      	nop
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b42:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002b46:	d103      	bne.n	8002b50 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002b4e:	e007      	b.n	8002b60 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002b58:	d102      	bne.n	8002b60 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2208      	movs	r2, #8
 8002b5e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr
	...

08002b6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e26c      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 8087 	beq.w	8002c9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b8c:	4b92      	ldr	r3, [pc, #584]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 030c 	and.w	r3, r3, #12
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d00c      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b98:	4b8f      	ldr	r3, [pc, #572]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 030c 	and.w	r3, r3, #12
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d112      	bne.n	8002bca <HAL_RCC_OscConfig+0x5e>
 8002ba4:	4b8c      	ldr	r3, [pc, #560]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb0:	d10b      	bne.n	8002bca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb2:	4b89      	ldr	r3, [pc, #548]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d06c      	beq.n	8002c98 <HAL_RCC_OscConfig+0x12c>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d168      	bne.n	8002c98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e246      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd2:	d106      	bne.n	8002be2 <HAL_RCC_OscConfig+0x76>
 8002bd4:	4b80      	ldr	r3, [pc, #512]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a7f      	ldr	r2, [pc, #508]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	e02e      	b.n	8002c40 <HAL_RCC_OscConfig+0xd4>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10c      	bne.n	8002c04 <HAL_RCC_OscConfig+0x98>
 8002bea:	4b7b      	ldr	r3, [pc, #492]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a7a      	ldr	r2, [pc, #488]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	4b78      	ldr	r3, [pc, #480]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a77      	ldr	r2, [pc, #476]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	e01d      	b.n	8002c40 <HAL_RCC_OscConfig+0xd4>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c0c:	d10c      	bne.n	8002c28 <HAL_RCC_OscConfig+0xbc>
 8002c0e:	4b72      	ldr	r3, [pc, #456]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a71      	ldr	r2, [pc, #452]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	4b6f      	ldr	r3, [pc, #444]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a6e      	ldr	r2, [pc, #440]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	e00b      	b.n	8002c40 <HAL_RCC_OscConfig+0xd4>
 8002c28:	4b6b      	ldr	r3, [pc, #428]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a6a      	ldr	r2, [pc, #424]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c32:	6013      	str	r3, [r2, #0]
 8002c34:	4b68      	ldr	r3, [pc, #416]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a67      	ldr	r2, [pc, #412]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d013      	beq.n	8002c70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c48:	f7fd ff8a 	bl	8000b60 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c50:	f7fd ff86 	bl	8000b60 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b64      	cmp	r3, #100	; 0x64
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e1fa      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c62:	4b5d      	ldr	r3, [pc, #372]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0xe4>
 8002c6e:	e014      	b.n	8002c9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c70:	f7fd ff76 	bl	8000b60 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c78:	f7fd ff72 	bl	8000b60 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b64      	cmp	r3, #100	; 0x64
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e1e6      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8a:	4b53      	ldr	r3, [pc, #332]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x10c>
 8002c96:	e000      	b.n	8002c9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d063      	beq.n	8002d6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ca6:	4b4c      	ldr	r3, [pc, #304]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00b      	beq.n	8002cca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cb2:	4b49      	ldr	r3, [pc, #292]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d11c      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x18c>
 8002cbe:	4b46      	ldr	r3, [pc, #280]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d116      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cca:	4b43      	ldr	r3, [pc, #268]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d005      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x176>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d001      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e1ba      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce2:	4b3d      	ldr	r3, [pc, #244]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	4939      	ldr	r1, [pc, #228]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf6:	e03a      	b.n	8002d6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d020      	beq.n	8002d42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d00:	4b36      	ldr	r3, [pc, #216]	; (8002ddc <HAL_RCC_OscConfig+0x270>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d06:	f7fd ff2b 	bl	8000b60 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d0e:	f7fd ff27 	bl	8000b60 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e19b      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d20:	4b2d      	ldr	r3, [pc, #180]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0f0      	beq.n	8002d0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2c:	4b2a      	ldr	r3, [pc, #168]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4927      	ldr	r1, [pc, #156]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	600b      	str	r3, [r1, #0]
 8002d40:	e015      	b.n	8002d6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d42:	4b26      	ldr	r3, [pc, #152]	; (8002ddc <HAL_RCC_OscConfig+0x270>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d48:	f7fd ff0a 	bl	8000b60 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d50:	f7fd ff06 	bl	8000b60 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e17a      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d62:	4b1d      	ldr	r3, [pc, #116]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d03a      	beq.n	8002df0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d019      	beq.n	8002db6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d82:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <HAL_RCC_OscConfig+0x274>)
 8002d84:	2201      	movs	r2, #1
 8002d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d88:	f7fd feea 	bl	8000b60 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d90:	f7fd fee6 	bl	8000b60 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e15a      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da2:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <HAL_RCC_OscConfig+0x26c>)
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dae:	2001      	movs	r0, #1
 8002db0:	f000 fada 	bl	8003368 <RCC_Delay>
 8002db4:	e01c      	b.n	8002df0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db6:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <HAL_RCC_OscConfig+0x274>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dbc:	f7fd fed0 	bl	8000b60 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc2:	e00f      	b.n	8002de4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc4:	f7fd fecc 	bl	8000b60 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d908      	bls.n	8002de4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e140      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
 8002dd6:	bf00      	nop
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	42420000 	.word	0x42420000
 8002de0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de4:	4b9e      	ldr	r3, [pc, #632]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1e9      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 80a6 	beq.w	8002f4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e02:	4b97      	ldr	r3, [pc, #604]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10d      	bne.n	8002e2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e0e:	4b94      	ldr	r3, [pc, #592]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	4a93      	ldr	r2, [pc, #588]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e18:	61d3      	str	r3, [r2, #28]
 8002e1a:	4b91      	ldr	r3, [pc, #580]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e26:	2301      	movs	r3, #1
 8002e28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2a:	4b8e      	ldr	r3, [pc, #568]	; (8003064 <HAL_RCC_OscConfig+0x4f8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d118      	bne.n	8002e68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e36:	4b8b      	ldr	r3, [pc, #556]	; (8003064 <HAL_RCC_OscConfig+0x4f8>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a8a      	ldr	r2, [pc, #552]	; (8003064 <HAL_RCC_OscConfig+0x4f8>)
 8002e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e42:	f7fd fe8d 	bl	8000b60 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e4a:	f7fd fe89 	bl	8000b60 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b64      	cmp	r3, #100	; 0x64
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e0fd      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5c:	4b81      	ldr	r3, [pc, #516]	; (8003064 <HAL_RCC_OscConfig+0x4f8>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d106      	bne.n	8002e7e <HAL_RCC_OscConfig+0x312>
 8002e70:	4b7b      	ldr	r3, [pc, #492]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	4a7a      	ldr	r2, [pc, #488]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	6213      	str	r3, [r2, #32]
 8002e7c:	e02d      	b.n	8002eda <HAL_RCC_OscConfig+0x36e>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x334>
 8002e86:	4b76      	ldr	r3, [pc, #472]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	4a75      	ldr	r2, [pc, #468]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e8c:	f023 0301 	bic.w	r3, r3, #1
 8002e90:	6213      	str	r3, [r2, #32]
 8002e92:	4b73      	ldr	r3, [pc, #460]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	4a72      	ldr	r2, [pc, #456]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002e98:	f023 0304 	bic.w	r3, r3, #4
 8002e9c:	6213      	str	r3, [r2, #32]
 8002e9e:	e01c      	b.n	8002eda <HAL_RCC_OscConfig+0x36e>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	2b05      	cmp	r3, #5
 8002ea6:	d10c      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x356>
 8002ea8:	4b6d      	ldr	r3, [pc, #436]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	4a6c      	ldr	r2, [pc, #432]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002eae:	f043 0304 	orr.w	r3, r3, #4
 8002eb2:	6213      	str	r3, [r2, #32]
 8002eb4:	4b6a      	ldr	r3, [pc, #424]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	4a69      	ldr	r2, [pc, #420]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	6213      	str	r3, [r2, #32]
 8002ec0:	e00b      	b.n	8002eda <HAL_RCC_OscConfig+0x36e>
 8002ec2:	4b67      	ldr	r3, [pc, #412]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	4a66      	ldr	r2, [pc, #408]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	6213      	str	r3, [r2, #32]
 8002ece:	4b64      	ldr	r3, [pc, #400]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	4a63      	ldr	r2, [pc, #396]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002ed4:	f023 0304 	bic.w	r3, r3, #4
 8002ed8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d015      	beq.n	8002f0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee2:	f7fd fe3d 	bl	8000b60 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee8:	e00a      	b.n	8002f00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eea:	f7fd fe39 	bl	8000b60 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e0ab      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f00:	4b57      	ldr	r3, [pc, #348]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0ee      	beq.n	8002eea <HAL_RCC_OscConfig+0x37e>
 8002f0c:	e014      	b.n	8002f38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0e:	f7fd fe27 	bl	8000b60 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f14:	e00a      	b.n	8002f2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f16:	f7fd fe23 	bl	8000b60 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e095      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f2c:	4b4c      	ldr	r3, [pc, #304]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1ee      	bne.n	8002f16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f38:	7dfb      	ldrb	r3, [r7, #23]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d105      	bne.n	8002f4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f3e:	4b48      	ldr	r3, [pc, #288]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	4a47      	ldr	r2, [pc, #284]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 8081 	beq.w	8003056 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f54:	4b42      	ldr	r3, [pc, #264]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 030c 	and.w	r3, r3, #12
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d061      	beq.n	8003024 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d146      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f68:	4b3f      	ldr	r3, [pc, #252]	; (8003068 <HAL_RCC_OscConfig+0x4fc>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6e:	f7fd fdf7 	bl	8000b60 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f76:	f7fd fdf3 	bl	8000b60 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e067      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f88:	4b35      	ldr	r3, [pc, #212]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1f0      	bne.n	8002f76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f9c:	d108      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f9e:	4b30      	ldr	r3, [pc, #192]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	492d      	ldr	r1, [pc, #180]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fb0:	4b2b      	ldr	r3, [pc, #172]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a19      	ldr	r1, [r3, #32]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	4927      	ldr	r1, [pc, #156]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fc8:	4b27      	ldr	r3, [pc, #156]	; (8003068 <HAL_RCC_OscConfig+0x4fc>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fce:	f7fd fdc7 	bl	8000b60 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd6:	f7fd fdc3 	bl	8000b60 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e037      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fe8:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0f0      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x46a>
 8002ff4:	e02f      	b.n	8003056 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff6:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <HAL_RCC_OscConfig+0x4fc>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffc:	f7fd fdb0 	bl	8000b60 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003004:	f7fd fdac 	bl	8000b60 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e020      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003016:	4b12      	ldr	r3, [pc, #72]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0x498>
 8003022:	e018      	b.n	8003056 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e013      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_RCC_OscConfig+0x4f4>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	429a      	cmp	r2, r3
 8003042:	d106      	bne.n	8003052 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304e:	429a      	cmp	r2, r3
 8003050:	d001      	beq.n	8003056 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40021000 	.word	0x40021000
 8003064:	40007000 	.word	0x40007000
 8003068:	42420060 	.word	0x42420060

0800306c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0d0      	b.n	8003222 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003080:	4b6a      	ldr	r3, [pc, #424]	; (800322c <HAL_RCC_ClockConfig+0x1c0>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d910      	bls.n	80030b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308e:	4b67      	ldr	r3, [pc, #412]	; (800322c <HAL_RCC_ClockConfig+0x1c0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f023 0207 	bic.w	r2, r3, #7
 8003096:	4965      	ldr	r1, [pc, #404]	; (800322c <HAL_RCC_ClockConfig+0x1c0>)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	4313      	orrs	r3, r2
 800309c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800309e:	4b63      	ldr	r3, [pc, #396]	; (800322c <HAL_RCC_ClockConfig+0x1c0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d001      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0b8      	b.n	8003222 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d020      	beq.n	80030fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030c8:	4b59      	ldr	r3, [pc, #356]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	4a58      	ldr	r2, [pc, #352]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80030ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030e0:	4b53      	ldr	r3, [pc, #332]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	4a52      	ldr	r2, [pc, #328]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80030e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ec:	4b50      	ldr	r3, [pc, #320]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	494d      	ldr	r1, [pc, #308]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d040      	beq.n	800318c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d107      	bne.n	8003122 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003112:	4b47      	ldr	r3, [pc, #284]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d115      	bne.n	800314a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e07f      	b.n	8003222 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b02      	cmp	r3, #2
 8003128:	d107      	bne.n	800313a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312a:	4b41      	ldr	r3, [pc, #260]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d109      	bne.n	800314a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e073      	b.n	8003222 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313a:	4b3d      	ldr	r3, [pc, #244]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e06b      	b.n	8003222 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800314a:	4b39      	ldr	r3, [pc, #228]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f023 0203 	bic.w	r2, r3, #3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	4936      	ldr	r1, [pc, #216]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 8003158:	4313      	orrs	r3, r2
 800315a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800315c:	f7fd fd00 	bl	8000b60 <HAL_GetTick>
 8003160:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003162:	e00a      	b.n	800317a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003164:	f7fd fcfc 	bl	8000b60 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003172:	4293      	cmp	r3, r2
 8003174:	d901      	bls.n	800317a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e053      	b.n	8003222 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317a:	4b2d      	ldr	r3, [pc, #180]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 020c 	and.w	r2, r3, #12
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	429a      	cmp	r2, r3
 800318a:	d1eb      	bne.n	8003164 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800318c:	4b27      	ldr	r3, [pc, #156]	; (800322c <HAL_RCC_ClockConfig+0x1c0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d210      	bcs.n	80031bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319a:	4b24      	ldr	r3, [pc, #144]	; (800322c <HAL_RCC_ClockConfig+0x1c0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 0207 	bic.w	r2, r3, #7
 80031a2:	4922      	ldr	r1, [pc, #136]	; (800322c <HAL_RCC_ClockConfig+0x1c0>)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031aa:	4b20      	ldr	r3, [pc, #128]	; (800322c <HAL_RCC_ClockConfig+0x1c0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d001      	beq.n	80031bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e032      	b.n	8003222 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d008      	beq.n	80031da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031c8:	4b19      	ldr	r3, [pc, #100]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	4916      	ldr	r1, [pc, #88]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d009      	beq.n	80031fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031e6:	4b12      	ldr	r3, [pc, #72]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	490e      	ldr	r1, [pc, #56]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031fa:	f000 f821 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 80031fe:	4601      	mov	r1, r0
 8003200:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	091b      	lsrs	r3, r3, #4
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	4a0a      	ldr	r2, [pc, #40]	; (8003234 <HAL_RCC_ClockConfig+0x1c8>)
 800320c:	5cd3      	ldrb	r3, [r2, r3]
 800320e:	fa21 f303 	lsr.w	r3, r1, r3
 8003212:	4a09      	ldr	r2, [pc, #36]	; (8003238 <HAL_RCC_ClockConfig+0x1cc>)
 8003214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003216:	4b09      	ldr	r3, [pc, #36]	; (800323c <HAL_RCC_ClockConfig+0x1d0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f7fd fc5e 	bl	8000adc <HAL_InitTick>

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40022000 	.word	0x40022000
 8003230:	40021000 	.word	0x40021000
 8003234:	08008278 	.word	0x08008278
 8003238:	20000008 	.word	0x20000008
 800323c:	20000000 	.word	0x20000000

08003240 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003240:	b490      	push	{r4, r7}
 8003242:	b08a      	sub	sp, #40	; 0x28
 8003244:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003246:	4b2a      	ldr	r3, [pc, #168]	; (80032f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003248:	1d3c      	adds	r4, r7, #4
 800324a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800324c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003250:	4b28      	ldr	r3, [pc, #160]	; (80032f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	61fb      	str	r3, [r7, #28]
 800325a:	2300      	movs	r3, #0
 800325c:	61bb      	str	r3, [r7, #24]
 800325e:	2300      	movs	r3, #0
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800326a:	4b23      	ldr	r3, [pc, #140]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	2b04      	cmp	r3, #4
 8003278:	d002      	beq.n	8003280 <HAL_RCC_GetSysClockFreq+0x40>
 800327a:	2b08      	cmp	r3, #8
 800327c:	d003      	beq.n	8003286 <HAL_RCC_GetSysClockFreq+0x46>
 800327e:	e02d      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003280:	4b1e      	ldr	r3, [pc, #120]	; (80032fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003282:	623b      	str	r3, [r7, #32]
      break;
 8003284:	e02d      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	0c9b      	lsrs	r3, r3, #18
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003292:	4413      	add	r3, r2
 8003294:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003298:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d013      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032a4:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	0c5b      	lsrs	r3, r3, #17
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032b2:	4413      	add	r3, r2
 80032b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	4a0f      	ldr	r2, [pc, #60]	; (80032fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80032be:	fb02 f203 	mul.w	r2, r2, r3
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ca:	e004      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	4a0c      	ldr	r2, [pc, #48]	; (8003300 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032d0:	fb02 f303 	mul.w	r3, r2, r3
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	623b      	str	r3, [r7, #32]
      break;
 80032da:	e002      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032dc:	4b07      	ldr	r3, [pc, #28]	; (80032fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80032de:	623b      	str	r3, [r7, #32]
      break;
 80032e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032e2:	6a3b      	ldr	r3, [r7, #32]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3728      	adds	r7, #40	; 0x28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc90      	pop	{r4, r7}
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	08007f18 	.word	0x08007f18
 80032f4:	08007f28 	.word	0x08007f28
 80032f8:	40021000 	.word	0x40021000
 80032fc:	007a1200 	.word	0x007a1200
 8003300:	003d0900 	.word	0x003d0900

08003304 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003308:	4b02      	ldr	r3, [pc, #8]	; (8003314 <HAL_RCC_GetHCLKFreq+0x10>)
 800330a:	681b      	ldr	r3, [r3, #0]
}
 800330c:	4618      	mov	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr
 8003314:	20000008 	.word	0x20000008

08003318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800331c:	f7ff fff2 	bl	8003304 <HAL_RCC_GetHCLKFreq>
 8003320:	4601      	mov	r1, r0
 8003322:	4b05      	ldr	r3, [pc, #20]	; (8003338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	0a1b      	lsrs	r3, r3, #8
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	4a03      	ldr	r2, [pc, #12]	; (800333c <HAL_RCC_GetPCLK1Freq+0x24>)
 800332e:	5cd3      	ldrb	r3, [r2, r3]
 8003330:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003334:	4618      	mov	r0, r3
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40021000 	.word	0x40021000
 800333c:	08008288 	.word	0x08008288

08003340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003344:	f7ff ffde 	bl	8003304 <HAL_RCC_GetHCLKFreq>
 8003348:	4601      	mov	r1, r0
 800334a:	4b05      	ldr	r3, [pc, #20]	; (8003360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	0adb      	lsrs	r3, r3, #11
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	4a03      	ldr	r2, [pc, #12]	; (8003364 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003356:	5cd3      	ldrb	r3, [r2, r3]
 8003358:	fa21 f303 	lsr.w	r3, r1, r3
}
 800335c:	4618      	mov	r0, r3
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40021000 	.word	0x40021000
 8003364:	08008288 	.word	0x08008288

08003368 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003370:	4b0a      	ldr	r3, [pc, #40]	; (800339c <RCC_Delay+0x34>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a0a      	ldr	r2, [pc, #40]	; (80033a0 <RCC_Delay+0x38>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	0a5b      	lsrs	r3, r3, #9
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	fb02 f303 	mul.w	r3, r2, r3
 8003382:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003384:	bf00      	nop
  }
  while (Delay --);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	1e5a      	subs	r2, r3, #1
 800338a:	60fa      	str	r2, [r7, #12]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1f9      	bne.n	8003384 <RCC_Delay+0x1c>
}
 8003390:	bf00      	nop
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	20000008 	.word	0x20000008
 80033a0:	10624dd3 	.word	0x10624dd3

080033a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e03f      	b.n	8003436 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d106      	bne.n	80033d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 ffa0 	bl	8004310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2224      	movs	r2, #36	; 0x24
 80033d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 fbc1 	bl	8003b70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	695a      	ldr	r2, [r3, #20]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800340c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68da      	ldr	r2, [r3, #12]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800341c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e01e      	b.n	800348e <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2224      	movs	r2, #36	; 0x24
 8003454:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003466:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 ffa5 	bl	80043b8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b088      	sub	sp, #32
 800349a:	af02      	add	r7, sp, #8
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	603b      	str	r3, [r7, #0]
 80034a2:	4613      	mov	r3, r2
 80034a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b20      	cmp	r3, #32
 80034b4:	f040 8083 	bne.w	80035be <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d002      	beq.n	80034c4 <HAL_UART_Transmit+0x2e>
 80034be:	88fb      	ldrh	r3, [r7, #6]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e07b      	b.n	80035c0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d101      	bne.n	80034d6 <HAL_UART_Transmit+0x40>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e074      	b.n	80035c0 <HAL_UART_Transmit+0x12a>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2221      	movs	r2, #33	; 0x21
 80034e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80034ec:	f7fd fb38 	bl	8000b60 <HAL_GetTick>
 80034f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	88fa      	ldrh	r2, [r7, #6]
 80034f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	88fa      	ldrh	r2, [r7, #6]
 80034fc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034fe:	e042      	b.n	8003586 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003504:	b29b      	uxth	r3, r3
 8003506:	3b01      	subs	r3, #1
 8003508:	b29a      	uxth	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003516:	d122      	bne.n	800355e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2200      	movs	r2, #0
 8003520:	2180      	movs	r1, #128	; 0x80
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 f9bb 	bl	800389e <UART_WaitOnFlagUntilTimeout>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e046      	b.n	80035c0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003544:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d103      	bne.n	8003556 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	3302      	adds	r3, #2
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	e017      	b.n	8003586 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	3301      	adds	r3, #1
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	e013      	b.n	8003586 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2200      	movs	r2, #0
 8003566:	2180      	movs	r1, #128	; 0x80
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f998 	bl	800389e <UART_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e023      	b.n	80035c0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	60ba      	str	r2, [r7, #8]
 800357e:	781a      	ldrb	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1b7      	bne.n	8003500 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2200      	movs	r2, #0
 8003598:	2140      	movs	r1, #64	; 0x40
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 f97f 	bl	800389e <UART_WaitOnFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e00a      	b.n	80035c0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80035ba:	2300      	movs	r3, #0
 80035bc:	e000      	b.n	80035c0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80035be:	2302      	movs	r3, #2
  }
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	4613      	mov	r3, r2
 80035d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b20      	cmp	r3, #32
 80035e0:	d140      	bne.n	8003664 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <HAL_UART_Receive_IT+0x26>
 80035e8:	88fb      	ldrh	r3, [r7, #6]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e039      	b.n	8003666 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <HAL_UART_Receive_IT+0x38>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e032      	b.n	8003666 <HAL_UART_Receive_IT+0x9e>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	88fa      	ldrh	r2, [r7, #6]
 8003612:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	88fa      	ldrh	r2, [r7, #6]
 8003618:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2222      	movs	r2, #34	; 0x22
 8003624:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800363e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695a      	ldr	r2, [r3, #20]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0220 	orr.w	r2, r2, #32
 800365e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	e000      	b.n	8003666 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003664:	2302      	movs	r3, #2
  }
}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr

08003670 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b088      	sub	sp, #32
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003690:	2300      	movs	r3, #0
 8003692:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10d      	bne.n	80036c2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d008      	beq.n	80036c2 <HAL_UART_IRQHandler+0x52>
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f9d7 	bl	8003a6e <UART_Receive_IT>
      return;
 80036c0:	e0cc      	b.n	800385c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 80ab 	beq.w	8003820 <HAL_UART_IRQHandler+0x1b0>
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d105      	bne.n	80036e0 <HAL_UART_IRQHandler+0x70>
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 80a0 	beq.w	8003820 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <HAL_UART_IRQHandler+0x90>
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f8:	f043 0201 	orr.w	r2, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <HAL_UART_IRQHandler+0xb0>
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003718:	f043 0202 	orr.w	r2, r3, #2
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <HAL_UART_IRQHandler+0xd0>
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d005      	beq.n	8003740 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003738:	f043 0204 	orr.w	r2, r3, #4
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <HAL_UART_IRQHandler+0xf0>
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d005      	beq.n	8003760 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003758:	f043 0208 	orr.w	r2, r3, #8
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003764:	2b00      	cmp	r3, #0
 8003766:	d078      	beq.n	800385a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b00      	cmp	r3, #0
 8003770:	d007      	beq.n	8003782 <HAL_UART_IRQHandler+0x112>
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f976 	bl	8003a6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	bf14      	ite	ne
 8003790:	2301      	movne	r3, #1
 8003792:	2300      	moveq	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d102      	bne.n	80037aa <HAL_UART_IRQHandler+0x13a>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d031      	beq.n	800380e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f8c1 	bl	8003932 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d023      	beq.n	8003806 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695a      	ldr	r2, [r3, #20]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037cc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d013      	beq.n	80037fe <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037da:	4a22      	ldr	r2, [pc, #136]	; (8003864 <HAL_UART_IRQHandler+0x1f4>)
 80037dc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fd fb26 	bl	8000e34 <HAL_DMA_Abort_IT>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d016      	beq.n	800381c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037f8:	4610      	mov	r0, r2
 80037fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037fc:	e00e      	b.n	800381c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f844 	bl	800388c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003804:	e00a      	b.n	800381c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f840 	bl	800388c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380c:	e006      	b.n	800381c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f83c 	bl	800388c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800381a:	e01e      	b.n	800385a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800381c:	bf00      	nop
    return;
 800381e:	e01c      	b.n	800385a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003826:	2b00      	cmp	r3, #0
 8003828:	d008      	beq.n	800383c <HAL_UART_IRQHandler+0x1cc>
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003830:	2b00      	cmp	r3, #0
 8003832:	d003      	beq.n	800383c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f8ad 	bl	8003994 <UART_Transmit_IT>
    return;
 800383a:	e00f      	b.n	800385c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_UART_IRQHandler+0x1ec>
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f8f4 	bl	8003a3e <UART_EndTransmit_IT>
    return;
 8003856:	bf00      	nop
 8003858:	e000      	b.n	800385c <HAL_UART_IRQHandler+0x1ec>
    return;
 800385a:	bf00      	nop
  }
}
 800385c:	3720      	adds	r7, #32
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	0800396d 	.word	0x0800396d

08003868 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr

0800387a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr

0800388c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr

0800389e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	603b      	str	r3, [r7, #0]
 80038aa:	4613      	mov	r3, r2
 80038ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ae:	e02c      	b.n	800390a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b6:	d028      	beq.n	800390a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d007      	beq.n	80038ce <UART_WaitOnFlagUntilTimeout+0x30>
 80038be:	f7fd f94f 	bl	8000b60 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d21d      	bcs.n	800390a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038dc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695a      	ldr	r2, [r3, #20]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0201 	bic.w	r2, r2, #1
 80038ec:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2220      	movs	r2, #32
 80038f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e00f      	b.n	800392a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	4013      	ands	r3, r2
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	429a      	cmp	r2, r3
 8003918:	bf0c      	ite	eq
 800391a:	2301      	moveq	r3, #1
 800391c:	2300      	movne	r3, #0
 800391e:	b2db      	uxtb	r3, r3
 8003920:	461a      	mov	r2, r3
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	429a      	cmp	r2, r3
 8003926:	d0c3      	beq.n	80038b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68da      	ldr	r2, [r3, #12]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003948:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695a      	ldr	r2, [r3, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0201 	bic.w	r2, r2, #1
 8003958:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2220      	movs	r2, #32
 800395e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr

0800396c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f7ff ff80 	bl	800388c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800398c:	bf00      	nop
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b21      	cmp	r3, #33	; 0x21
 80039a6:	d144      	bne.n	8003a32 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b0:	d11a      	bne.n	80039e8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	881b      	ldrh	r3, [r3, #0]
 80039bc:	461a      	mov	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039c6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d105      	bne.n	80039dc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	1c9a      	adds	r2, r3, #2
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	621a      	str	r2, [r3, #32]
 80039da:	e00e      	b.n	80039fa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	621a      	str	r2, [r3, #32]
 80039e6:	e008      	b.n	80039fa <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	1c59      	adds	r1, r3, #1
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6211      	str	r1, [r2, #32]
 80039f2:	781a      	ldrb	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	4619      	mov	r1, r3
 8003a08:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10f      	bne.n	8003a2e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a1c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a2c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	e000      	b.n	8003a34 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003a32:	2302      	movs	r3, #2
  }
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr

08003a3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b082      	sub	sp, #8
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff ff02 	bl	8003868 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b084      	sub	sp, #16
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b22      	cmp	r3, #34	; 0x22
 8003a80:	d171      	bne.n	8003b66 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a8a:	d123      	bne.n	8003ad4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a90:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10e      	bne.n	8003ab8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab0:	1c9a      	adds	r2, r3, #2
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	629a      	str	r2, [r3, #40]	; 0x28
 8003ab6:	e029      	b.n	8003b0c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	629a      	str	r2, [r3, #40]	; 0x28
 8003ad2:	e01b      	b.n	8003b0c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10a      	bne.n	8003af2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6858      	ldr	r0, [r3, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae6:	1c59      	adds	r1, r3, #1
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6291      	str	r1, [r2, #40]	; 0x28
 8003aec:	b2c2      	uxtb	r2, r0
 8003aee:	701a      	strb	r2, [r3, #0]
 8003af0:	e00c      	b.n	8003b0c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afe:	1c58      	adds	r0, r3, #1
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	6288      	str	r0, [r1, #40]	; 0x28
 8003b04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	4619      	mov	r1, r3
 8003b1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d120      	bne.n	8003b62 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0220 	bic.w	r2, r2, #32
 8003b2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0201 	bic.w	r2, r2, #1
 8003b4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff fe8e 	bl	800387a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	e002      	b.n	8003b68 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	e000      	b.n	8003b68 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003b66:	2302      	movs	r3, #2
  }
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003baa:	f023 030c 	bic.w	r3, r3, #12
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6812      	ldr	r2, [r2, #0]
 8003bb2:	68f9      	ldr	r1, [r7, #12]
 8003bb4:	430b      	orrs	r3, r1
 8003bb6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699a      	ldr	r2, [r3, #24]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a52      	ldr	r2, [pc, #328]	; (8003d1c <UART_SetConfig+0x1ac>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d14e      	bne.n	8003c76 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003bd8:	f7ff fbb2 	bl	8003340 <HAL_RCC_GetPCLK2Freq>
 8003bdc:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	009a      	lsls	r2, r3, #2
 8003be8:	441a      	add	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf4:	4a4a      	ldr	r2, [pc, #296]	; (8003d20 <UART_SetConfig+0x1b0>)
 8003bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	0119      	lsls	r1, r3, #4
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	009a      	lsls	r2, r3, #2
 8003c08:	441a      	add	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c14:	4b42      	ldr	r3, [pc, #264]	; (8003d20 <UART_SetConfig+0x1b0>)
 8003c16:	fba3 0302 	umull	r0, r3, r3, r2
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	2064      	movs	r0, #100	; 0x64
 8003c1e:	fb00 f303 	mul.w	r3, r0, r3
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	3332      	adds	r3, #50	; 0x32
 8003c28:	4a3d      	ldr	r2, [pc, #244]	; (8003d20 <UART_SetConfig+0x1b0>)
 8003c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c34:	4419      	add	r1, r3
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009a      	lsls	r2, r3, #2
 8003c40:	441a      	add	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c4c:	4b34      	ldr	r3, [pc, #208]	; (8003d20 <UART_SetConfig+0x1b0>)
 8003c4e:	fba3 0302 	umull	r0, r3, r3, r2
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	2064      	movs	r0, #100	; 0x64
 8003c56:	fb00 f303 	mul.w	r3, r0, r3
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	3332      	adds	r3, #50	; 0x32
 8003c60:	4a2f      	ldr	r2, [pc, #188]	; (8003d20 <UART_SetConfig+0x1b0>)
 8003c62:	fba2 2303 	umull	r2, r3, r2, r3
 8003c66:	095b      	lsrs	r3, r3, #5
 8003c68:	f003 020f 	and.w	r2, r3, #15
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	440a      	add	r2, r1
 8003c72:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003c74:	e04d      	b.n	8003d12 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c76:	f7ff fb4f 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 8003c7a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	009a      	lsls	r2, r3, #2
 8003c86:	441a      	add	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c92:	4a23      	ldr	r2, [pc, #140]	; (8003d20 <UART_SetConfig+0x1b0>)
 8003c94:	fba2 2303 	umull	r2, r3, r2, r3
 8003c98:	095b      	lsrs	r3, r3, #5
 8003c9a:	0119      	lsls	r1, r3, #4
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009a      	lsls	r2, r3, #2
 8003ca6:	441a      	add	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cb2:	4b1b      	ldr	r3, [pc, #108]	; (8003d20 <UART_SetConfig+0x1b0>)
 8003cb4:	fba3 0302 	umull	r0, r3, r3, r2
 8003cb8:	095b      	lsrs	r3, r3, #5
 8003cba:	2064      	movs	r0, #100	; 0x64
 8003cbc:	fb00 f303 	mul.w	r3, r0, r3
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	3332      	adds	r3, #50	; 0x32
 8003cc6:	4a16      	ldr	r2, [pc, #88]	; (8003d20 <UART_SetConfig+0x1b0>)
 8003cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ccc:	095b      	lsrs	r3, r3, #5
 8003cce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cd2:	4419      	add	r1, r3
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	009a      	lsls	r2, r3, #2
 8003cde:	441a      	add	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cea:	4b0d      	ldr	r3, [pc, #52]	; (8003d20 <UART_SetConfig+0x1b0>)
 8003cec:	fba3 0302 	umull	r0, r3, r3, r2
 8003cf0:	095b      	lsrs	r3, r3, #5
 8003cf2:	2064      	movs	r0, #100	; 0x64
 8003cf4:	fb00 f303 	mul.w	r3, r0, r3
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	3332      	adds	r3, #50	; 0x32
 8003cfe:	4a08      	ldr	r2, [pc, #32]	; (8003d20 <UART_SetConfig+0x1b0>)
 8003d00:	fba2 2303 	umull	r2, r3, r2, r3
 8003d04:	095b      	lsrs	r3, r3, #5
 8003d06:	f003 020f 	and.w	r2, r3, #15
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	440a      	add	r2, r1
 8003d10:	609a      	str	r2, [r3, #8]
}
 8003d12:	bf00      	nop
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40013800 	.word	0x40013800
 8003d20:	51eb851f 	.word	0x51eb851f

08003d24 <setup>:
#else
#define DELAY_PERIOD    (15*60*1000)    // 15 minutes
#endif

// One-time initialization
void setup() {
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0

	// "NoteNewRequest()" uses the bundled "J" json package to allocate a "req", which is a JSON object
	// for the request to which we will then add Request arguments.  The function allocates a "req"
	// request structure using malloc() and initializes its "req" field with the type of request.
	J *req = NoteNewRequest("service.set");
 8003d2a:	480a      	ldr	r0, [pc, #40]	; (8003d54 <setup+0x30>)
 8003d2c:	f003 f9c2 	bl	80070b4 <NoteNewRequest>
 8003d30:	6078      	str	r0, [r7, #4]

	// This command (required) causes the data to be delivered to the Project on notehub.io that has claimed
	// this Product ID.  (see above)
	JAddStringToObject(req, "product", myProductID);
 8003d32:	4a09      	ldr	r2, [pc, #36]	; (8003d58 <setup+0x34>)
 8003d34:	4909      	ldr	r1, [pc, #36]	; (8003d5c <setup+0x38>)
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f002 fd5a 	bl	80067f0 <JAddStringToObject>
	// This command determines how often the Notecard connects to the service.  If "continuous" the Notecard
    // immediately establishes a session with the service at notehub.io, and keeps it active continuously.
    // Because of the power requirements of a continuous connection, a battery powered device would instead
    // only sample its sensors occasionally, and would only upload to the service on a periodic basis.
#if myLiveDemo
	JAddStringToObject(req, "mode", "continuous");
 8003d3c:	4a08      	ldr	r2, [pc, #32]	; (8003d60 <setup+0x3c>)
 8003d3e:	4909      	ldr	r1, [pc, #36]	; (8003d64 <setup+0x40>)
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f002 fd55 	bl	80067f0 <JAddStringToObject>
	//		 "product" : myProductID,
	//		 "mode"	   : "continuous"
	//	   }
	// Note that NoteRequest() always uses free() to release the request data structure, and it
	// returns "true" if success and "false" if there is any failure.
	NoteRequest(req);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f003 f9ca 	bl	80070e0 <NoteRequest>

}
 8003d4c:	bf00      	nop
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	08007f2c 	.word	0x08007f2c
 8003d58:	08007f38 	.word	0x08007f38
 8003d5c:	08007f60 	.word	0x08007f60
 8003d60:	08007f68 	.word	0x08007f68
 8003d64:	08007f74 	.word	0x08007f74

08003d68 <loop>:

// This  main loop which is called repeatedly, add outbound data every 15 seconds
void loop() {
 8003d68:	b590      	push	{r4, r7, lr}
 8003d6a:	b089      	sub	sp, #36	; 0x24
 8003d6c:	af00      	add	r7, sp, #0

	// Simulate an event counter of some kind
	static unsigned eventCounter = 0;
	eventCounter = eventCounter + 1;
 8003d6e:	4b3c      	ldr	r3, [pc, #240]	; (8003e60 <loop+0xf8>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3301      	adds	r3, #1
 8003d74:	4a3a      	ldr	r2, [pc, #232]	; (8003e60 <loop+0xf8>)
 8003d76:	6013      	str	r3, [r2, #0]
	// that we would like to examine the response of the transaction.  This method takes a "request" JSON
	// data structure as input, then processes it and returns a "response" JSON data structure with
	// the response.  Note that because the Notecard library uses malloc(), developers must always
	// check for NULL to ensure that there was enough memory available on the microcontroller to
	// satisfy the allocation request.
	double temperature = 0;
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	f04f 0400 	mov.w	r4, #0
 8003d80:	e9c7 3406 	strd	r3, r4, [r7, #24]
    J *rsp = NoteRequestResponse(NoteNewRequest("card.temp"));
 8003d84:	4837      	ldr	r0, [pc, #220]	; (8003e64 <loop+0xfc>)
 8003d86:	f003 f995 	bl	80070b4 <NoteNewRequest>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f003 f9cf 	bl	8007130 <NoteRequestResponse>
 8003d92:	60f8      	str	r0, [r7, #12]
    if (rsp != NULL) {
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d008      	beq.n	8003dac <loop+0x44>
        temperature = JGetNumber(rsp, "value");
 8003d9a:	4933      	ldr	r1, [pc, #204]	; (8003e68 <loop+0x100>)
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f002 fe11 	bl	80069c4 <JGetNumber>
 8003da2:	e9c7 0106 	strd	r0, r1, [r7, #24]
        NoteDeleteResponse(rsp);
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 fe54 	bl	8004a54 <JDelete>
    }

	// Do the same to retrieve the voltage that is detected by the Notecard on its V+ pin.
	double voltage = 0;
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	f04f 0400 	mov.w	r4, #0
 8003db4:	e9c7 3404 	strd	r3, r4, [r7, #16]
    rsp = NoteRequestResponse(NoteNewRequest("card.voltage"));
 8003db8:	482c      	ldr	r0, [pc, #176]	; (8003e6c <loop+0x104>)
 8003dba:	f003 f97b 	bl	80070b4 <NoteNewRequest>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f003 f9b5 	bl	8007130 <NoteRequestResponse>
 8003dc6:	60f8      	str	r0, [r7, #12]
    if (rsp != NULL) {
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d008      	beq.n	8003de0 <loop+0x78>
        voltage = JGetNumber(rsp, "value");
 8003dce:	4926      	ldr	r1, [pc, #152]	; (8003e68 <loop+0x100>)
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f002 fdf7 	bl	80069c4 <JGetNumber>
 8003dd6:	e9c7 0104 	strd	r0, r1, [r7, #16]
        NoteDeleteResponse(rsp);
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 fe3a 	bl	8004a54 <JDelete>
    }

	// Enqueue the measurement to the Notecard for transmission to the Notehub, adding the "start"
	// flag for demonstration purposes to upload the data instantaneously, so that if you are looking
	// at this on notehub.io you will see the data appearing 'live'.)
    J *req = NoteNewRequest("note.add");
 8003de0:	4823      	ldr	r0, [pc, #140]	; (8003e70 <loop+0x108>)
 8003de2:	f003 f967 	bl	80070b4 <NoteNewRequest>
 8003de6:	60b8      	str	r0, [r7, #8]
	if (req != NULL) {
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d030      	beq.n	8003e50 <loop+0xe8>
	    JAddStringToObject(req, "file", "sensors.qo");
 8003dee:	4a21      	ldr	r2, [pc, #132]	; (8003e74 <loop+0x10c>)
 8003df0:	4921      	ldr	r1, [pc, #132]	; (8003e78 <loop+0x110>)
 8003df2:	68b8      	ldr	r0, [r7, #8]
 8003df4:	f002 fcfc 	bl	80067f0 <JAddStringToObject>
	    JAddBoolToObject(req, "start", true);
 8003df8:	2201      	movs	r2, #1
 8003dfa:	4920      	ldr	r1, [pc, #128]	; (8003e7c <loop+0x114>)
 8003dfc:	68b8      	ldr	r0, [r7, #8]
 8003dfe:	f002 fcb1 	bl	8006764 <JAddBoolToObject>
		J *body = JCreateObject();
 8003e02:	f002 fd9f 	bl	8006944 <JCreateObject>
 8003e06:	6078      	str	r0, [r7, #4]
		if (body != NULL) {
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d01d      	beq.n	8003e4a <loop+0xe2>
			JAddNumberToObject(body, "temp", temperature);
 8003e0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e12:	491b      	ldr	r1, [pc, #108]	; (8003e80 <loop+0x118>)
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f002 fcc7 	bl	80067a8 <JAddNumberToObject>
			JAddNumberToObject(body, "voltage", voltage);
 8003e1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e1e:	4919      	ldr	r1, [pc, #100]	; (8003e84 <loop+0x11c>)
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f002 fcc1 	bl	80067a8 <JAddNumberToObject>
			JAddNumberToObject(body, "count", eventCounter);
 8003e26:	4b0e      	ldr	r3, [pc, #56]	; (8003e60 <loop+0xf8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fc fae4 	bl	80003f8 <__aeabi_ui2d>
 8003e30:	4603      	mov	r3, r0
 8003e32:	460c      	mov	r4, r1
 8003e34:	461a      	mov	r2, r3
 8003e36:	4623      	mov	r3, r4
 8003e38:	4913      	ldr	r1, [pc, #76]	; (8003e88 <loop+0x120>)
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f002 fcb4 	bl	80067a8 <JAddNumberToObject>
		    JAddItemToObject(req, "body", body);
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	4912      	ldr	r1, [pc, #72]	; (8003e8c <loop+0x124>)
 8003e44:	68b8      	ldr	r0, [r7, #8]
 8003e46:	f002 fc79 	bl	800673c <JAddItemToObject>
		}
	    NoteRequest(req);
 8003e4a:	68b8      	ldr	r0, [r7, #8]
 8003e4c:	f003 f948 	bl	80070e0 <NoteRequest>
	}

	// Delay between measurements
	delay(DELAY_PERIOD);
 8003e50:	f643 2098 	movw	r0, #15000	; 0x3a98
 8003e54:	f000 f9bc 	bl	80041d0 <delay>

}
 8003e58:	bf00      	nop
 8003e5a:	3724      	adds	r7, #36	; 0x24
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd90      	pop	{r4, r7, pc}
 8003e60:	20000254 	.word	0x20000254
 8003e64:	08007f7c 	.word	0x08007f7c
 8003e68:	08007f88 	.word	0x08007f88
 8003e6c:	08007f90 	.word	0x08007f90
 8003e70:	08007fa0 	.word	0x08007fa0
 8003e74:	08007fac 	.word	0x08007fac
 8003e78:	08007fb8 	.word	0x08007fb8
 8003e7c:	08007fc0 	.word	0x08007fc0
 8003e80:	08007fc8 	.word	0x08007fc8
 8003e84:	08007fd0 	.word	0x08007fd0
 8003e88:	08007fd8 	.word	0x08007fd8
 8003e8c:	08007fe0 	.word	0x08007fe0

08003e90 <main>:
void noteI2CReset(void);
const char *noteI2CTransmit(uint16_t DevAddress, uint8_t* pBuffer, uint16_t Size);
const char *noteI2CReceive(uint16_t DevAddress, uint8_t* pBuffer, uint16_t Size, uint32_t *avail);

// Main entry point
int main(void) {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0

    // Initialize peripherals
    HAL_Init();
 8003e94:	f7fc fe0c 	bl	8000ab0 <HAL_Init>
    SystemClock_Config();
 8003e98:	f000 f824 	bl	8003ee4 <SystemClock_Config>
    MX_GPIO_Init();
 8003e9c:	f000 f90e 	bl	80040bc <MX_GPIO_Init>
#ifdef EVENT_TIMER
    MX_LPTIM1_Init();
#endif

    // Register callbacks with note-c subsystem that it needs for I/O, memory, timer
    NoteSetFn(malloc, free, delay, millis);
 8003ea0:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <main+0x34>)
 8003ea2:	4a09      	ldr	r2, [pc, #36]	; (8003ec8 <main+0x38>)
 8003ea4:	4909      	ldr	r1, [pc, #36]	; (8003ecc <main+0x3c>)
 8003ea6:	480a      	ldr	r0, [pc, #40]	; (8003ed0 <main+0x40>)
 8003ea8:	f002 ff82 	bl	8006db0 <NoteSetFn>

    // Register callbacks for Notecard I/O
#if NOTECARD_USE_I2C
    NoteSetFnI2C(NOTE_I2C_ADDR_DEFAULT, NOTE_I2C_MAX_DEFAULT, noteI2CReset, noteI2CTransmit, noteI2CReceive);
#else
    NoteSetFnSerial(noteSerialReset, noteSerialTransmit, noteSerialAvailable, noteSerialReceive);
 8003eac:	4b09      	ldr	r3, [pc, #36]	; (8003ed4 <main+0x44>)
 8003eae:	4a0a      	ldr	r2, [pc, #40]	; (8003ed8 <main+0x48>)
 8003eb0:	490a      	ldr	r1, [pc, #40]	; (8003edc <main+0x4c>)
 8003eb2:	480b      	ldr	r0, [pc, #44]	; (8003ee0 <main+0x50>)
 8003eb4:	f002 ff9c 	bl	8006df0 <NoteSetFnSerial>
#endif

    // Use this method of invoking main app code so that we can re-use familiar Arduino examples
    setup();
 8003eb8:	f7ff ff34 	bl	8003d24 <setup>
    while (true)
        loop();
 8003ebc:	f7ff ff54 	bl	8003d68 <loop>
 8003ec0:	e7fc      	b.n	8003ebc <main+0x2c>
 8003ec2:	bf00      	nop
 8003ec4:	080041e7 	.word	0x080041e7
 8003ec8:	080041d1 	.word	0x080041d1
 8003ecc:	08007609 	.word	0x08007609
 8003ed0:	080075f9 	.word	0x080075f9
 8003ed4:	08004259 	.word	0x08004259
 8003ed8:	08004231 	.word	0x08004231
 8003edc:	08004205 	.word	0x08004205
 8003ee0:	080041f5 	.word	0x080041f5

08003ee4 <SystemClock_Config>:

}

// System clock configuration
void SystemClock_Config(void) {
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b090      	sub	sp, #64	; 0x40
 8003ee8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003eea:	f107 0318 	add.w	r3, r7, #24
 8003eee:	2228      	movs	r2, #40	; 0x28
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f003 fbc6 	bl	8007684 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ef8:	1d3b      	adds	r3, r7, #4
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	605a      	str	r2, [r3, #4]
 8003f00:	609a      	str	r2, [r3, #8]
 8003f02:	60da      	str	r2, [r3, #12]
 8003f04:	611a      	str	r2, [r3, #16]

    // Initializes the CPU, AHB and APB busses clocks
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003f06:	2302      	movs	r3, #2
 8003f08:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f0e:	2310      	movs	r3, #16
 8003f10:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f12:	2302      	movs	r3, #2
 8003f14:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8003f16:	2300      	movs	r3, #0
 8003f18:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8003f1a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8003f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f20:	f107 0318 	add.w	r3, r7, #24
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fe fe21 	bl	8002b6c <HAL_RCC_OscConfig>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <SystemClock_Config+0x50>
        Error_Handler();
 8003f30:	f000 f948 	bl	80041c4 <Error_Handler>

    // Initializes the CPU, AHB and APB busses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f34:	230f      	movs	r3, #15
 8003f36:	607b      	str	r3, [r7, #4]
        |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f44:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f46:	2300      	movs	r3, #0
 8003f48:	617b      	str	r3, [r7, #20]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003f4a:	1d3b      	adds	r3, r7, #4
 8003f4c:	2102      	movs	r1, #2
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff f88c 	bl	800306c <HAL_RCC_ClockConfig>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <SystemClock_Config+0x7a>
        Error_Handler();
 8003f5a:	f000 f933 	bl	80041c4 <Error_Handler>

}
 8003f5e:	bf00      	nop
 8003f60:	3740      	adds	r7, #64	; 0x40
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <MX_USART1_UART_Init>:
    HAL_I2C_DeInit(&hi2c1);

}

// USART1 Initialization
void MX_USART1_UART_Init(void) {
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0

    // Exit if already done
    if (uart1Initialized)
 8003f6c:	4b1b      	ldr	r3, [pc, #108]	; (8003fdc <MX_USART1_UART_Init+0x74>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d131      	bne.n	8003fd8 <MX_USART1_UART_Init+0x70>
        return;
    uart1Initialized = true;
 8003f74:	4b19      	ldr	r3, [pc, #100]	; (8003fdc <MX_USART1_UART_Init+0x74>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	701a      	strb	r2, [r3, #0]

    // Primary initialization
    huart1.Instance = USART1;
 8003f7a:	4b19      	ldr	r3, [pc, #100]	; (8003fe0 <MX_USART1_UART_Init+0x78>)
 8003f7c:	4a19      	ldr	r2, [pc, #100]	; (8003fe4 <MX_USART1_UART_Init+0x7c>)
 8003f7e:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 9600;
 8003f80:	4b17      	ldr	r3, [pc, #92]	; (8003fe0 <MX_USART1_UART_Init+0x78>)
 8003f82:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003f86:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f88:	4b15      	ldr	r3, [pc, #84]	; (8003fe0 <MX_USART1_UART_Init+0x78>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8003f8e:	4b14      	ldr	r3, [pc, #80]	; (8003fe0 <MX_USART1_UART_Init+0x78>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8003f94:	4b12      	ldr	r3, [pc, #72]	; (8003fe0 <MX_USART1_UART_Init+0x78>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8003f9a:	4b11      	ldr	r3, [pc, #68]	; (8003fe0 <MX_USART1_UART_Init+0x78>)
 8003f9c:	220c      	movs	r2, #12
 8003f9e:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fa0:	4b0f      	ldr	r3, [pc, #60]	; (8003fe0 <MX_USART1_UART_Init+0x78>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fa6:	4b0e      	ldr	r3, [pc, #56]	; (8003fe0 <MX_USART1_UART_Init+0x78>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8003fac:	480c      	ldr	r0, [pc, #48]	; (8003fe0 <MX_USART1_UART_Init+0x78>)
 8003fae:	f7ff f9f9 	bl	80033a4 <HAL_UART_Init>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <MX_USART1_UART_Init+0x54>
        Error_Handler();
 8003fb8:	f000 f904 	bl	80041c4 <Error_Handler>

    // Reset our buffer management
    serialFillIndex = serialDrainIndex = serialOverruns = 0;
 8003fbc:	4b0a      	ldr	r3, [pc, #40]	; (8003fe8 <MX_USART1_UART_Init+0x80>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	4a09      	ldr	r2, [pc, #36]	; (8003fec <MX_USART1_UART_Init+0x84>)
 8003fc6:	6013      	str	r3, [r2, #0]
 8003fc8:	4a09      	ldr	r2, [pc, #36]	; (8003ff0 <MX_USART1_UART_Init+0x88>)
 8003fca:	6013      	str	r3, [r2, #0]

    // Unused, but included for documentation
    ((void)(serialOverruns));

    // Start the inbound receive
    HAL_UART_Receive_IT(&huart1, (uint8_t *) &serialInterruptBuffer, sizeof(serialInterruptBuffer));
 8003fcc:	2201      	movs	r2, #1
 8003fce:	4909      	ldr	r1, [pc, #36]	; (8003ff4 <MX_USART1_UART_Init+0x8c>)
 8003fd0:	4803      	ldr	r0, [pc, #12]	; (8003fe0 <MX_USART1_UART_Init+0x78>)
 8003fd2:	f7ff faf9 	bl	80035c8 <HAL_UART_Receive_IT>
 8003fd6:	e000      	b.n	8003fda <MX_USART1_UART_Init+0x72>
        return;
 8003fd8:	bf00      	nop

}
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	20000258 	.word	0x20000258
 8003fe0:	20000510 	.word	0x20000510
 8003fe4:	40013800 	.word	0x40013800
 8003fe8:	20000268 	.word	0x20000268
 8003fec:	20000264 	.word	0x20000264
 8003ff0:	20000260 	.word	0x20000260
 8003ff4:	2000025c 	.word	0x2000025c

08003ff8 <MY_UART_IRQHandler>:

// USART1 IRQ handler
void MY_UART_IRQHandler(UART_HandleTypeDef *huart) {
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]

    // See if the transfer is completed
    if (huart->RxXferCount == 0) {
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004004:	b29b      	uxth	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d12c      	bne.n	8004064 <MY_UART_IRQHandler+0x6c>
        if (serialFillIndex < sizeof(serialBuffer)) {
 800400a:	4b1b      	ldr	r3, [pc, #108]	; (8004078 <MY_UART_IRQHandler+0x80>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004012:	d216      	bcs.n	8004042 <MY_UART_IRQHandler+0x4a>
            if (serialFillIndex+1 == serialDrainIndex)
 8004014:	4b18      	ldr	r3, [pc, #96]	; (8004078 <MY_UART_IRQHandler+0x80>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	4b18      	ldr	r3, [pc, #96]	; (800407c <MY_UART_IRQHandler+0x84>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d105      	bne.n	800402e <MY_UART_IRQHandler+0x36>
                serialOverruns++;
 8004022:	4b17      	ldr	r3, [pc, #92]	; (8004080 <MY_UART_IRQHandler+0x88>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3301      	adds	r3, #1
 8004028:	4a15      	ldr	r2, [pc, #84]	; (8004080 <MY_UART_IRQHandler+0x88>)
 800402a:	6013      	str	r3, [r2, #0]
 800402c:	e01a      	b.n	8004064 <MY_UART_IRQHandler+0x6c>
            else
                serialBuffer[serialFillIndex++] = serialInterruptBuffer[0];
 800402e:	4b12      	ldr	r3, [pc, #72]	; (8004078 <MY_UART_IRQHandler+0x80>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	4910      	ldr	r1, [pc, #64]	; (8004078 <MY_UART_IRQHandler+0x80>)
 8004036:	600a      	str	r2, [r1, #0]
 8004038:	4a12      	ldr	r2, [pc, #72]	; (8004084 <MY_UART_IRQHandler+0x8c>)
 800403a:	7811      	ldrb	r1, [r2, #0]
 800403c:	4a12      	ldr	r2, [pc, #72]	; (8004088 <MY_UART_IRQHandler+0x90>)
 800403e:	54d1      	strb	r1, [r2, r3]
 8004040:	e010      	b.n	8004064 <MY_UART_IRQHandler+0x6c>
        } else {
            if (serialDrainIndex == 1)
 8004042:	4b0e      	ldr	r3, [pc, #56]	; (800407c <MY_UART_IRQHandler+0x84>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d105      	bne.n	8004056 <MY_UART_IRQHandler+0x5e>
                serialOverruns++;
 800404a:	4b0d      	ldr	r3, [pc, #52]	; (8004080 <MY_UART_IRQHandler+0x88>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3301      	adds	r3, #1
 8004050:	4a0b      	ldr	r2, [pc, #44]	; (8004080 <MY_UART_IRQHandler+0x88>)
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	e006      	b.n	8004064 <MY_UART_IRQHandler+0x6c>
            else {
                serialBuffer[0] = serialInterruptBuffer[0];
 8004056:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <MY_UART_IRQHandler+0x8c>)
 8004058:	781a      	ldrb	r2, [r3, #0]
 800405a:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <MY_UART_IRQHandler+0x90>)
 800405c:	701a      	strb	r2, [r3, #0]
                serialFillIndex = 1;
 800405e:	4b06      	ldr	r3, [pc, #24]	; (8004078 <MY_UART_IRQHandler+0x80>)
 8004060:	2201      	movs	r2, #1
 8004062:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // Start another receive
    HAL_UART_Receive_IT(&huart1, (uint8_t *) &serialInterruptBuffer, sizeof(serialInterruptBuffer));
 8004064:	2201      	movs	r2, #1
 8004066:	4907      	ldr	r1, [pc, #28]	; (8004084 <MY_UART_IRQHandler+0x8c>)
 8004068:	4808      	ldr	r0, [pc, #32]	; (800408c <MY_UART_IRQHandler+0x94>)
 800406a:	f7ff faad 	bl	80035c8 <HAL_UART_Receive_IT>

}
 800406e:	bf00      	nop
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	20000260 	.word	0x20000260
 800407c:	20000264 	.word	0x20000264
 8004080:	20000268 	.word	0x20000268
 8004084:	2000025c 	.word	0x2000025c
 8004088:	2000026c 	.word	0x2000026c
 800408c:	20000510 	.word	0x20000510

08004090 <MX_USART1_UART_DeInit>:

// USART1 De-initialization
void MX_USART1_UART_DeInit(void) {
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0

    // Exit if already done
    if (!uart1Initialized)
 8004094:	4b07      	ldr	r3, [pc, #28]	; (80040b4 <MX_USART1_UART_DeInit+0x24>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	f083 0301 	eor.w	r3, r3, #1
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <MX_USART1_UART_DeInit+0x20>
        return;
    uart1Initialized = false;
 80040a2:	4b04      	ldr	r3, [pc, #16]	; (80040b4 <MX_USART1_UART_DeInit+0x24>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	701a      	strb	r2, [r3, #0]

    // Deinitialize
    HAL_UART_DeInit(&huart1);
 80040a8:	4803      	ldr	r0, [pc, #12]	; (80040b8 <MX_USART1_UART_DeInit+0x28>)
 80040aa:	f7ff f9c8 	bl	800343e <HAL_UART_DeInit>
 80040ae:	e000      	b.n	80040b2 <MX_USART1_UART_DeInit+0x22>
        return;
 80040b0:	bf00      	nop

}
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	20000258 	.word	0x20000258
 80040b8:	20000510 	.word	0x20000510

080040bc <MX_GPIO_Init>:

// GPIO initialization
void MX_GPIO_Init(void) {
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040c2:	f107 0310 	add.w	r3, r7, #16
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	605a      	str	r2, [r3, #4]
 80040cc:	609a      	str	r2, [r3, #8]
 80040ce:	60da      	str	r2, [r3, #12]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040d0:	4b33      	ldr	r3, [pc, #204]	; (80041a0 <MX_GPIO_Init+0xe4>)
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	4a32      	ldr	r2, [pc, #200]	; (80041a0 <MX_GPIO_Init+0xe4>)
 80040d6:	f043 0310 	orr.w	r3, r3, #16
 80040da:	6193      	str	r3, [r2, #24]
 80040dc:	4b30      	ldr	r3, [pc, #192]	; (80041a0 <MX_GPIO_Init+0xe4>)
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	f003 0310 	and.w	r3, r3, #16
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040e8:	4b2d      	ldr	r3, [pc, #180]	; (80041a0 <MX_GPIO_Init+0xe4>)
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	4a2c      	ldr	r2, [pc, #176]	; (80041a0 <MX_GPIO_Init+0xe4>)
 80040ee:	f043 0320 	orr.w	r3, r3, #32
 80040f2:	6193      	str	r3, [r2, #24]
 80040f4:	4b2a      	ldr	r3, [pc, #168]	; (80041a0 <MX_GPIO_Init+0xe4>)
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	60bb      	str	r3, [r7, #8]
 80040fe:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004100:	4b27      	ldr	r3, [pc, #156]	; (80041a0 <MX_GPIO_Init+0xe4>)
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	4a26      	ldr	r2, [pc, #152]	; (80041a0 <MX_GPIO_Init+0xe4>)
 8004106:	f043 0304 	orr.w	r3, r3, #4
 800410a:	6193      	str	r3, [r2, #24]
 800410c:	4b24      	ldr	r3, [pc, #144]	; (80041a0 <MX_GPIO_Init+0xe4>)
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	607b      	str	r3, [r7, #4]
 8004116:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004118:	4b21      	ldr	r3, [pc, #132]	; (80041a0 <MX_GPIO_Init+0xe4>)
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	4a20      	ldr	r2, [pc, #128]	; (80041a0 <MX_GPIO_Init+0xe4>)
 800411e:	f043 0308 	orr.w	r3, r3, #8
 8004122:	6193      	str	r3, [r2, #24]
 8004124:	4b1e      	ldr	r3, [pc, #120]	; (80041a0 <MX_GPIO_Init+0xe4>)
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	603b      	str	r3, [r7, #0]
 800412e:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004130:	2200      	movs	r2, #0
 8004132:	2120      	movs	r1, #32
 8004134:	481b      	ldr	r0, [pc, #108]	; (80041a4 <MX_GPIO_Init+0xe8>)
 8004136:	f7fd f915 	bl	8001364 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 800413a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800413e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004140:	4b19      	ldr	r3, [pc, #100]	; (80041a8 <MX_GPIO_Init+0xec>)
 8004142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004144:	2300      	movs	r3, #0
 8004146:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004148:	f107 0310 	add.w	r3, r7, #16
 800414c:	4619      	mov	r1, r3
 800414e:	4817      	ldr	r0, [pc, #92]	; (80041ac <MX_GPIO_Init+0xf0>)
 8004150:	f7fc fef2 	bl	8000f38 <HAL_GPIO_Init>

    /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004154:	230c      	movs	r3, #12
 8004156:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004158:	2302      	movs	r3, #2
 800415a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800415c:	2302      	movs	r3, #2
 800415e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004160:	f107 0310 	add.w	r3, r7, #16
 8004164:	4619      	mov	r1, r3
 8004166:	480f      	ldr	r0, [pc, #60]	; (80041a4 <MX_GPIO_Init+0xe8>)
 8004168:	f7fc fee6 	bl	8000f38 <HAL_GPIO_Init>

    /*Configure GPIO pin : LD2_Pin */
    GPIO_InitStruct.Pin = LD2_Pin;
 800416c:	2320      	movs	r3, #32
 800416e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004170:	2301      	movs	r3, #1
 8004172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004174:	2300      	movs	r3, #0
 8004176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004178:	2302      	movs	r3, #2
 800417a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800417c:	f107 0310 	add.w	r3, r7, #16
 8004180:	4619      	mov	r1, r3
 8004182:	4808      	ldr	r0, [pc, #32]	; (80041a4 <MX_GPIO_Init+0xe8>)
 8004184:	f7fc fed8 	bl	8000f38 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004188:	2200      	movs	r2, #0
 800418a:	2100      	movs	r1, #0
 800418c:	2028      	movs	r0, #40	; 0x28
 800418e:	f7fc fe0c 	bl	8000daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004192:	2028      	movs	r0, #40	; 0x28
 8004194:	f7fc fe25 	bl	8000de2 <HAL_NVIC_EnableIRQ>

}
 8004198:	bf00      	nop
 800419a:	3720      	adds	r7, #32
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40021000 	.word	0x40021000
 80041a4:	40010800 	.word	0x40010800
 80041a8:	10110000 	.word	0x10110000
 80041ac:	40011000 	.word	0x40011000

080041b0 <HAL_GPIO_EXTI_Callback>:

// Called when a GPIO interrupt occurs
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	80fb      	strh	r3, [r7, #6]
#ifdef EVENT_BUTTON
    if ((GPIO_Pin & GPIO_BUTTON_PIN) != 0)
        event(EVENT_BUTTON);
#endif

}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr

080041c4 <Error_Handler>:

// Primary HAL error handler
void Error_Handler(void) {
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
}
 80041c8:	bf00      	nop
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bc80      	pop	{r7}
 80041ce:	4770      	bx	lr

080041d0 <delay>:
void assert_failed(char *file, uint32_t line) {
}
#endif

// Computationally-delay the specified number of milliseconds
void delay(uint32_t ms) {
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f7fc fccb 	bl	8000b74 <HAL_Delay>
}
 80041de:	bf00      	nop
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <millis>:

// Get the number of app milliseconds since boot (this will wrap)
long unsigned int millis() {
 80041e6:	b580      	push	{r7, lr}
 80041e8:	af00      	add	r7, sp, #0
    return (long unsigned int) HAL_GetTick();
 80041ea:	f7fc fcb9 	bl	8000b60 <HAL_GetTick>
 80041ee:	4603      	mov	r3, r0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <noteSerialReset>:

// Serial port reset procedure, called before any I/O and called again upon I/O error
void noteSerialReset() {
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
    MX_USART1_UART_DeInit();
 80041f8:	f7ff ff4a 	bl	8004090 <MX_USART1_UART_DeInit>
    MX_USART1_UART_Init();
 80041fc:	f7ff feb4 	bl	8003f68 <MX_USART1_UART_Init>
}
 8004200:	bf00      	nop
 8004202:	bd80      	pop	{r7, pc}

08004204 <noteSerialTransmit>:

// Serial write data function
void noteSerialTransmit(uint8_t *text, size_t len, bool flush) {
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	4613      	mov	r3, r2
 8004210:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1, text, len, 5000);
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	b29a      	uxth	r2, r3
 8004216:	f241 3388 	movw	r3, #5000	; 0x1388
 800421a:	68f9      	ldr	r1, [r7, #12]
 800421c:	4803      	ldr	r0, [pc, #12]	; (800422c <noteSerialTransmit+0x28>)
 800421e:	f7ff f93a 	bl	8003496 <HAL_UART_Transmit>
}
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	20000510 	.word	0x20000510

08004230 <noteSerialAvailable>:

// Serial "is anything available" function, which does a read-ahead for data into a serial buffer
bool noteSerialAvailable() {
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
    return (serialFillIndex != serialDrainIndex);
 8004234:	4b06      	ldr	r3, [pc, #24]	; (8004250 <noteSerialAvailable+0x20>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	4b06      	ldr	r3, [pc, #24]	; (8004254 <noteSerialAvailable+0x24>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	bf14      	ite	ne
 8004240:	2301      	movne	r3, #1
 8004242:	2300      	moveq	r3, #0
 8004244:	b2db      	uxtb	r3, r3
}
 8004246:	4618      	mov	r0, r3
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	20000260 	.word	0x20000260
 8004254:	20000264 	.word	0x20000264

08004258 <noteSerialReceive>:

// Blocking serial read a byte function (generally only called if known to be available)
char noteSerialReceive() {
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
    char data;
    while (!noteSerialAvailable()) ;
 800425e:	bf00      	nop
 8004260:	f7ff ffe6 	bl	8004230 <noteSerialAvailable>
 8004264:	4603      	mov	r3, r0
 8004266:	f083 0301 	eor.w	r3, r3, #1
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1f7      	bne.n	8004260 <noteSerialReceive+0x8>
    if (serialDrainIndex < sizeof(serialBuffer))
 8004270:	4b0c      	ldr	r3, [pc, #48]	; (80042a4 <noteSerialReceive+0x4c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004278:	d208      	bcs.n	800428c <noteSerialReceive+0x34>
        data = serialBuffer[serialDrainIndex++];
 800427a:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <noteSerialReceive+0x4c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	4908      	ldr	r1, [pc, #32]	; (80042a4 <noteSerialReceive+0x4c>)
 8004282:	600a      	str	r2, [r1, #0]
 8004284:	4a08      	ldr	r2, [pc, #32]	; (80042a8 <noteSerialReceive+0x50>)
 8004286:	5cd3      	ldrb	r3, [r2, r3]
 8004288:	71fb      	strb	r3, [r7, #7]
 800428a:	e005      	b.n	8004298 <noteSerialReceive+0x40>
    else {
        data = serialBuffer[0];
 800428c:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <noteSerialReceive+0x50>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	71fb      	strb	r3, [r7, #7]
        serialDrainIndex = 1;
 8004292:	4b04      	ldr	r3, [pc, #16]	; (80042a4 <noteSerialReceive+0x4c>)
 8004294:	2201      	movs	r2, #1
 8004296:	601a      	str	r2, [r3, #0]
    }
    return data;
 8004298:	79fb      	ldrb	r3, [r7, #7]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20000264 	.word	0x20000264
 80042a8:	2000026c 	.word	0x2000026c

080042ac <HAL_MspInit>:
// copyright holder including that found in the LICENSE file.

#include "main.h"

// Initialize global peripheral init
void HAL_MspInit(void) {
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
    __HAL_RCC_AFIO_CLK_ENABLE();
 80042b2:	4b15      	ldr	r3, [pc, #84]	; (8004308 <HAL_MspInit+0x5c>)
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	4a14      	ldr	r2, [pc, #80]	; (8004308 <HAL_MspInit+0x5c>)
 80042b8:	f043 0301 	orr.w	r3, r3, #1
 80042bc:	6193      	str	r3, [r2, #24]
 80042be:	4b12      	ldr	r3, [pc, #72]	; (8004308 <HAL_MspInit+0x5c>)
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	60bb      	str	r3, [r7, #8]
 80042c8:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_PWR_CLK_ENABLE();
 80042ca:	4b0f      	ldr	r3, [pc, #60]	; (8004308 <HAL_MspInit+0x5c>)
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	4a0e      	ldr	r2, [pc, #56]	; (8004308 <HAL_MspInit+0x5c>)
 80042d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d4:	61d3      	str	r3, [r2, #28]
 80042d6:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <HAL_MspInit+0x5c>)
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042de:	607b      	str	r3, [r7, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
    // NOJTAG: JTAG-DP Disabled and SW-DP Enabled
    __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80042e2:	4b0a      	ldr	r3, [pc, #40]	; (800430c <HAL_MspInit+0x60>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	4a04      	ldr	r2, [pc, #16]	; (800430c <HAL_MspInit+0x60>)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6053      	str	r3, [r2, #4]
}
 80042fe:	bf00      	nop
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	bc80      	pop	{r7}
 8004306:	4770      	bx	lr
 8004308:	40021000 	.word	0x40021000
 800430c:	40010000 	.word	0x40010000

08004310 <HAL_UART_MspInit>:
    }

}

// Initialize all UART ports
void HAL_UART_MspInit(UART_HandleTypeDef* huart) {
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]

    if (huart->Instance==USART1) {
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a23      	ldr	r2, [pc, #140]	; (80043ac <HAL_UART_MspInit+0x9c>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d140      	bne.n	80043a4 <HAL_UART_MspInit+0x94>
        GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004322:	f107 0310 	add.w	r3, r7, #16
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	605a      	str	r2, [r3, #4]
 800432c:	609a      	str	r2, [r3, #8]
 800432e:	60da      	str	r2, [r3, #12]

        // Peripheral clock enable
        __HAL_RCC_USART1_CLK_ENABLE();
 8004330:	4b1f      	ldr	r3, [pc, #124]	; (80043b0 <HAL_UART_MspInit+0xa0>)
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	4a1e      	ldr	r2, [pc, #120]	; (80043b0 <HAL_UART_MspInit+0xa0>)
 8004336:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800433a:	6193      	str	r3, [r2, #24]
 800433c:	4b1c      	ldr	r3, [pc, #112]	; (80043b0 <HAL_UART_MspInit+0xa0>)
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	68fb      	ldr	r3, [r7, #12]

        // USART1 GPIO Configuration
        // PA9     ------> USART1_TX
        // PA10     ------> USART1_RX
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8004348:	4b19      	ldr	r3, [pc, #100]	; (80043b0 <HAL_UART_MspInit+0xa0>)
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	4a18      	ldr	r2, [pc, #96]	; (80043b0 <HAL_UART_MspInit+0xa0>)
 800434e:	f043 0304 	orr.w	r3, r3, #4
 8004352:	6193      	str	r3, [r2, #24]
 8004354:	4b16      	ldr	r3, [pc, #88]	; (80043b0 <HAL_UART_MspInit+0xa0>)
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	60bb      	str	r3, [r7, #8]
 800435e:	68bb      	ldr	r3, [r7, #8]
        GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004360:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004364:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004366:	2302      	movs	r3, #2
 8004368:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800436a:	2303      	movs	r3, #3
 800436c:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800436e:	f107 0310 	add.w	r3, r7, #16
 8004372:	4619      	mov	r1, r3
 8004374:	480f      	ldr	r0, [pc, #60]	; (80043b4 <HAL_UART_MspInit+0xa4>)
 8004376:	f7fc fddf 	bl	8000f38 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = GPIO_PIN_10;
 800437a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800437e:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004380:	2300      	movs	r3, #0
 8004382:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004384:	2300      	movs	r3, #0
 8004386:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004388:	f107 0310 	add.w	r3, r7, #16
 800438c:	4619      	mov	r1, r3
 800438e:	4809      	ldr	r0, [pc, #36]	; (80043b4 <HAL_UART_MspInit+0xa4>)
 8004390:	f7fc fdd2 	bl	8000f38 <HAL_GPIO_Init>

        // USART1 interrupt Init
        HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004394:	2200      	movs	r2, #0
 8004396:	2100      	movs	r1, #0
 8004398:	2025      	movs	r0, #37	; 0x25
 800439a:	f7fc fd06 	bl	8000daa <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 800439e:	2025      	movs	r0, #37	; 0x25
 80043a0:	f7fc fd1f 	bl	8000de2 <HAL_NVIC_EnableIRQ>

    }

}
 80043a4:	bf00      	nop
 80043a6:	3720      	adds	r7, #32
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40013800 	.word	0x40013800
 80043b0:	40021000 	.word	0x40021000
 80043b4:	40010800 	.word	0x40010800

080043b8 <HAL_UART_MspDeInit>:


// Deinitialize all UARTs
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart) {
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]

    // Handle USART1
    if (huart->Instance==USART1) {
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a0a      	ldr	r2, [pc, #40]	; (80043f0 <HAL_UART_MspDeInit+0x38>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d10d      	bne.n	80043e6 <HAL_UART_MspDeInit+0x2e>

        // Peripheral clock disable
        __HAL_RCC_USART1_CLK_DISABLE();
 80043ca:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <HAL_UART_MspDeInit+0x3c>)
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	4a09      	ldr	r2, [pc, #36]	; (80043f4 <HAL_UART_MspDeInit+0x3c>)
 80043d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043d4:	6193      	str	r3, [r2, #24]

        // USART1 GPIO Configuration
        // PA9     ------> USART1_TX
        // PA10     ------> USART1_RX
        HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80043d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80043da:	4807      	ldr	r0, [pc, #28]	; (80043f8 <HAL_UART_MspDeInit+0x40>)
 80043dc:	f7fc ff06 	bl	80011ec <HAL_GPIO_DeInit>

        // USART1 interrupt DeInit
        HAL_NVIC_DisableIRQ(USART1_IRQn);
 80043e0:	2025      	movs	r0, #37	; 0x25
 80043e2:	f7fc fd0c 	bl	8000dfe <HAL_NVIC_DisableIRQ>

    }

}
 80043e6:	bf00      	nop
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40013800 	.word	0x40013800
 80043f4:	40021000 	.word	0x40021000
 80043f8:	40010800 	.word	0x40010800

080043fc <NMI_Handler>:
extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart1;
extern void MY_UART_IRQHandler(UART_HandleTypeDef *huart);

// Cortex-M4 non-maskable interrupt
void NMI_Handler(void) {
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
}
 8004400:	bf00      	nop
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr

08004408 <HardFault_Handler>:

// Cortex-M4 hardware fault interrupt
void HardFault_Handler(void) {
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
    while (1) ;
 800440c:	e7fe      	b.n	800440c <HardFault_Handler+0x4>

0800440e <MemManage_Handler>:
}

// Memory management fault
void MemManage_Handler(void) {
 800440e:	b480      	push	{r7}
 8004410:	af00      	add	r7, sp, #0
    while (1) ;
 8004412:	e7fe      	b.n	8004412 <MemManage_Handler+0x4>

08004414 <BusFault_Handler>:
}

// Prefetch or memory access fault
void BusFault_Handler(void) {
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
    while (1) ;
 8004418:	e7fe      	b.n	8004418 <BusFault_Handler+0x4>

0800441a <UsageFault_Handler>:
}

// Undefined instruction or illegal state
void UsageFault_Handler(void) {
 800441a:	b480      	push	{r7}
 800441c:	af00      	add	r7, sp, #0
    while (1) ;
 800441e:	e7fe      	b.n	800441e <UsageFault_Handler+0x4>

08004420 <SVC_Handler>:
}

// System service call via SWI instruction
void SVC_Handler(void) {
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
}
 8004424:	bf00      	nop
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr

0800442c <DebugMon_Handler>:

// Debug monitor
void DebugMon_Handler(void) {
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
}
 8004430:	bf00      	nop
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr

08004438 <PendSV_Handler>:

// Pendable request for system service.
void PendSV_Handler(void) {
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
}
 800443c:	bf00      	nop
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr

08004444 <SysTick_Handler>:

// System tick timer
void SysTick_Handler(void) {
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8004448:	f7fc fb78 	bl	8000b3c <HAL_IncTick>
}
 800444c:	bf00      	nop
 800444e:	bd80      	pop	{r7, pc}

08004450 <I2C1_EV_IRQHandler>:

// IC21 event interrupt
void I2C1_EV_IRQHandler(void) {
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8004454:	4802      	ldr	r0, [pc, #8]	; (8004460 <I2C1_EV_IRQHandler+0x10>)
 8004456:	f7fc ffb5 	bl	80013c4 <HAL_I2C_EV_IRQHandler>
}
 800445a:	bf00      	nop
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	200004bc 	.word	0x200004bc

08004464 <I2C1_ER_IRQHandler>:

// I2C1 error interrupt
void I2C1_ER_IRQHandler(void) {
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8004468:	4802      	ldr	r0, [pc, #8]	; (8004474 <I2C1_ER_IRQHandler+0x10>)
 800446a:	f7fd f911 	bl	8001690 <HAL_I2C_ER_IRQHandler>
}
 800446e:	bf00      	nop
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	200004bc 	.word	0x200004bc

08004478 <USART1_IRQHandler>:

// USART1 global interrupt
void USART1_IRQHandler(void) {
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart1);
 800447c:	4803      	ldr	r0, [pc, #12]	; (800448c <USART1_IRQHandler+0x14>)
 800447e:	f7ff f8f7 	bl	8003670 <HAL_UART_IRQHandler>
    MY_UART_IRQHandler(&huart1);
 8004482:	4802      	ldr	r0, [pc, #8]	; (800448c <USART1_IRQHandler+0x14>)
 8004484:	f7ff fdb8 	bl	8003ff8 <MY_UART_IRQHandler>
}
 8004488:	bf00      	nop
 800448a:	bd80      	pop	{r7, pc}
 800448c:	20000510 	.word	0x20000510

08004490 <EXTI0_IRQHandler>:

// Interrupt handlers
void EXTI0_IRQHandler( void ) {
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004494:	2001      	movs	r0, #1
 8004496:	f7fc ff7d 	bl	8001394 <HAL_GPIO_EXTI_IRQHandler>
}
 800449a:	bf00      	nop
 800449c:	bd80      	pop	{r7, pc}

0800449e <EXTI1_IRQHandler>:
void EXTI1_IRQHandler( void ) {
 800449e:	b580      	push	{r7, lr}
 80044a0:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80044a2:	2002      	movs	r0, #2
 80044a4:	f7fc ff76 	bl	8001394 <HAL_GPIO_EXTI_IRQHandler>
}
 80044a8:	bf00      	nop
 80044aa:	bd80      	pop	{r7, pc}

080044ac <EXTI2_IRQHandler>:
void EXTI2_IRQHandler( void ) {
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80044b0:	2004      	movs	r0, #4
 80044b2:	f7fc ff6f 	bl	8001394 <HAL_GPIO_EXTI_IRQHandler>
}
 80044b6:	bf00      	nop
 80044b8:	bd80      	pop	{r7, pc}

080044ba <EXTI3_IRQHandler>:
void EXTI3_IRQHandler( void ) {
 80044ba:	b580      	push	{r7, lr}
 80044bc:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80044be:	2008      	movs	r0, #8
 80044c0:	f7fc ff68 	bl	8001394 <HAL_GPIO_EXTI_IRQHandler>
}
 80044c4:	bf00      	nop
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler( void ) {
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80044cc:	2010      	movs	r0, #16
 80044ce:	f7fc ff61 	bl	8001394 <HAL_GPIO_EXTI_IRQHandler>
}
 80044d2:	bf00      	nop
 80044d4:	bd80      	pop	{r7, pc}
	...

080044d8 <MY_GPIO_EXTI_IRQHandler>:
// GPIO handler, enhanced from the base ST handler in a way that enables us to distinguish from the multiple
// pins that sharing the same EXTI.
void MY_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin) {
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	80fb      	strh	r3, [r7, #6]
    if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) {
 80044e2:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <MY_GPIO_EXTI_IRQHandler+0x38>)
 80044e4:	695a      	ldr	r2, [r3, #20]
 80044e6:	88fb      	ldrh	r3, [r7, #6]
 80044e8:	4013      	ands	r3, r2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00c      	beq.n	8004508 <MY_GPIO_EXTI_IRQHandler+0x30>
        uint16_t GPIO_Line = GPIO_Pin & EXTI->PR;
 80044ee:	4b08      	ldr	r3, [pc, #32]	; (8004510 <MY_GPIO_EXTI_IRQHandler+0x38>)
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	88fb      	ldrh	r3, [r7, #6]
 80044f6:	4013      	ands	r3, r2
 80044f8:	81fb      	strh	r3, [r7, #14]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044fa:	4a05      	ldr	r2, [pc, #20]	; (8004510 <MY_GPIO_EXTI_IRQHandler+0x38>)
 80044fc:	88fb      	ldrh	r3, [r7, #6]
 80044fe:	6153      	str	r3, [r2, #20]
        HAL_GPIO_EXTI_Callback(GPIO_Line);
 8004500:	89fb      	ldrh	r3, [r7, #14]
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff fe54 	bl	80041b0 <HAL_GPIO_EXTI_Callback>
    }
}
 8004508:	bf00      	nop
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40010400 	.word	0x40010400

08004514 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler( void ) {
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  MY_GPIO_EXTI_IRQHandler(GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5);
 8004518:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 800451c:	f7ff ffdc 	bl	80044d8 <MY_GPIO_EXTI_IRQHandler>
}
 8004520:	bf00      	nop
 8004522:	bd80      	pop	{r7, pc}

08004524 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler( void ) {
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
  MY_GPIO_EXTI_IRQHandler(GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10);
 8004528:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
 800452c:	f7ff ffd4 	bl	80044d8 <MY_GPIO_EXTI_IRQHandler>
}
 8004530:	bf00      	nop
 8004532:	bd80      	pop	{r7, pc}

08004534 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800453c:	4b11      	ldr	r3, [pc, #68]	; (8004584 <_sbrk+0x50>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d102      	bne.n	800454a <_sbrk+0x16>
		heap_end = &end;
 8004544:	4b0f      	ldr	r3, [pc, #60]	; (8004584 <_sbrk+0x50>)
 8004546:	4a10      	ldr	r2, [pc, #64]	; (8004588 <_sbrk+0x54>)
 8004548:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800454a:	4b0e      	ldr	r3, [pc, #56]	; (8004584 <_sbrk+0x50>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004550:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <_sbrk+0x50>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4413      	add	r3, r2
 8004558:	466a      	mov	r2, sp
 800455a:	4293      	cmp	r3, r2
 800455c:	d907      	bls.n	800456e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800455e:	f003 f813 	bl	8007588 <__errno>
 8004562:	4602      	mov	r2, r0
 8004564:	230c      	movs	r3, #12
 8004566:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004568:	f04f 33ff 	mov.w	r3, #4294967295
 800456c:	e006      	b.n	800457c <_sbrk+0x48>
	}

	heap_end += incr;
 800456e:	4b05      	ldr	r3, [pc, #20]	; (8004584 <_sbrk+0x50>)
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4413      	add	r3, r2
 8004576:	4a03      	ldr	r2, [pc, #12]	; (8004584 <_sbrk+0x50>)
 8004578:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800457a:	68fb      	ldr	r3, [r7, #12]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	2000046c 	.word	0x2000046c
 8004588:	20000558 	.word	0x20000558

0800458c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004590:	4b15      	ldr	r3, [pc, #84]	; (80045e8 <SystemInit+0x5c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a14      	ldr	r2, [pc, #80]	; (80045e8 <SystemInit+0x5c>)
 8004596:	f043 0301 	orr.w	r3, r3, #1
 800459a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800459c:	4b12      	ldr	r3, [pc, #72]	; (80045e8 <SystemInit+0x5c>)
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	4911      	ldr	r1, [pc, #68]	; (80045e8 <SystemInit+0x5c>)
 80045a2:	4b12      	ldr	r3, [pc, #72]	; (80045ec <SystemInit+0x60>)
 80045a4:	4013      	ands	r3, r2
 80045a6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80045a8:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <SystemInit+0x5c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a0e      	ldr	r2, [pc, #56]	; (80045e8 <SystemInit+0x5c>)
 80045ae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80045b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80045b8:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <SystemInit+0x5c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a0a      	ldr	r2, [pc, #40]	; (80045e8 <SystemInit+0x5c>)
 80045be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80045c4:	4b08      	ldr	r3, [pc, #32]	; (80045e8 <SystemInit+0x5c>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	4a07      	ldr	r2, [pc, #28]	; (80045e8 <SystemInit+0x5c>)
 80045ca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80045ce:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80045d0:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <SystemInit+0x5c>)
 80045d2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80045d6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <SystemInit+0x64>)
 80045da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80045de:	609a      	str	r2, [r3, #8]
#endif 
}
 80045e0:	bf00      	nop
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr
 80045e8:	40021000 	.word	0x40021000
 80045ec:	f8ff0000 	.word	0xf8ff0000
 80045f0:	e000ed00 	.word	0xe000ed00

080045f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80045f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80045f6:	e003      	b.n	8004600 <LoopCopyDataInit>

080045f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80045f8:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80045fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80045fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80045fe:	3104      	adds	r1, #4

08004600 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004600:	480a      	ldr	r0, [pc, #40]	; (800462c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004602:	4b0b      	ldr	r3, [pc, #44]	; (8004630 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004604:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004606:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004608:	d3f6      	bcc.n	80045f8 <CopyDataInit>
  ldr r2, =_sbss
 800460a:	4a0a      	ldr	r2, [pc, #40]	; (8004634 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800460c:	e002      	b.n	8004614 <LoopFillZerobss>

0800460e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800460e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004610:	f842 3b04 	str.w	r3, [r2], #4

08004614 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004614:	4b08      	ldr	r3, [pc, #32]	; (8004638 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004616:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004618:	d3f9      	bcc.n	800460e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800461a:	f7ff ffb7 	bl	800458c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800461e:	f002 ffb9 	bl	8007594 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004622:	f7ff fc35 	bl	8003e90 <main>
  bx lr
 8004626:	4770      	bx	lr
  ldr r3, =_sidata
 8004628:	08008438 	.word	0x08008438
  ldr r0, =_sdata
 800462c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004630:	20000238 	.word	0x20000238
  ldr r2, =_sbss
 8004634:	20000238 	.word	0x20000238
  ldr r3, = _ebss
 8004638:	20000554 	.word	0x20000554

0800463c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800463c:	e7fe      	b.n	800463c <ADC1_2_IRQHandler>
	...

08004640 <JAtoN>:
                                 * The "E" may actually be an "e".  E and X
                                 * may both be omitted (but not just one).
                                 */
    char **endPtr;              /* If non-NULL, store terminating character's
                                 * address here. */
{
 8004640:	b5b0      	push	{r4, r5, r7, lr}
 8004642:	b092      	sub	sp, #72	; 0x48
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
    int sign, expSign = FALSE;
 800464a:	2300      	movs	r3, #0
 800464c:	643b      	str	r3, [r7, #64]	; 0x40
    double fraction, dblExp, *d;
    register const char *p;
    register int c;
    int exp = 0;                /* Exponent read from "EX" field. */
 800464e:	2300      	movs	r3, #0
 8004650:	62bb      	str	r3, [r7, #40]	; 0x28
    int fracExp = 0;            /* Exponent that derives from the fractional
 8004652:	2300      	movs	r3, #0
 8004654:	627b      	str	r3, [r7, #36]	; 0x24

    /*
     * Strip off leading blanks and check for a sign.
     */

    p = string;
 8004656:	68fc      	ldr	r4, [r7, #12]
    while (*p == ' ') {
 8004658:	e000      	b.n	800465c <JAtoN+0x1c>
        p += 1;
 800465a:	3401      	adds	r4, #1
    while (*p == ' ') {
 800465c:	7823      	ldrb	r3, [r4, #0]
 800465e:	2b20      	cmp	r3, #32
 8004660:	d0fb      	beq.n	800465a <JAtoN+0x1a>
    }
    if (*p == '-') {
 8004662:	7823      	ldrb	r3, [r4, #0]
 8004664:	2b2d      	cmp	r3, #45	; 0x2d
 8004666:	d103      	bne.n	8004670 <JAtoN+0x30>
        sign = TRUE;
 8004668:	2301      	movs	r3, #1
 800466a:	647b      	str	r3, [r7, #68]	; 0x44
        p += 1;
 800466c:	3401      	adds	r4, #1
 800466e:	e005      	b.n	800467c <JAtoN+0x3c>
    } else {
        if (*p == '+') {
 8004670:	7823      	ldrb	r3, [r4, #0]
 8004672:	2b2b      	cmp	r3, #43	; 0x2b
 8004674:	d100      	bne.n	8004678 <JAtoN+0x38>
            p += 1;
 8004676:	3401      	adds	r4, #1
        }
        sign = FALSE;
 8004678:	2300      	movs	r3, #0
 800467a:	647b      	str	r3, [r7, #68]	; 0x44
    /*
     * Count the number of digits in the mantissa (including the decimal
     * point), and also locate the decimal point.
     */

    decPt = -1;
 800467c:	f04f 33ff 	mov.w	r3, #4294967295
 8004680:	61fb      	str	r3, [r7, #28]
    for (mantSize = 0; ; mantSize += 1)
 8004682:	2300      	movs	r3, #0
 8004684:	623b      	str	r3, [r7, #32]
    {
        c = *p;
 8004686:	7823      	ldrb	r3, [r4, #0]
 8004688:	461d      	mov	r5, r3
        if (c < '0' || c > '9') {
 800468a:	2d2f      	cmp	r5, #47	; 0x2f
 800468c:	dd01      	ble.n	8004692 <JAtoN+0x52>
 800468e:	2d39      	cmp	r5, #57	; 0x39
 8004690:	dd06      	ble.n	80046a0 <JAtoN+0x60>
            if ((c != '.') || (decPt >= 0)) {
 8004692:	2d2e      	cmp	r5, #46	; 0x2e
 8004694:	d109      	bne.n	80046aa <JAtoN+0x6a>
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	2b00      	cmp	r3, #0
 800469a:	da06      	bge.n	80046aa <JAtoN+0x6a>
                break;
            }
            decPt = mantSize;
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	61fb      	str	r3, [r7, #28]
        }
        p += 1;
 80046a0:	3401      	adds	r4, #1
    for (mantSize = 0; ; mantSize += 1)
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	3301      	adds	r3, #1
 80046a6:	623b      	str	r3, [r7, #32]
        c = *p;
 80046a8:	e7ed      	b.n	8004686 <JAtoN+0x46>
     * collect 9 digits each (this is faster than using floating-point).
     * If the mantissa has more than 18 digits, ignore the extras, since
     * they can't affect the value anyway.
     */
    
    pExp  = p;
 80046aa:	613c      	str	r4, [r7, #16]
    p -= mantSize;
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	425b      	negs	r3, r3
 80046b0:	441c      	add	r4, r3
    if (decPt < 0) {
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	da02      	bge.n	80046be <JAtoN+0x7e>
        decPt = mantSize;
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	61fb      	str	r3, [r7, #28]
 80046bc:	e002      	b.n	80046c4 <JAtoN+0x84>
    } else {
        mantSize -= 1;                  /* One of the digits was the point. */
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	3b01      	subs	r3, #1
 80046c2:	623b      	str	r3, [r7, #32]
    }
    if (mantSize > 18) {
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	2b12      	cmp	r3, #18
 80046c8:	dd05      	ble.n	80046d6 <JAtoN+0x96>
        fracExp = decPt - 18;
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	3b12      	subs	r3, #18
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24
        mantSize = 18;
 80046d0:	2312      	movs	r3, #18
 80046d2:	623b      	str	r3, [r7, #32]
 80046d4:	e003      	b.n	80046de <JAtoN+0x9e>
    } else {
        fracExp = decPt - mantSize;
 80046d6:	69fa      	ldr	r2, [r7, #28]
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (mantSize == 0) {
 80046de:	6a3b      	ldr	r3, [r7, #32]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d107      	bne.n	80046f4 <JAtoN+0xb4>
        fraction = 0.0;
 80046e4:	f04f 0300 	mov.w	r3, #0
 80046e8:	f04f 0400 	mov.w	r4, #0
 80046ec:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
        p = string;
 80046f0:	68fc      	ldr	r4, [r7, #12]
        goto done;
 80046f2:	e0cd      	b.n	8004890 <JAtoN+0x250>
    } else {
        long frac1, frac2;
        frac1 = 0L;
 80046f4:	2300      	movs	r3, #0
 80046f6:	61bb      	str	r3, [r7, #24]
        for ( ; mantSize > 9; mantSize -= 1)
 80046f8:	e014      	b.n	8004724 <JAtoN+0xe4>
        {
            c = *p;
 80046fa:	7823      	ldrb	r3, [r4, #0]
 80046fc:	461d      	mov	r5, r3
            p += 1;
 80046fe:	3401      	adds	r4, #1
            if (c == '.') {
 8004700:	2d2e      	cmp	r5, #46	; 0x2e
 8004702:	d102      	bne.n	800470a <JAtoN+0xca>
                c = *p;
 8004704:	7823      	ldrb	r3, [r4, #0]
 8004706:	461d      	mov	r5, r3
                p += 1;
 8004708:	3401      	adds	r4, #1
            }
            frac1 = 10*frac1 + (c - '0');
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	4613      	mov	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	461a      	mov	r2, r3
 8004716:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800471a:	4413      	add	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        for ( ; mantSize > 9; mantSize -= 1)
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	3b01      	subs	r3, #1
 8004722:	623b      	str	r3, [r7, #32]
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	2b09      	cmp	r3, #9
 8004728:	dce7      	bgt.n	80046fa <JAtoN+0xba>
        }
        frac2 = 0L;
 800472a:	2300      	movs	r3, #0
 800472c:	617b      	str	r3, [r7, #20]
        for (; mantSize > 0; mantSize -= 1)
 800472e:	e014      	b.n	800475a <JAtoN+0x11a>
        {
            c = *p;
 8004730:	7823      	ldrb	r3, [r4, #0]
 8004732:	461d      	mov	r5, r3
            p += 1;
 8004734:	3401      	adds	r4, #1
            if (c == '.') {
 8004736:	2d2e      	cmp	r5, #46	; 0x2e
 8004738:	d102      	bne.n	8004740 <JAtoN+0x100>
                c = *p;
 800473a:	7823      	ldrb	r3, [r4, #0]
 800473c:	461d      	mov	r5, r3
                p += 1;
 800473e:	3401      	adds	r4, #1
            }
            frac2 = 10*frac2 + (c - '0');
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	4613      	mov	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	461a      	mov	r2, r3
 800474c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004750:	4413      	add	r3, r2
 8004752:	617b      	str	r3, [r7, #20]
        for (; mantSize > 0; mantSize -= 1)
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	3b01      	subs	r3, #1
 8004758:	623b      	str	r3, [r7, #32]
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	2b00      	cmp	r3, #0
 800475e:	dce7      	bgt.n	8004730 <JAtoN+0xf0>
        }
        fraction = (1.0e9 * frac1) + frac2;
 8004760:	69b8      	ldr	r0, [r7, #24]
 8004762:	f7fb fe59 	bl	8000418 <__aeabi_i2d>
 8004766:	a358      	add	r3, pc, #352	; (adr r3, 80048c8 <JAtoN+0x288>)
 8004768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476c:	f7fb febe 	bl	80004ec <__aeabi_dmul>
 8004770:	4603      	mov	r3, r0
 8004772:	460c      	mov	r4, r1
 8004774:	4625      	mov	r5, r4
 8004776:	461c      	mov	r4, r3
 8004778:	6978      	ldr	r0, [r7, #20]
 800477a:	f7fb fe4d 	bl	8000418 <__aeabi_i2d>
 800477e:	4602      	mov	r2, r0
 8004780:	460b      	mov	r3, r1
 8004782:	4620      	mov	r0, r4
 8004784:	4629      	mov	r1, r5
 8004786:	f7fb fcfb 	bl	8000180 <__adddf3>
 800478a:	4603      	mov	r3, r0
 800478c:	460c      	mov	r4, r1
 800478e:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

    /*
     * Skim off the exponent.
     */

    p = pExp;
 8004792:	693c      	ldr	r4, [r7, #16]
    if ((*p == 'E') || (*p == 'e')) {
 8004794:	7823      	ldrb	r3, [r4, #0]
 8004796:	2b45      	cmp	r3, #69	; 0x45
 8004798:	d002      	beq.n	80047a0 <JAtoN+0x160>
 800479a:	7823      	ldrb	r3, [r4, #0]
 800479c:	2b65      	cmp	r3, #101	; 0x65
 800479e:	d11f      	bne.n	80047e0 <JAtoN+0x1a0>
        p += 1;
 80047a0:	3401      	adds	r4, #1
        if (*p == '-') {
 80047a2:	7823      	ldrb	r3, [r4, #0]
 80047a4:	2b2d      	cmp	r3, #45	; 0x2d
 80047a6:	d103      	bne.n	80047b0 <JAtoN+0x170>
            expSign = TRUE;
 80047a8:	2301      	movs	r3, #1
 80047aa:	643b      	str	r3, [r7, #64]	; 0x40
            p += 1;
 80047ac:	3401      	adds	r4, #1
 80047ae:	e011      	b.n	80047d4 <JAtoN+0x194>
        } else {
            if (*p == '+') {
 80047b0:	7823      	ldrb	r3, [r4, #0]
 80047b2:	2b2b      	cmp	r3, #43	; 0x2b
 80047b4:	d100      	bne.n	80047b8 <JAtoN+0x178>
                p += 1;
 80047b6:	3401      	adds	r4, #1
            }
            expSign = FALSE;
 80047b8:	2300      	movs	r3, #0
 80047ba:	643b      	str	r3, [r7, #64]	; 0x40
        }
        while (*p >= '0' && *p <= '9') {
 80047bc:	e00a      	b.n	80047d4 <JAtoN+0x194>
            exp = exp * 10 + (*p - '0');
 80047be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047c0:	4613      	mov	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	461a      	mov	r2, r3
 80047ca:	7823      	ldrb	r3, [r4, #0]
 80047cc:	3b30      	subs	r3, #48	; 0x30
 80047ce:	4413      	add	r3, r2
 80047d0:	62bb      	str	r3, [r7, #40]	; 0x28
            p += 1;
 80047d2:	3401      	adds	r4, #1
        while (*p >= '0' && *p <= '9') {
 80047d4:	7823      	ldrb	r3, [r4, #0]
 80047d6:	2b2f      	cmp	r3, #47	; 0x2f
 80047d8:	d902      	bls.n	80047e0 <JAtoN+0x1a0>
 80047da:	7823      	ldrb	r3, [r4, #0]
 80047dc:	2b39      	cmp	r3, #57	; 0x39
 80047de:	d9ee      	bls.n	80047be <JAtoN+0x17e>
        }
    }
    if (expSign) {
 80047e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d004      	beq.n	80047f0 <JAtoN+0x1b0>
        exp = fracExp - exp;
 80047e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ee:	e003      	b.n	80047f8 <JAtoN+0x1b8>
    } else {
        exp = fracExp + exp;
 80047f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	4413      	add	r3, r2
 80047f6:	62bb      	str	r3, [r7, #40]	; 0x28
     * Do this by processing the exponent one bit at a time to combine
     * many powers of 2 of 10. Then combine the exponent with the
     * fraction.
     */
    
    if (exp < 0) {
 80047f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	da05      	bge.n	800480a <JAtoN+0x1ca>
        expSign = TRUE;
 80047fe:	2301      	movs	r3, #1
 8004800:	643b      	str	r3, [r7, #64]	; 0x40
        exp = -exp;
 8004802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004804:	425b      	negs	r3, r3
 8004806:	62bb      	str	r3, [r7, #40]	; 0x28
 8004808:	e001      	b.n	800480e <JAtoN+0x1ce>
    } else {
        expSign = FALSE;
 800480a:	2300      	movs	r3, #0
 800480c:	643b      	str	r3, [r7, #64]	; 0x40
    }
    if (exp > maxExponent) {
 800480e:	4b30      	ldr	r3, [pc, #192]	; (80048d0 <JAtoN+0x290>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004814:	429a      	cmp	r2, r3
 8004816:	dd02      	ble.n	800481e <JAtoN+0x1de>
        exp = maxExponent;
 8004818:	4b2d      	ldr	r3, [pc, #180]	; (80048d0 <JAtoN+0x290>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    dblExp = 1.0;
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	4b2c      	ldr	r3, [pc, #176]	; (80048d4 <JAtoN+0x294>)
 8004824:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    for (d = powersOf10; exp != 0; exp >>= 1, d += 1) {
 8004828:	4b2b      	ldr	r3, [pc, #172]	; (80048d8 <JAtoN+0x298>)
 800482a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800482c:	e015      	b.n	800485a <JAtoN+0x21a>
        if (exp & 01) {
 800482e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <JAtoN+0x20e>
            dblExp *= *d;
 8004838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004842:	f7fb fe53 	bl	80004ec <__aeabi_dmul>
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    for (d = powersOf10; exp != 0; exp >>= 1, d += 1) {
 800484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004850:	105b      	asrs	r3, r3, #1
 8004852:	62bb      	str	r3, [r7, #40]	; 0x28
 8004854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004856:	3308      	adds	r3, #8
 8004858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800485a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e6      	bne.n	800482e <JAtoN+0x1ee>
        }
    }
    if (expSign) {
 8004860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <JAtoN+0x23c>
        fraction /= dblExp;
 8004866:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800486a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800486e:	f7fb ff67 	bl	8000740 <__aeabi_ddiv>
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800487a:	e009      	b.n	8004890 <JAtoN+0x250>
    } else {
        fraction *= dblExp;
 800487c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004880:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004884:	f7fb fe32 	bl	80004ec <__aeabi_dmul>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }

done:
    if (endPtr != NULL) {
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <JAtoN+0x25a>
        *endPtr = (char *) p;
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	601c      	str	r4, [r3, #0]
    }

    if (sign) {
 800489a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800489c:	2b00      	cmp	r3, #0
 800489e:	d006      	beq.n	80048ae <JAtoN+0x26e>
        return -fraction;
 80048a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a2:	603b      	str	r3, [r7, #0]
 80048a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80048aa:	607b      	str	r3, [r7, #4]
 80048ac:	e003      	b.n	80048b6 <JAtoN+0x276>
    }
    return fraction;
 80048ae:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80048b2:	e9c7 3400 	strd	r3, r4, [r7]
 80048b6:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	4621      	mov	r1, r4
 80048be:	3748      	adds	r7, #72	; 0x48
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bdb0      	pop	{r4, r5, r7, pc}
 80048c4:	f3af 8000 	nop.w
 80048c8:	00000000 	.word	0x00000000
 80048cc:	41cdcd65 	.word	0x41cdcd65
 80048d0:	2000000c 	.word	0x2000000c
 80048d4:	3ff00000 	.word	0x3ff00000
 80048d8:	20000010 	.word	0x20000010

080048dc <case_insensitive_strcmp>:
    return STRINGIFY(N_CJSON_VERSION_MAJOR) "." STRINGIFY(N_CJSON_VERSION_MINOR) "." STRINGIFY(N_CJSON_VERSION_PATCH);
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 80048dc:	b590      	push	{r4, r7, lr}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <case_insensitive_strcmp+0x16>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e05e      	b.n	80049b4 <case_insensitive_strcmp+0xd8>
    }

    if (string1 == string2)
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d10d      	bne.n	800491a <case_insensitive_strcmp+0x3e>
    {
        return 0;
 80048fe:	2300      	movs	r3, #0
 8004900:	e058      	b.n	80049b4 <case_insensitive_strcmp+0xd8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <case_insensitive_strcmp+0x32>
        {
            return 0;
 800490a:	2300      	movs	r3, #0
 800490c:	e052      	b.n	80049b4 <case_insensitive_strcmp+0xd8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	3301      	adds	r3, #1
 8004912:	607b      	str	r3, [r7, #4]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	3301      	adds	r3, #1
 8004918:	603b      	str	r3, [r7, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	73fb      	strb	r3, [r7, #15]
 8004920:	f002 fe5c 	bl	80075dc <__locale_ctype_ptr>
 8004924:	4602      	mov	r2, r0
 8004926:	7bfb      	ldrb	r3, [r7, #15]
 8004928:	3301      	adds	r3, #1
 800492a:	4413      	add	r3, r2
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	2b01      	cmp	r3, #1
 8004934:	d103      	bne.n	800493e <case_insensitive_strcmp+0x62>
 8004936:	7bfb      	ldrb	r3, [r7, #15]
 8004938:	f103 0420 	add.w	r4, r3, #32
 800493c:	e000      	b.n	8004940 <case_insensitive_strcmp+0x64>
 800493e:	7bfc      	ldrb	r4, [r7, #15]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	73bb      	strb	r3, [r7, #14]
 8004946:	f002 fe49 	bl	80075dc <__locale_ctype_ptr>
 800494a:	4602      	mov	r2, r0
 800494c:	7bbb      	ldrb	r3, [r7, #14]
 800494e:	3301      	adds	r3, #1
 8004950:	4413      	add	r3, r2
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	f003 0303 	and.w	r3, r3, #3
 8004958:	2b01      	cmp	r3, #1
 800495a:	d102      	bne.n	8004962 <case_insensitive_strcmp+0x86>
 800495c:	7bbb      	ldrb	r3, [r7, #14]
 800495e:	3320      	adds	r3, #32
 8004960:	e000      	b.n	8004964 <case_insensitive_strcmp+0x88>
 8004962:	7bbb      	ldrb	r3, [r7, #14]
 8004964:	429c      	cmp	r4, r3
 8004966:	d0cc      	beq.n	8004902 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	737b      	strb	r3, [r7, #13]
 800496e:	f002 fe35 	bl	80075dc <__locale_ctype_ptr>
 8004972:	4602      	mov	r2, r0
 8004974:	7b7b      	ldrb	r3, [r7, #13]
 8004976:	3301      	adds	r3, #1
 8004978:	4413      	add	r3, r2
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	f003 0303 	and.w	r3, r3, #3
 8004980:	2b01      	cmp	r3, #1
 8004982:	d103      	bne.n	800498c <case_insensitive_strcmp+0xb0>
 8004984:	7b7b      	ldrb	r3, [r7, #13]
 8004986:	f103 0420 	add.w	r4, r3, #32
 800498a:	e000      	b.n	800498e <case_insensitive_strcmp+0xb2>
 800498c:	7b7c      	ldrb	r4, [r7, #13]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	733b      	strb	r3, [r7, #12]
 8004994:	f002 fe22 	bl	80075dc <__locale_ctype_ptr>
 8004998:	4602      	mov	r2, r0
 800499a:	7b3b      	ldrb	r3, [r7, #12]
 800499c:	3301      	adds	r3, #1
 800499e:	4413      	add	r3, r2
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d102      	bne.n	80049b0 <case_insensitive_strcmp+0xd4>
 80049aa:	7b3b      	ldrb	r3, [r7, #12]
 80049ac:	3320      	adds	r3, #32
 80049ae:	e000      	b.n	80049b2 <case_insensitive_strcmp+0xd6>
 80049b0:	7b3b      	ldrb	r3, [r7, #12]
 80049b2:	1ae3      	subs	r3, r4, r3
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd90      	pop	{r4, r7, pc}

080049bc <Jstrdup>:

static internal_hooks default_hooks = { internal_malloc, internal_free, internal_realloc };
static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* Jstrdup(const unsigned char* string, const internal_hooks * const hooks)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 80049ca:	2300      	movs	r3, #0
 80049cc:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <Jstrdup+0x1c>
    {
        return NULL;
 80049d4:	2300      	movs	r3, #0
 80049d6:	e015      	b.n	8004a04 <Jstrdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7fb fbc3 	bl	8000164 <strlen>
 80049de:	4603      	mov	r3, r0
 80049e0:	3301      	adds	r3, #1
 80049e2:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	4798      	blx	r3
 80049ec:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <Jstrdup+0x3c>
    {
        return NULL;
 80049f4:	2300      	movs	r3, #0
 80049f6:	e005      	b.n	8004a04 <Jstrdup+0x48>
    }
    memcpy(copy, string, length);
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	68b8      	ldr	r0, [r7, #8]
 80049fe:	f002 fe1d 	bl	800763c <memcpy>

    return copy;
 8004a02:	68bb      	ldr	r3, [r7, #8]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <JFree>:
}

N_CJSON_PUBLIC(void *) JMalloc(size_t size) {
    return global_hooks.allocate(size);
}
N_CJSON_PUBLIC(void) JFree(void *p) {
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
    global_hooks.deallocate(p);
 8004a14:	4b03      	ldr	r3, [pc, #12]	; (8004a24 <JFree+0x18>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	4798      	blx	r3
}
 8004a1c:	bf00      	nop
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	20000058 	.word	0x20000058

08004a28 <JNew_Item>:

/* Internal constructor. */
static J *JNew_Item(const internal_hooks * const hooks)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
    J* node = (J*)hooks->allocate(sizeof(J));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2028      	movs	r0, #40	; 0x28
 8004a36:	4798      	blx	r3
 8004a38:	60f8      	str	r0, [r7, #12]
    if (node)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d004      	beq.n	8004a4a <JNew_Item+0x22>
    {
        memset(node, '\0', sizeof(J));
 8004a40:	2228      	movs	r2, #40	; 0x28
 8004a42:	2100      	movs	r1, #0
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f002 fe1d 	bl	8007684 <memset>
    }

    return node;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <JDelete>:

/* Delete a J structure. */
N_CJSON_PUBLIC(void) JDelete(J *item)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
    J *next = NULL;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8004a60:	e037      	b.n	8004ad2 <JDelete+0x7e>
    {
        next = item->next;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	60fb      	str	r3, [r7, #12]
        if (!(item->type & JIsReference) && (item->child != NULL))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d108      	bne.n	8004a86 <JDelete+0x32>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d004      	beq.n	8004a86 <JDelete+0x32>
        {
            JDelete(item->child);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7ff ffe7 	bl	8004a54 <JDelete>
        }
        if (!(item->type & JIsReference) && (item->valuestring != NULL))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d109      	bne.n	8004aa6 <JDelete+0x52>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d005      	beq.n	8004aa6 <JDelete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8004a9a:	4b11      	ldr	r3, [pc, #68]	; (8004ae0 <JDelete+0x8c>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6912      	ldr	r2, [r2, #16]
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	4798      	blx	r3
        }
        if (!(item->type & JStringIsConst) && (item->string != NULL))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d109      	bne.n	8004ac6 <JDelete+0x72>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d005      	beq.n	8004ac6 <JDelete+0x72>
        {
            global_hooks.deallocate(item->string);
 8004aba:	4b09      	ldr	r3, [pc, #36]	; (8004ae0 <JDelete+0x8c>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6a12      	ldr	r2, [r2, #32]
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8004ac6:	4b06      	ldr	r3, [pc, #24]	; (8004ae0 <JDelete+0x8c>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	4798      	blx	r3
        item = next;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1c4      	bne.n	8004a62 <JDelete+0xe>
    }
}
 8004ad8:	bf00      	nop
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	20000058 	.word	0x20000058

08004ae4 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8004ae8:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bc80      	pop	{r7}
 8004af0:	4770      	bx	lr
 8004af2:	0000      	movs	r0, r0
 8004af4:	0000      	movs	r0, r0
	...

08004af8 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static Jbool parse_number(J * const item, parse_buffer * const input_buffer)
{
 8004af8:	b590      	push	{r4, r7, lr}
 8004afa:	b099      	sub	sp, #100	; 0x64
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
    double number = 0;
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	f04f 0400 	mov.w	r4, #0
 8004b0a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8004b12:	f7ff ffe7 	bl	8004ae4 <get_decimal_point>
 8004b16:	4603      	mov	r3, r0
 8004b18:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <parse_number+0x36>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <parse_number+0x3a>
    {
        return false;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e104      	b.n	8004d3c <parse_number+0x244>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8004b32:	2300      	movs	r3, #0
 8004b34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b36:	e09f      	b.n	8004c78 <parse_number+0x180>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	6899      	ldr	r1, [r3, #8]
 8004b40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b42:	440b      	add	r3, r1
 8004b44:	4413      	add	r3, r2
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	3b2b      	subs	r3, #43	; 0x2b
 8004b4a:	2b3a      	cmp	r3, #58	; 0x3a
 8004b4c:	f200 80a4 	bhi.w	8004c98 <parse_number+0x1a0>
 8004b50:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <parse_number+0x60>)
 8004b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b56:	bf00      	nop
 8004b58:	08004c45 	.word	0x08004c45
 8004b5c:	08004c99 	.word	0x08004c99
 8004b60:	08004c45 	.word	0x08004c45
 8004b64:	08004c63 	.word	0x08004c63
 8004b68:	08004c99 	.word	0x08004c99
 8004b6c:	08004c45 	.word	0x08004c45
 8004b70:	08004c45 	.word	0x08004c45
 8004b74:	08004c45 	.word	0x08004c45
 8004b78:	08004c45 	.word	0x08004c45
 8004b7c:	08004c45 	.word	0x08004c45
 8004b80:	08004c45 	.word	0x08004c45
 8004b84:	08004c45 	.word	0x08004c45
 8004b88:	08004c45 	.word	0x08004c45
 8004b8c:	08004c45 	.word	0x08004c45
 8004b90:	08004c45 	.word	0x08004c45
 8004b94:	08004c99 	.word	0x08004c99
 8004b98:	08004c99 	.word	0x08004c99
 8004b9c:	08004c99 	.word	0x08004c99
 8004ba0:	08004c99 	.word	0x08004c99
 8004ba4:	08004c99 	.word	0x08004c99
 8004ba8:	08004c99 	.word	0x08004c99
 8004bac:	08004c99 	.word	0x08004c99
 8004bb0:	08004c99 	.word	0x08004c99
 8004bb4:	08004c99 	.word	0x08004c99
 8004bb8:	08004c99 	.word	0x08004c99
 8004bbc:	08004c99 	.word	0x08004c99
 8004bc0:	08004c45 	.word	0x08004c45
 8004bc4:	08004c99 	.word	0x08004c99
 8004bc8:	08004c99 	.word	0x08004c99
 8004bcc:	08004c99 	.word	0x08004c99
 8004bd0:	08004c99 	.word	0x08004c99
 8004bd4:	08004c99 	.word	0x08004c99
 8004bd8:	08004c99 	.word	0x08004c99
 8004bdc:	08004c99 	.word	0x08004c99
 8004be0:	08004c99 	.word	0x08004c99
 8004be4:	08004c99 	.word	0x08004c99
 8004be8:	08004c99 	.word	0x08004c99
 8004bec:	08004c99 	.word	0x08004c99
 8004bf0:	08004c99 	.word	0x08004c99
 8004bf4:	08004c99 	.word	0x08004c99
 8004bf8:	08004c99 	.word	0x08004c99
 8004bfc:	08004c99 	.word	0x08004c99
 8004c00:	08004c99 	.word	0x08004c99
 8004c04:	08004c99 	.word	0x08004c99
 8004c08:	08004c99 	.word	0x08004c99
 8004c0c:	08004c99 	.word	0x08004c99
 8004c10:	08004c99 	.word	0x08004c99
 8004c14:	08004c99 	.word	0x08004c99
 8004c18:	08004c99 	.word	0x08004c99
 8004c1c:	08004c99 	.word	0x08004c99
 8004c20:	08004c99 	.word	0x08004c99
 8004c24:	08004c99 	.word	0x08004c99
 8004c28:	08004c99 	.word	0x08004c99
 8004c2c:	08004c99 	.word	0x08004c99
 8004c30:	08004c99 	.word	0x08004c99
 8004c34:	08004c99 	.word	0x08004c99
 8004c38:	08004c99 	.word	0x08004c99
 8004c3c:	08004c99 	.word	0x08004c99
 8004c40:	08004c45 	.word	0x08004c45
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	6899      	ldr	r1, [r3, #8]
 8004c4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c4e:	440b      	add	r3, r1
 8004c50:	4413      	add	r3, r2
 8004c52:	7819      	ldrb	r1, [r3, #0]
 8004c54:	f107 0208 	add.w	r2, r7, #8
 8004c58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c5a:	4413      	add	r3, r2
 8004c5c:	460a      	mov	r2, r1
 8004c5e:	701a      	strb	r2, [r3, #0]
                break;
 8004c60:	e007      	b.n	8004c72 <parse_number+0x17a>

            case '.':
                number_c_string[i] = decimal_point;
 8004c62:	f107 0208 	add.w	r2, r7, #8
 8004c66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c68:	4413      	add	r3, r2
 8004c6a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004c6e:	701a      	strb	r2, [r3, #0]
                break;
 8004c70:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8004c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c74:	3301      	adds	r3, #1
 8004c76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c7a:	2b3e      	cmp	r3, #62	; 0x3e
 8004c7c:	d80e      	bhi.n	8004c9c <parse_number+0x1a4>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00b      	beq.n	8004c9c <parse_number+0x1a4>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c8a:	441a      	add	r2, r3
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	f4ff af51 	bcc.w	8004b38 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 8004c96:	e001      	b.n	8004c9c <parse_number+0x1a4>
                goto loop_end;
 8004c98:	bf00      	nop
 8004c9a:	e000      	b.n	8004c9e <parse_number+0x1a6>
loop_end:
 8004c9c:	bf00      	nop
    number_c_string[i] = '\0';
 8004c9e:	f107 0208 	add.w	r2, r7, #8
 8004ca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ca4:	4413      	add	r3, r2
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	701a      	strb	r2, [r3, #0]

    /* some platforms may not have locale support */
#if !MINIMIZE_CLIB_DEPENDENCIES
    number = strtod((const char*)number_c_string, (char**)&after_end);
#else
    number = JAtoN((const char*)number_c_string, (char**)&after_end);
 8004caa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004cae:	f107 0308 	add.w	r3, r7, #8
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7ff fcc3 	bl	8004640 <JAtoN>
 8004cba:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
#endif
    if (number_c_string == after_end)
 8004cbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cc0:	f107 0308 	add.w	r3, r7, #8
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d101      	bne.n	8004ccc <parse_number+0x1d4>
    {
        return false; /* parse_error */
 8004cc8:	2300      	movs	r3, #0
 8004cca:	e037      	b.n	8004d3c <parse_number+0x244>
    }

    item->valuedouble = number;
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8004cd2:	e9c2 3406 	strd	r3, r4, [r2, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8004cd6:	a31c      	add	r3, pc, #112	; (adr r3, 8004d48 <parse_number+0x250>)
 8004cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cdc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004ce0:	f7fb fe8a 	bl	80009f8 <__aeabi_dcmpge>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d004      	beq.n	8004cf4 <parse_number+0x1fc>
    {
        item->valueint = INT_MAX;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004cf0:	615a      	str	r2, [r3, #20]
 8004cf2:	e015      	b.n	8004d20 <parse_number+0x228>
    }
    else if (number <= INT_MIN)
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	4b15      	ldr	r3, [pc, #84]	; (8004d50 <parse_number+0x258>)
 8004cfa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004cfe:	f7fb fe71 	bl	80009e4 <__aeabi_dcmple>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d004      	beq.n	8004d12 <parse_number+0x21a>
    {
        item->valueint = INT_MIN;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d0e:	615a      	str	r2, [r3, #20]
 8004d10:	e006      	b.n	8004d20 <parse_number+0x228>
    }
    else
    {
        item->valueint = (int)number;
 8004d12:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004d16:	f7fb fe83 	bl	8000a20 <__aeabi_d2iz>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	615a      	str	r2, [r3, #20]
    }

    item->type = JNumber;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2208      	movs	r2, #8
 8004d24:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d2c:	4611      	mov	r1, r2
 8004d2e:	f107 0208 	add.w	r2, r7, #8
 8004d32:	1a8a      	subs	r2, r1, r2
 8004d34:	441a      	add	r2, r3
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	609a      	str	r2, [r3, #8]
    return true;
 8004d3a:	2301      	movs	r3, #1
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3764      	adds	r7, #100	; 0x64
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd90      	pop	{r4, r7, pc}
 8004d44:	f3af 8000 	nop.w
 8004d48:	ffc00000 	.word	0xffc00000
 8004d4c:	41dfffff 	.word	0x41dfffff
 8004d50:	c1e00000 	.word	0xc1e00000

08004d54 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 8004d62:	2300      	movs	r3, #0
 8004d64:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d003      	beq.n	8004d74 <ensure+0x20>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <ensure+0x24>
    {
        return NULL;
 8004d74:	2300      	movs	r3, #0
 8004d76:	e086      	b.n	8004e86 <ensure+0x132>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d007      	beq.n	8004d90 <ensure+0x3c>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d301      	bcc.n	8004d90 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	e07a      	b.n	8004e86 <ensure+0x132>
    }

    if (needed > INT_MAX)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	da01      	bge.n	8004d9a <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8004d96:	2300      	movs	r3, #0
 8004d98:	e075      	b.n	8004e86 <ensure+0x132>
    }

    needed += p->offset + 1;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689a      	ldr	r2, [r3, #8]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	4413      	add	r3, r2
 8004da2:	3301      	adds	r3, #1
 8004da4:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d805      	bhi.n	8004dbc <ensure+0x68>
    {
        return p->buffer + p->offset;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	4413      	add	r3, r2
 8004dba:	e064      	b.n	8004e86 <ensure+0x132>
    }

    if (p->noalloc) {
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <ensure+0x74>
        return NULL;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	e05e      	b.n	8004e86 <ensure+0x132>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dce:	d308      	bcc.n	8004de2 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	db03      	blt.n	8004dde <ensure+0x8a>
        {
            newsize = INT_MAX;
 8004dd6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004dda:	60bb      	str	r3, [r7, #8]
 8004ddc:	e004      	b.n	8004de8 <ensure+0x94>
        }
        else
        {
            return NULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	e051      	b.n	8004e86 <ensure+0x132>
        }
    }
    else
    {
        newsize = needed * 2;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d018      	beq.n	8004e22 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6812      	ldr	r2, [r2, #0]
 8004df8:	68b9      	ldr	r1, [r7, #8]
 8004dfa:	4610      	mov	r0, r2
 8004dfc:	4798      	blx	r3
 8004dfe:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d135      	bne.n	8004e72 <ensure+0x11e>
        {
            p->hooks.deallocate(p->buffer);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6812      	ldr	r2, [r2, #0]
 8004e0e:	4610      	mov	r0, r2
 8004e10:	4798      	blx	r3
            p->length = 0;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]

            return NULL;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	e031      	b.n	8004e86 <ensure+0x132>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	68b8      	ldr	r0, [r7, #8]
 8004e28:	4798      	blx	r3
 8004e2a:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10d      	bne.n	8004e4e <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6812      	ldr	r2, [r2, #0]
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	4798      	blx	r3
            p->length = 0;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	601a      	str	r2, [r3, #0]

            return NULL;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	e01b      	b.n	8004e86 <ensure+0x132>
        }
        if (newbuffer)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d008      	beq.n	8004e66 <ensure+0x112>
        {
            memcpy(newbuffer, p->buffer, p->offset + 1);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6819      	ldr	r1, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	461a      	mov	r2, r3
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f002 fbeb 	bl	800763c <memcpy>
        }
        p->hooks.deallocate(p->buffer);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	6812      	ldr	r2, [r2, #0]
 8004e6e:	4610      	mov	r0, r2
 8004e70:	4798      	blx	r3
    }
    p->length = newsize;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4413      	add	r3, r2
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8004e8e:	b590      	push	{r4, r7, lr}
 8004e90:	b085      	sub	sp, #20
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d013      	beq.n	8004ec8 <update_offset+0x3a>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00f      	beq.n	8004ec8 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689c      	ldr	r4, [r3, #8]
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f7fb f953 	bl	8000164 <strlen>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	18e2      	adds	r2, r4, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	609a      	str	r2, [r3, #8]
 8004ec6:	e000      	b.n	8004eca <update_offset+0x3c>
        return;
 8004ec8:	bf00      	nop
}
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd90      	pop	{r4, r7, pc}

08004ed0 <print_number>:

/* Render the number nicely from the given item into a string. */
static Jbool print_number(const J * const item, printbuffer * const output_buffer)
{
 8004ed0:	b590      	push	{r4, r7, lr}
 8004ed2:	b093      	sub	sp, #76	; 0x4c
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8004eda:	2300      	movs	r3, #0
 8004edc:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f103 0418 	add.w	r4, r3, #24
 8004ee4:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004ee8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    int length = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26]; /* temporary buffer to print the number into */
    unsigned char decimal_point = get_decimal_point();
 8004ef4:	f7ff fdf6 	bl	8004ae4 <get_decimal_point>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (output_buffer == NULL)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <print_number+0x38>
    {
        return false;
 8004f04:	2300      	movs	r3, #0
 8004f06:	e074      	b.n	8004ff2 <print_number+0x122>
    }

    /* This checks for NaN and Infinity */
    if ((d * 0) != 0)
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	f04f 0300 	mov.w	r3, #0
 8004f10:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004f14:	f7fb faea 	bl	80004ec <__aeabi_dmul>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	4621      	mov	r1, r4
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	f7fb fd48 	bl	80009bc <__aeabi_dcmpeq>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10e      	bne.n	8004f50 <print_number+0x80>
    {
        char *nbuf = (char *) number_buffer;
 8004f32:	f107 0308 	add.w	r3, r7, #8
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24
        strcpy(nbuf, "null");
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	4a30      	ldr	r2, [pc, #192]	; (8004ffc <print_number+0x12c>)
 8004f3c:	6810      	ldr	r0, [r2, #0]
 8004f3e:	6018      	str	r0, [r3, #0]
 8004f40:	7912      	ldrb	r2, [r2, #4]
 8004f42:	711a      	strb	r2, [r3, #4]
        length = strlen(nbuf);
 8004f44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f46:	f7fb f90d 	bl	8000164 <strlen>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f4e:	e00e      	b.n	8004f6e <print_number+0x9e>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
        }
#else
        char *nbuf = (char *) number_buffer;
 8004f50:	f107 0308 	add.w	r3, r7, #8
 8004f54:	62bb      	str	r3, [r7, #40]	; 0x28
        JNtoA(d, nbuf, -1);
 8004f56:	f04f 33ff 	mov.w	r3, #4294967295
 8004f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f5c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004f60:	f001 fd8e 	bl	8006a80 <JNtoA>
        length = strlen(nbuf);
 8004f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f66:	f7fb f8fd 	bl	8000164 <strlen>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	647b      	str	r3, [r7, #68]	; 0x44
#endif
    }

    /* conversion failed or buffer overrun occured */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8004f6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	db02      	blt.n	8004f7a <print_number+0xaa>
 8004f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f76:	2b19      	cmp	r3, #25
 8004f78:	dd01      	ble.n	8004f7e <print_number+0xae>
    {
        return false;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	e039      	b.n	8004ff2 <print_number+0x122>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8004f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f80:	3301      	adds	r3, #1
 8004f82:	4619      	mov	r1, r3
 8004f84:	6838      	ldr	r0, [r7, #0]
 8004f86:	f7ff fee5 	bl	8004d54 <ensure>
 8004f8a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 8004f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <print_number+0xc6>
    {
        return false;
 8004f92:	2300      	movs	r3, #0
 8004f94:	e02d      	b.n	8004ff2 <print_number+0x122>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8004f96:	2300      	movs	r3, #0
 8004f98:	643b      	str	r3, [r7, #64]	; 0x40
 8004f9a:	e01a      	b.n	8004fd2 <print_number+0x102>
    {
        if (number_buffer[i] == decimal_point)
 8004f9c:	f107 0208 	add.w	r2, r7, #8
 8004fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fa2:	4413      	add	r3, r2
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d105      	bne.n	8004fba <print_number+0xea>
        {
            output_pointer[i] = '.';
 8004fae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fb2:	4413      	add	r3, r2
 8004fb4:	222e      	movs	r2, #46	; 0x2e
 8004fb6:	701a      	strb	r2, [r3, #0]
            continue;
 8004fb8:	e008      	b.n	8004fcc <print_number+0xfc>
        }

        output_pointer[i] = number_buffer[i];
 8004fba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f107 0108 	add.w	r1, r7, #8
 8004fc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fc6:	440a      	add	r2, r1
 8004fc8:	7812      	ldrb	r2, [r2, #0]
 8004fca:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8004fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fce:	3301      	adds	r3, #1
 8004fd0:	643b      	str	r3, [r7, #64]	; 0x40
 8004fd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d3e0      	bcc.n	8004f9c <print_number+0xcc>
    }
    output_pointer[i] = '\0';
 8004fda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fde:	4413      	add	r3, r2
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fea:	441a      	add	r2, r3
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	609a      	str	r2, [r3, #8]

    return true;
 8004ff0:	2301      	movs	r3, #1
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	374c      	adds	r7, #76	; 0x4c
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd90      	pop	{r4, r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	08007ff0 	.word	0x08007ff0

08005000 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 800500c:	2300      	movs	r3, #0
 800500e:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8005010:	2300      	movs	r3, #0
 8005012:	60bb      	str	r3, [r7, #8]
 8005014:	e04c      	b.n	80050b0 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	4413      	add	r3, r2
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b2f      	cmp	r3, #47	; 0x2f
 8005020:	d90f      	bls.n	8005042 <parse_hex4+0x42>
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	4413      	add	r3, r2
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	2b39      	cmp	r3, #57	; 0x39
 800502c:	d809      	bhi.n	8005042 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	4413      	add	r3, r2
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	461a      	mov	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4413      	add	r3, r2
 800503c:	3b30      	subs	r3, #48	; 0x30
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	e02d      	b.n	800509e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	4413      	add	r3, r2
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	2b40      	cmp	r3, #64	; 0x40
 800504c:	d90f      	bls.n	800506e <parse_hex4+0x6e>
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	4413      	add	r3, r2
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2b46      	cmp	r3, #70	; 0x46
 8005058:	d809      	bhi.n	800506e <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	4413      	add	r3, r2
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	461a      	mov	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4413      	add	r3, r2
 8005068:	3b37      	subs	r3, #55	; 0x37
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	e017      	b.n	800509e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4413      	add	r3, r2
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b60      	cmp	r3, #96	; 0x60
 8005078:	d90f      	bls.n	800509a <parse_hex4+0x9a>
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4413      	add	r3, r2
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	2b66      	cmp	r3, #102	; 0x66
 8005084:	d809      	bhi.n	800509a <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	4413      	add	r3, r2
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4413      	add	r3, r2
 8005094:	3b57      	subs	r3, #87	; 0x57
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	e001      	b.n	800509e <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800509a:	2300      	movs	r3, #0
 800509c:	e00c      	b.n	80050b8 <parse_hex4+0xb8>
        }

        if (i < 3)
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d802      	bhi.n	80050aa <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	011b      	lsls	r3, r3, #4
 80050a8:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	3301      	adds	r3, #1
 80050ae:	60bb      	str	r3, [r7, #8]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	2b03      	cmp	r3, #3
 80050b4:	d9af      	bls.n	8005016 <parse_hex4+0x16>
        }
    }

    return h;
 80050b6:	68fb      	ldr	r3, [r7, #12]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	bc80      	pop	{r7}
 80050c0:	4770      	bx	lr
	...

080050c4 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b08a      	sub	sp, #40	; 0x28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 80050d0:	2300      	movs	r3, #0
 80050d2:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 80050d4:	2300      	movs	r3, #0
 80050d6:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 80050e2:	2300      	movs	r3, #0
 80050e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 80050e8:	2300      	movs	r3, #0
 80050ea:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 80050ee:	2300      	movs	r3, #0
 80050f0:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b05      	cmp	r3, #5
 80050fc:	f340 80b7 	ble.w	800526e <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	3302      	adds	r3, #2
 8005104:	4618      	mov	r0, r3
 8005106:	f7ff ff7b 	bl	8005000 <parse_hex4>
 800510a:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8005112:	d304      	bcc.n	800511e <utf16_literal_to_utf8+0x5a>
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800511a:	f0c0 80aa 	bcc.w	8005272 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8005124:	d337      	bcc.n	8005196 <utf16_literal_to_utf8+0xd2>
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800512c:	d233      	bcs.n	8005196 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	3306      	adds	r3, #6
 8005132:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8005134:	2300      	movs	r3, #0
 8005136:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8005138:	230c      	movs	r3, #12
 800513a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b05      	cmp	r3, #5
 8005146:	f340 8096 	ble.w	8005276 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	2b5c      	cmp	r3, #92	; 0x5c
 8005150:	f040 8093 	bne.w	800527a <utf16_literal_to_utf8+0x1b6>
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	3301      	adds	r3, #1
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	2b75      	cmp	r3, #117	; 0x75
 800515c:	f040 808d 	bne.w	800527a <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	3302      	adds	r3, #2
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff ff4b 	bl	8005000 <parse_hex4>
 800516a:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8005172:	f0c0 8082 	bcc.w	800527a <utf16_literal_to_utf8+0x1b6>
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800517c:	d27d      	bcs.n	800527a <utf16_literal_to_utf8+0x1b6>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	029a      	lsls	r2, r3, #10
 8005182:	4b42      	ldr	r3, [pc, #264]	; (800528c <utf16_literal_to_utf8+0x1c8>)
 8005184:	4013      	ands	r3, r2
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800518c:	4313      	orrs	r3, r2
 800518e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8005194:	e004      	b.n	80051a0 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8005196:	2306      	movs	r3, #6
 8005198:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	2b7f      	cmp	r3, #127	; 0x7f
 80051a4:	d803      	bhi.n	80051ae <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 80051a6:	2301      	movs	r3, #1
 80051a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ac:	e01f      	b.n	80051ee <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051b4:	d206      	bcs.n	80051c4 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 80051b6:	2302      	movs	r3, #2
 80051b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 80051bc:	23c0      	movs	r3, #192	; 0xc0
 80051be:	f887 3020 	strb.w	r3, [r7, #32]
 80051c2:	e014      	b.n	80051ee <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ca:	d206      	bcs.n	80051da <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 80051cc:	2303      	movs	r3, #3
 80051ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 80051d2:	23e0      	movs	r3, #224	; 0xe0
 80051d4:	f887 3020 	strb.w	r3, [r7, #32]
 80051d8:	e009      	b.n	80051ee <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80051e0:	d24d      	bcs.n	800527e <utf16_literal_to_utf8+0x1ba>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80051e2:	2304      	movs	r3, #4
 80051e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80051e8:	23f0      	movs	r3, #240	; 0xf0
 80051ea:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80051ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051f2:	3b01      	subs	r3, #1
 80051f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80051f8:	e015      	b.n	8005226 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005202:	b2da      	uxtb	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6819      	ldr	r1, [r3, #0]
 8005208:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800520c:	440b      	add	r3, r1
 800520e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	099b      	lsrs	r3, r3, #6
 800521a:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800521c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005220:	3b01      	subs	r3, #1
 8005222:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005226:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1e5      	bne.n	80051fa <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800522e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005232:	2b01      	cmp	r3, #1
 8005234:	d909      	bls.n	800524a <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	b2d9      	uxtb	r1, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005242:	430a      	orrs	r2, r1
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	701a      	strb	r2, [r3, #0]
 8005248:	e007      	b.n	800525a <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	b2da      	uxtb	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005256:	b2d2      	uxtb	r2, r2
 8005258:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005262:	441a      	add	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8005268:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800526c:	e009      	b.n	8005282 <utf16_literal_to_utf8+0x1be>
        goto fail;
 800526e:	bf00      	nop
 8005270:	e006      	b.n	8005280 <utf16_literal_to_utf8+0x1bc>
        goto fail;
 8005272:	bf00      	nop
 8005274:	e004      	b.n	8005280 <utf16_literal_to_utf8+0x1bc>
            goto fail;
 8005276:	bf00      	nop
 8005278:	e002      	b.n	8005280 <utf16_literal_to_utf8+0x1bc>

fail:
 800527a:	bf00      	nop
 800527c:	e000      	b.n	8005280 <utf16_literal_to_utf8+0x1bc>
        goto fail;
 800527e:	bf00      	nop
    return 0;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3728      	adds	r7, #40	; 0x28
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	000ffc00 	.word	0x000ffc00

08005290 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static Jbool parse_string(J * const item, parse_buffer * const input_buffer)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b08a      	sub	sp, #40	; 0x28
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	3301      	adds	r3, #1
 80052a4:	4413      	add	r3, r2
 80052a6:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	3301      	adds	r3, #1
 80052b2:	4413      	add	r3, r2
 80052b4:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 80052b6:	2300      	movs	r3, #0
 80052b8:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 80052ba:	2300      	movs	r3, #0
 80052bc:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	4413      	add	r3, r2
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	2b22      	cmp	r3, #34	; 0x22
 80052cc:	f040 816c 	bne.w	80055a8 <parse_string+0x318>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 80052d0:	2300      	movs	r3, #0
 80052d2:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 80052d4:	2300      	movs	r3, #0
 80052d6:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80052d8:	e018      	b.n	800530c <parse_string+0x7c>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	2b5c      	cmp	r3, #92	; 0x5c
 80052e0:	d111      	bne.n	8005306 <parse_string+0x76>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	3301      	adds	r3, #1
 80052e6:	461a      	mov	r2, r3
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	461a      	mov	r2, r3
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	f080 8159 	bcs.w	80055ac <parse_string+0x31c>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	3301      	adds	r3, #1
 80052fe:	61bb      	str	r3, [r7, #24]
                input_end++;
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	3301      	adds	r3, #1
 8005304:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	3301      	adds	r3, #1
 800530a:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	6812      	ldr	r2, [r2, #0]
 8005312:	1a9b      	subs	r3, r3, r2
 8005314:	461a      	mov	r2, r3
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	429a      	cmp	r2, r3
 800531c:	d203      	bcs.n	8005326 <parse_string+0x96>
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b22      	cmp	r3, #34	; 0x22
 8005324:	d1d9      	bne.n	80052da <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	6812      	ldr	r2, [r2, #0]
 800532c:	1a9b      	subs	r3, r3, r2
 800532e:	461a      	mov	r2, r3
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	429a      	cmp	r2, r3
 8005336:	f080 813b 	bcs.w	80055b0 <parse_string+0x320>
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	2b22      	cmp	r3, #34	; 0x22
 8005340:	f040 8136 	bne.w	80055b0 <parse_string+0x320>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	6811      	ldr	r1, [r2, #0]
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	6892      	ldr	r2, [r2, #8]
 800534e:	440a      	add	r2, r1
 8005350:	1a9b      	subs	r3, r3, r2
 8005352:	461a      	mov	r2, r3
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	3201      	adds	r2, #1
 8005362:	4610      	mov	r0, r2
 8005364:	4798      	blx	r3
 8005366:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 8122 	beq.w	80055b4 <parse_string+0x324>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8005374:	e0fc      	b.n	8005570 <parse_string+0x2e0>
    {
        if (*input_pointer != '\\')
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	2b5c      	cmp	r3, #92	; 0x5c
 800537c:	d008      	beq.n	8005390 <parse_string+0x100>
        {
            *output_pointer++ = *input_pointer++;
 800537e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005380:	1c53      	adds	r3, r2, #1
 8005382:	627b      	str	r3, [r7, #36]	; 0x24
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	1c59      	adds	r1, r3, #1
 8005388:	60f9      	str	r1, [r7, #12]
 800538a:	7812      	ldrb	r2, [r2, #0]
 800538c:	701a      	strb	r2, [r3, #0]
 800538e:	e0ef      	b.n	8005570 <parse_string+0x2e0>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8005390:	2302      	movs	r3, #2
 8005392:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8005394:	6a3a      	ldr	r2, [r7, #32]
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	f340 810c 	ble.w	80055b8 <parse_string+0x328>
            {
                goto fail;
            }

            switch (input_pointer[1])
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	3301      	adds	r3, #1
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	3b22      	subs	r3, #34	; 0x22
 80053a8:	2b53      	cmp	r3, #83	; 0x53
 80053aa:	f200 8107 	bhi.w	80055bc <parse_string+0x32c>
 80053ae:	a201      	add	r2, pc, #4	; (adr r2, 80053b4 <parse_string+0x124>)
 80053b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b4:	08005541 	.word	0x08005541
 80053b8:	080055bd 	.word	0x080055bd
 80053bc:	080055bd 	.word	0x080055bd
 80053c0:	080055bd 	.word	0x080055bd
 80053c4:	080055bd 	.word	0x080055bd
 80053c8:	080055bd 	.word	0x080055bd
 80053cc:	080055bd 	.word	0x080055bd
 80053d0:	080055bd 	.word	0x080055bd
 80053d4:	080055bd 	.word	0x080055bd
 80053d8:	080055bd 	.word	0x080055bd
 80053dc:	080055bd 	.word	0x080055bd
 80053e0:	080055bd 	.word	0x080055bd
 80053e4:	080055bd 	.word	0x080055bd
 80053e8:	08005541 	.word	0x08005541
 80053ec:	080055bd 	.word	0x080055bd
 80053f0:	080055bd 	.word	0x080055bd
 80053f4:	080055bd 	.word	0x080055bd
 80053f8:	080055bd 	.word	0x080055bd
 80053fc:	080055bd 	.word	0x080055bd
 8005400:	080055bd 	.word	0x080055bd
 8005404:	080055bd 	.word	0x080055bd
 8005408:	080055bd 	.word	0x080055bd
 800540c:	080055bd 	.word	0x080055bd
 8005410:	080055bd 	.word	0x080055bd
 8005414:	080055bd 	.word	0x080055bd
 8005418:	080055bd 	.word	0x080055bd
 800541c:	080055bd 	.word	0x080055bd
 8005420:	080055bd 	.word	0x080055bd
 8005424:	080055bd 	.word	0x080055bd
 8005428:	080055bd 	.word	0x080055bd
 800542c:	080055bd 	.word	0x080055bd
 8005430:	080055bd 	.word	0x080055bd
 8005434:	080055bd 	.word	0x080055bd
 8005438:	080055bd 	.word	0x080055bd
 800543c:	080055bd 	.word	0x080055bd
 8005440:	080055bd 	.word	0x080055bd
 8005444:	080055bd 	.word	0x080055bd
 8005448:	080055bd 	.word	0x080055bd
 800544c:	080055bd 	.word	0x080055bd
 8005450:	080055bd 	.word	0x080055bd
 8005454:	080055bd 	.word	0x080055bd
 8005458:	080055bd 	.word	0x080055bd
 800545c:	080055bd 	.word	0x080055bd
 8005460:	080055bd 	.word	0x080055bd
 8005464:	080055bd 	.word	0x080055bd
 8005468:	080055bd 	.word	0x080055bd
 800546c:	080055bd 	.word	0x080055bd
 8005470:	080055bd 	.word	0x080055bd
 8005474:	080055bd 	.word	0x080055bd
 8005478:	080055bd 	.word	0x080055bd
 800547c:	080055bd 	.word	0x080055bd
 8005480:	080055bd 	.word	0x080055bd
 8005484:	080055bd 	.word	0x080055bd
 8005488:	080055bd 	.word	0x080055bd
 800548c:	080055bd 	.word	0x080055bd
 8005490:	080055bd 	.word	0x080055bd
 8005494:	080055bd 	.word	0x080055bd
 8005498:	080055bd 	.word	0x080055bd
 800549c:	08005541 	.word	0x08005541
 80054a0:	080055bd 	.word	0x080055bd
 80054a4:	080055bd 	.word	0x080055bd
 80054a8:	080055bd 	.word	0x080055bd
 80054ac:	080055bd 	.word	0x080055bd
 80054b0:	080055bd 	.word	0x080055bd
 80054b4:	08005505 	.word	0x08005505
 80054b8:	080055bd 	.word	0x080055bd
 80054bc:	080055bd 	.word	0x080055bd
 80054c0:	080055bd 	.word	0x080055bd
 80054c4:	08005511 	.word	0x08005511
 80054c8:	080055bd 	.word	0x080055bd
 80054cc:	080055bd 	.word	0x080055bd
 80054d0:	080055bd 	.word	0x080055bd
 80054d4:	080055bd 	.word	0x080055bd
 80054d8:	080055bd 	.word	0x080055bd
 80054dc:	080055bd 	.word	0x080055bd
 80054e0:	080055bd 	.word	0x080055bd
 80054e4:	0800551d 	.word	0x0800551d
 80054e8:	080055bd 	.word	0x080055bd
 80054ec:	080055bd 	.word	0x080055bd
 80054f0:	080055bd 	.word	0x080055bd
 80054f4:	08005529 	.word	0x08005529
 80054f8:	080055bd 	.word	0x080055bd
 80054fc:	08005535 	.word	0x08005535
 8005500:	0800554f 	.word	0x0800554f
            {
                case 'b':
                    *output_pointer++ = '\b';
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	60fa      	str	r2, [r7, #12]
 800550a:	2208      	movs	r2, #8
 800550c:	701a      	strb	r2, [r3, #0]
                    break;
 800550e:	e02b      	b.n	8005568 <parse_string+0x2d8>
                case 'f':
                    *output_pointer++ = '\f';
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	60fa      	str	r2, [r7, #12]
 8005516:	220c      	movs	r2, #12
 8005518:	701a      	strb	r2, [r3, #0]
                    break;
 800551a:	e025      	b.n	8005568 <parse_string+0x2d8>
                case 'n':
                    *output_pointer++ = '\n';
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	1c5a      	adds	r2, r3, #1
 8005520:	60fa      	str	r2, [r7, #12]
 8005522:	220a      	movs	r2, #10
 8005524:	701a      	strb	r2, [r3, #0]
                    break;
 8005526:	e01f      	b.n	8005568 <parse_string+0x2d8>
                case 'r':
                    *output_pointer++ = '\r';
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	60fa      	str	r2, [r7, #12]
 800552e:	220d      	movs	r2, #13
 8005530:	701a      	strb	r2, [r3, #0]
                    break;
 8005532:	e019      	b.n	8005568 <parse_string+0x2d8>
                case 't':
                    *output_pointer++ = '\t';
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	60fa      	str	r2, [r7, #12]
 800553a:	2209      	movs	r2, #9
 800553c:	701a      	strb	r2, [r3, #0]
                    break;
 800553e:	e013      	b.n	8005568 <parse_string+0x2d8>
                case '\"':
                case '\\':
                case '/':
                    *output_pointer++ = input_pointer[1];
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	1c5a      	adds	r2, r3, #1
 8005544:	60fa      	str	r2, [r7, #12]
 8005546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005548:	7852      	ldrb	r2, [r2, #1]
 800554a:	701a      	strb	r2, [r3, #0]
                    break;
 800554c:	e00c      	b.n	8005568 <parse_string+0x2d8>

                /* UTF-16 literal */
                case 'u':
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 800554e:	f107 030c 	add.w	r3, r7, #12
 8005552:	461a      	mov	r2, r3
 8005554:	6a39      	ldr	r1, [r7, #32]
 8005556:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005558:	f7ff fdb4 	bl	80050c4 <utf16_literal_to_utf8>
 800555c:	4603      	mov	r3, r0
 800555e:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8005560:	7dfb      	ldrb	r3, [r7, #23]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d02c      	beq.n	80055c0 <parse_string+0x330>
                    {
                        /* failed to convert UTF16-literal to UTF-8 */
                        goto fail;
                    }
                    break;
 8005566:	bf00      	nop

                default:
                    goto fail;
            }
            input_pointer += sequence_length;
 8005568:	7dfb      	ldrb	r3, [r7, #23]
 800556a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800556c:	4413      	add	r3, r2
 800556e:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8005570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	429a      	cmp	r2, r3
 8005576:	f4ff aefe 	bcc.w	8005376 <parse_string+0xe6>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	701a      	strb	r2, [r3, #0]

    item->type = JString;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2210      	movs	r2, #16
 8005584:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69fa      	ldr	r2, [r7, #28]
 800558a:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	6812      	ldr	r2, [r2, #0]
 8005592:	1a9b      	subs	r3, r3, r2
 8005594:	461a      	mov	r2, r3
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	1c5a      	adds	r2, r3, #1
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	609a      	str	r2, [r3, #8]

    return true;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e01e      	b.n	80055e6 <parse_string+0x356>
        goto fail;
 80055a8:	bf00      	nop
 80055aa:	e00a      	b.n	80055c2 <parse_string+0x332>
                    goto fail;
 80055ac:	bf00      	nop
 80055ae:	e008      	b.n	80055c2 <parse_string+0x332>

fail:
 80055b0:	bf00      	nop
 80055b2:	e006      	b.n	80055c2 <parse_string+0x332>
            goto fail; /* allocation failure */
 80055b4:	bf00      	nop
 80055b6:	e004      	b.n	80055c2 <parse_string+0x332>
                goto fail;
 80055b8:	bf00      	nop
 80055ba:	e002      	b.n	80055c2 <parse_string+0x332>
                    goto fail;
 80055bc:	bf00      	nop
 80055be:	e000      	b.n	80055c2 <parse_string+0x332>
                        goto fail;
 80055c0:	bf00      	nop
    if (output != NULL)
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <parse_string+0x340>
    {
        input_buffer->hooks.deallocate(output);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	69f8      	ldr	r0, [r7, #28]
 80055ce:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d006      	beq.n	80055e4 <parse_string+0x354>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	6812      	ldr	r2, [r2, #0]
 80055dc:	1a9b      	subs	r3, r3, r2
 80055de:	461a      	mov	r2, r3
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	609a      	str	r2, [r3, #8]
    }

    return false;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3728      	adds	r7, #40	; 0x28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop

080055f0 <htoa16>:

/* Convert a 16-bit number to 4 hex digits, null-terminating it */
void htoa16(uint16_t n, unsigned char *p)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	4603      	mov	r3, r0
 80055f8:	6039      	str	r1, [r7, #0]
 80055fa:	80fb      	strh	r3, [r7, #6]
    int i;
    for (i=0; i<4; i++)
 80055fc:	2300      	movs	r3, #0
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	e01c      	b.n	800563c <htoa16+0x4c>
    {
        uint16_t nibble = (n >> 12) & 0xff;
 8005602:	88fb      	ldrh	r3, [r7, #6]
 8005604:	0b1b      	lsrs	r3, r3, #12
 8005606:	817b      	strh	r3, [r7, #10]
        n = n << 4;
 8005608:	88fb      	ldrh	r3, [r7, #6]
 800560a:	011b      	lsls	r3, r3, #4
 800560c:	80fb      	strh	r3, [r7, #6]
        if (nibble >= 10)
 800560e:	897b      	ldrh	r3, [r7, #10]
 8005610:	2b09      	cmp	r3, #9
 8005612:	d908      	bls.n	8005626 <htoa16+0x36>
            *p++ = 'A' + (nibble-10);
 8005614:	897b      	ldrh	r3, [r7, #10]
 8005616:	b2da      	uxtb	r2, r3
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	1c59      	adds	r1, r3, #1
 800561c:	6039      	str	r1, [r7, #0]
 800561e:	3237      	adds	r2, #55	; 0x37
 8005620:	b2d2      	uxtb	r2, r2
 8005622:	701a      	strb	r2, [r3, #0]
 8005624:	e007      	b.n	8005636 <htoa16+0x46>
        else
            *p++ = '0' + nibble;
 8005626:	897b      	ldrh	r3, [r7, #10]
 8005628:	b2da      	uxtb	r2, r3
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	1c59      	adds	r1, r3, #1
 800562e:	6039      	str	r1, [r7, #0]
 8005630:	3230      	adds	r2, #48	; 0x30
 8005632:	b2d2      	uxtb	r2, r2
 8005634:	701a      	strb	r2, [r3, #0]
    for (i=0; i<4; i++)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	3301      	adds	r3, #1
 800563a:	60fb      	str	r3, [r7, #12]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2b03      	cmp	r3, #3
 8005640:	dddf      	ble.n	8005602 <htoa16+0x12>
    }
    *p = '\0';
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2200      	movs	r2, #0
 8005646:	701a      	strb	r2, [r3, #0]
}
 8005648:	bf00      	nop
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	bc80      	pop	{r7}
 8005650:	4770      	bx	lr
	...

08005654 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static Jbool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 800565e:	2300      	movs	r3, #0
 8005660:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8005662:	2300      	movs	r3, #0
 8005664:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8005666:	2300      	movs	r3, #0
 8005668:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 800566a:	2300      	movs	r3, #0
 800566c:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 800566e:	2300      	movs	r3, #0
 8005670:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <print_string_ptr+0x28>
    {
        return false;
 8005678:	2300      	movs	r3, #0
 800567a:	e0dc      	b.n	8005836 <print_string_ptr+0x1e2>
    }

    /* empty string */
    if (input == NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d111      	bne.n	80056a6 <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8005682:	2103      	movs	r1, #3
 8005684:	6838      	ldr	r0, [r7, #0]
 8005686:	f7ff fb65 	bl	8004d54 <ensure>
 800568a:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <print_string_ptr+0x42>
        {
            return false;
 8005692:	2300      	movs	r3, #0
 8005694:	e0cf      	b.n	8005836 <print_string_ptr+0x1e2>
        }
        strcpy((char*)output, "\"\"");
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	4a69      	ldr	r2, [pc, #420]	; (8005840 <print_string_ptr+0x1ec>)
 800569a:	8811      	ldrh	r1, [r2, #0]
 800569c:	7892      	ldrb	r2, [r2, #2]
 800569e:	8019      	strh	r1, [r3, #0]
 80056a0:	709a      	strb	r2, [r3, #2]

        return true;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e0c7      	b.n	8005836 <print_string_ptr+0x1e2>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	61fb      	str	r3, [r7, #28]
 80056aa:	e01c      	b.n	80056e6 <print_string_ptr+0x92>
    {
        switch (*input_pointer)
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	2b0d      	cmp	r3, #13
 80056b2:	dc05      	bgt.n	80056c0 <print_string_ptr+0x6c>
 80056b4:	2b0c      	cmp	r3, #12
 80056b6:	da07      	bge.n	80056c8 <print_string_ptr+0x74>
 80056b8:	3b08      	subs	r3, #8
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d808      	bhi.n	80056d0 <print_string_ptr+0x7c>
 80056be:	e003      	b.n	80056c8 <print_string_ptr+0x74>
 80056c0:	2b22      	cmp	r3, #34	; 0x22
 80056c2:	d001      	beq.n	80056c8 <print_string_ptr+0x74>
 80056c4:	2b5c      	cmp	r3, #92	; 0x5c
 80056c6:	d103      	bne.n	80056d0 <print_string_ptr+0x7c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	3301      	adds	r3, #1
 80056cc:	617b      	str	r3, [r7, #20]
                break;
 80056ce:	e007      	b.n	80056e0 <print_string_ptr+0x8c>
            default:
                if (*input_pointer < 32)
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b1f      	cmp	r3, #31
 80056d6:	d802      	bhi.n	80056de <print_string_ptr+0x8a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	3305      	adds	r3, #5
 80056dc:	617b      	str	r3, [r7, #20]
                }
                break;
 80056de:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	3301      	adds	r3, #1
 80056e4:	61fb      	str	r3, [r7, #28]
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1de      	bne.n	80056ac <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 80056ee:	69fa      	ldr	r2, [r7, #28]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	461a      	mov	r2, r3
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	4413      	add	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3303      	adds	r3, #3
 8005700:	4619      	mov	r1, r3
 8005702:	6838      	ldr	r0, [r7, #0]
 8005704:	f7ff fb26 	bl	8004d54 <ensure>
 8005708:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <print_string_ptr+0xc0>
    {
        return false;
 8005710:	2300      	movs	r3, #0
 8005712:	e090      	b.n	8005836 <print_string_ptr+0x1e2>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d117      	bne.n	800574a <print_string_ptr+0xf6>
    {
        output[0] = '\"';
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	2222      	movs	r2, #34	; 0x22
 800571e:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	3301      	adds	r3, #1
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	6879      	ldr	r1, [r7, #4]
 8005728:	4618      	mov	r0, r3
 800572a:	f001 ff87 	bl	800763c <memcpy>
        output[output_length + 1] = '\"';
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	3301      	adds	r3, #1
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	4413      	add	r3, r2
 8005736:	2222      	movs	r2, #34	; 0x22
 8005738:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	3302      	adds	r3, #2
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	4413      	add	r3, r2
 8005742:	2200      	movs	r2, #0
 8005744:	701a      	strb	r2, [r3, #0]

        return true;
 8005746:	2301      	movs	r3, #1
 8005748:	e075      	b.n	8005836 <print_string_ptr+0x1e2>
    }

    output[0] = '\"';
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	2222      	movs	r2, #34	; 0x22
 800574e:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	3301      	adds	r3, #1
 8005754:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	61fb      	str	r3, [r7, #28]
 800575a:	e05b      	b.n	8005814 <print_string_ptr+0x1c0>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	2b1f      	cmp	r3, #31
 8005762:	d90c      	bls.n	800577e <print_string_ptr+0x12a>
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b22      	cmp	r3, #34	; 0x22
 800576a:	d008      	beq.n	800577e <print_string_ptr+0x12a>
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	2b5c      	cmp	r3, #92	; 0x5c
 8005772:	d004      	beq.n	800577e <print_string_ptr+0x12a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	781a      	ldrb	r2, [r3, #0]
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	701a      	strb	r2, [r3, #0]
 800577c:	e044      	b.n	8005808 <print_string_ptr+0x1b4>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	61ba      	str	r2, [r7, #24]
 8005784:	225c      	movs	r2, #92	; 0x5c
 8005786:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b0c      	cmp	r3, #12
 800578e:	d01b      	beq.n	80057c8 <print_string_ptr+0x174>
 8005790:	2b0c      	cmp	r3, #12
 8005792:	dc06      	bgt.n	80057a2 <print_string_ptr+0x14e>
 8005794:	2b09      	cmp	r3, #9
 8005796:	d023      	beq.n	80057e0 <print_string_ptr+0x18c>
 8005798:	2b0a      	cmp	r3, #10
 800579a:	d019      	beq.n	80057d0 <print_string_ptr+0x17c>
 800579c:	2b08      	cmp	r3, #8
 800579e:	d00f      	beq.n	80057c0 <print_string_ptr+0x16c>
 80057a0:	e022      	b.n	80057e8 <print_string_ptr+0x194>
 80057a2:	2b22      	cmp	r3, #34	; 0x22
 80057a4:	d008      	beq.n	80057b8 <print_string_ptr+0x164>
 80057a6:	2b5c      	cmp	r3, #92	; 0x5c
 80057a8:	d002      	beq.n	80057b0 <print_string_ptr+0x15c>
 80057aa:	2b0d      	cmp	r3, #13
 80057ac:	d014      	beq.n	80057d8 <print_string_ptr+0x184>
 80057ae:	e01b      	b.n	80057e8 <print_string_ptr+0x194>
            {
                case '\\':
                    *output_pointer = '\\';
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	225c      	movs	r2, #92	; 0x5c
 80057b4:	701a      	strb	r2, [r3, #0]
                    break;
 80057b6:	e027      	b.n	8005808 <print_string_ptr+0x1b4>
                case '\"':
                    *output_pointer = '\"';
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	2222      	movs	r2, #34	; 0x22
 80057bc:	701a      	strb	r2, [r3, #0]
                    break;
 80057be:	e023      	b.n	8005808 <print_string_ptr+0x1b4>
                case '\b':
                    *output_pointer = 'b';
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	2262      	movs	r2, #98	; 0x62
 80057c4:	701a      	strb	r2, [r3, #0]
                    break;
 80057c6:	e01f      	b.n	8005808 <print_string_ptr+0x1b4>
                case '\f':
                    *output_pointer = 'f';
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	2266      	movs	r2, #102	; 0x66
 80057cc:	701a      	strb	r2, [r3, #0]
                    break;
 80057ce:	e01b      	b.n	8005808 <print_string_ptr+0x1b4>
                case '\n':
                    *output_pointer = 'n';
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	226e      	movs	r2, #110	; 0x6e
 80057d4:	701a      	strb	r2, [r3, #0]
                    break;
 80057d6:	e017      	b.n	8005808 <print_string_ptr+0x1b4>
                case '\r':
                    *output_pointer = 'r';
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	2272      	movs	r2, #114	; 0x72
 80057dc:	701a      	strb	r2, [r3, #0]
                    break;
 80057de:	e013      	b.n	8005808 <print_string_ptr+0x1b4>
                case '\t':
                    *output_pointer = 't';
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	2274      	movs	r2, #116	; 0x74
 80057e4:	701a      	strb	r2, [r3, #0]
                    break;
 80057e6:	e00f      	b.n	8005808 <print_string_ptr+0x1b4>
                default:
                    /* escape and print as unicode codepoint */
                    *output_pointer++ = 'u';
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	61ba      	str	r2, [r7, #24]
 80057ee:	2275      	movs	r2, #117	; 0x75
 80057f0:	701a      	strb	r2, [r3, #0]
                    htoa16(*input_pointer, output_pointer);
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	69b9      	ldr	r1, [r7, #24]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff fef8 	bl	80055f0 <htoa16>
                    output_pointer += 4;
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	3304      	adds	r3, #4
 8005804:	61bb      	str	r3, [r7, #24]
                    break;
 8005806:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	3301      	adds	r3, #1
 800580c:	61fb      	str	r3, [r7, #28]
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	3301      	adds	r3, #1
 8005812:	61bb      	str	r3, [r7, #24]
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d19f      	bne.n	800575c <print_string_ptr+0x108>
            }
        }
    }
    output[output_length + 1] = '\"';
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3301      	adds	r3, #1
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	4413      	add	r3, r2
 8005824:	2222      	movs	r2, #34	; 0x22
 8005826:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	3302      	adds	r3, #2
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	4413      	add	r3, r2
 8005830:	2200      	movs	r2, #0
 8005832:	701a      	strb	r2, [r3, #0]

    return true;
 8005834:	2301      	movs	r3, #1
}
 8005836:	4618      	mov	r0, r3
 8005838:	3720      	adds	r7, #32
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	08007ff8 	.word	0x08007ff8

08005844 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static Jbool print_string(const J * const item, printbuffer * const p)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	6839      	ldr	r1, [r7, #0]
 8005854:	4618      	mov	r0, r3
 8005856:	f7ff fefd 	bl	8005654 <print_string_ptr>
 800585a:	4603      	mov	r3, r0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <buffer_skip_whitespace>:
static Jbool parse_object(J * const item, parse_buffer * const input_buffer);
static Jbool print_object(const J * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <buffer_skip_whitespace+0x16>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d106      	bne.n	8005888 <buffer_skip_whitespace+0x24>
    {
        return NULL;
 800587a:	2300      	movs	r3, #0
 800587c:	e021      	b.n	80058c2 <buffer_skip_whitespace+0x5e>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00d      	beq.n	80058aa <buffer_skip_whitespace+0x46>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	429a      	cmp	r2, r3
 8005898:	d207      	bcs.n	80058aa <buffer_skip_whitespace+0x46>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	4413      	add	r3, r2
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	2b20      	cmp	r3, #32
 80058a8:	d9e9      	bls.n	800587e <buffer_skip_whitespace+0x1a>
    }

    if (buffer->offset == buffer->length)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d104      	bne.n	80058c0 <buffer_skip_whitespace+0x5c>
    {
        buffer->offset--;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	1e5a      	subs	r2, r3, #1
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80058c0:	687b      	ldr	r3, [r7, #4]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bc80      	pop	{r7}
 80058ca:	4770      	bx	lr

080058cc <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d007      	beq.n	80058ea <skip_utf8_bom+0x1e>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <skip_utf8_bom+0x1e>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <skip_utf8_bom+0x22>
    {
        return NULL;
 80058ea:	2300      	movs	r3, #0
 80058ec:	e01c      	b.n	8005928 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d018      	beq.n	8005926 <skip_utf8_bom+0x5a>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	1d1a      	adds	r2, r3, #4
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d211      	bcs.n	8005926 <skip_utf8_bom+0x5a>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	4413      	add	r3, r2
 800590c:	2203      	movs	r2, #3
 800590e:	4908      	ldr	r1, [pc, #32]	; (8005930 <skip_utf8_bom+0x64>)
 8005910:	4618      	mov	r0, r3
 8005912:	f001 ff82 	bl	800781a <strncmp>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d104      	bne.n	8005926 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	1cda      	adds	r2, r3, #3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8005926:	687b      	ldr	r3, [r7, #4]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3708      	adds	r7, #8
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	08007ffc 	.word	0x08007ffc

08005934 <JParseWithOpts>:

/* Parse an object - create a new root, and populate. */
N_CJSON_PUBLIC(J *) JParseWithOpts(const char *value, const char **return_parse_end, Jbool require_null_terminated)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b08e      	sub	sp, #56	; 0x38
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8005940:	f107 0318 	add.w	r3, r7, #24
 8005944:	2200      	movs	r2, #0
 8005946:	601a      	str	r2, [r3, #0]
 8005948:	605a      	str	r2, [r3, #4]
 800594a:	609a      	str	r2, [r3, #8]
 800594c:	60da      	str	r2, [r3, #12]
 800594e:	611a      	str	r2, [r3, #16]
 8005950:	615a      	str	r2, [r3, #20]
 8005952:	619a      	str	r2, [r3, #24]
    J *item = NULL;
 8005954:	2300      	movs	r3, #0
 8005956:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 8005958:	4b41      	ldr	r3, [pc, #260]	; (8005a60 <JParseWithOpts+0x12c>)
 800595a:	2200      	movs	r2, #0
 800595c:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800595e:	4b40      	ldr	r3, [pc, #256]	; (8005a60 <JParseWithOpts+0x12c>)
 8005960:	2200      	movs	r2, #0
 8005962:	605a      	str	r2, [r3, #4]

    if (value == NULL)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d043      	beq.n	80059f2 <JParseWithOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	61bb      	str	r3, [r7, #24]
    buffer.length = strlen((const char*)value) + sizeof("");
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f7fa fbf8 	bl	8000164 <strlen>
 8005974:	4603      	mov	r3, r0
 8005976:	3301      	adds	r3, #1
 8005978:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800597a:	2300      	movs	r3, #0
 800597c:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800597e:	4a39      	ldr	r2, [pc, #228]	; (8005a64 <JParseWithOpts+0x130>)
 8005980:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005984:	ca07      	ldmia	r2, {r0, r1, r2}
 8005986:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = JNew_Item(&global_hooks);
 800598a:	4836      	ldr	r0, [pc, #216]	; (8005a64 <JParseWithOpts+0x130>)
 800598c:	f7ff f84c 	bl	8004a28 <JNew_Item>
 8005990:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8005992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005994:	2b00      	cmp	r3, #0
 8005996:	d02e      	beq.n	80059f6 <JParseWithOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8005998:	f107 0318 	add.w	r3, r7, #24
 800599c:	4618      	mov	r0, r3
 800599e:	f7ff ff95 	bl	80058cc <skip_utf8_bom>
 80059a2:	4603      	mov	r3, r0
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7ff ff5d 	bl	8005864 <buffer_skip_whitespace>
 80059aa:	4603      	mov	r3, r0
 80059ac:	4619      	mov	r1, r3
 80059ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80059b0:	f000 f8fc 	bl	8005bac <parse_value>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d01f      	beq.n	80059fa <JParseWithOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00e      	beq.n	80059de <JParseWithOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 80059c0:	f107 0318 	add.w	r3, r7, #24
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7ff ff4d 	bl	8005864 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 80059ca:	6a3a      	ldr	r2, [r7, #32]
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d215      	bcs.n	80059fe <JParseWithOpts+0xca>
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	6a3b      	ldr	r3, [r7, #32]
 80059d6:	4413      	add	r3, r2
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10f      	bne.n	80059fe <JParseWithOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d004      	beq.n	80059ee <JParseWithOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	441a      	add	r2, r3
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	601a      	str	r2, [r3, #0]
    }

    return item;
 80059ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f0:	e031      	b.n	8005a56 <JParseWithOpts+0x122>
        goto fail;
 80059f2:	bf00      	nop
 80059f4:	e004      	b.n	8005a00 <JParseWithOpts+0xcc>
        goto fail;
 80059f6:	bf00      	nop
 80059f8:	e002      	b.n	8005a00 <JParseWithOpts+0xcc>
        goto fail;
 80059fa:	bf00      	nop
 80059fc:	e000      	b.n	8005a00 <JParseWithOpts+0xcc>

fail:
 80059fe:	bf00      	nop
    if (item != NULL)
 8005a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <JParseWithOpts+0xd8>
    {
        JDelete(item);
 8005a06:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005a08:	f7ff f824 	bl	8004a54 <JDelete>
    }

    if (value != NULL)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d020      	beq.n	8005a54 <JParseWithOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8005a16:	2300      	movs	r3, #0
 8005a18:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8005a1a:	6a3a      	ldr	r2, [r7, #32]
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d202      	bcs.n	8005a28 <JParseWithOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	617b      	str	r3, [r7, #20]
 8005a26:	e005      	b.n	8005a34 <JParseWithOpts+0x100>
        }
        else if (buffer.length > 0)
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <JParseWithOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	3b01      	subs	r3, #1
 8005a32:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d004      	beq.n	8005a44 <JParseWithOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	441a      	add	r2, r3
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8005a44:	4b06      	ldr	r3, [pc, #24]	; (8005a60 <JParseWithOpts+0x12c>)
 8005a46:	461a      	mov	r2, r3
 8005a48:	f107 0310 	add.w	r3, r7, #16
 8005a4c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005a50:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3738      	adds	r7, #56	; 0x38
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	20000470 	.word	0x20000470
 8005a64:	20000058 	.word	0x20000058

08005a68 <JParse>:

/* Default options for JParse */
N_CJSON_PUBLIC(J *) JParse(const char *value)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
    return JParseWithOpts(value, 0, 0);
 8005a70:	2200      	movs	r2, #0
 8005a72:	2100      	movs	r1, #0
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7ff ff5d 	bl	8005934 <JParseWithOpts>
 8005a7a:	4603      	mov	r3, r0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <print>:

#define cjson_min(a, b) ((a < b) ? a : b)

static unsigned char *print(const J * const item, Jbool format, const internal_hooks * const hooks)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b08e      	sub	sp, #56	; 0x38
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8005a90:	2300      	movs	r3, #0
 8005a92:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 8005a94:	f107 0310 	add.w	r3, r7, #16
 8005a98:	2224      	movs	r2, #36	; 0x24
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f001 fdf1 	bl	8007684 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a38      	ldr	r2, [pc, #224]	; (8005b88 <print+0x104>)
 8005aa8:	6812      	ldr	r2, [r2, #0]
 8005aaa:	4610      	mov	r0, r2
 8005aac:	4798      	blx	r3
 8005aae:	4603      	mov	r3, r0
 8005ab0:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 8005ab2:	4b35      	ldr	r3, [pc, #212]	; (8005b88 <print+0x104>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	627b      	str	r3, [r7, #36]	; 0x24
    buffer->hooks = *hooks;
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ac2:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ac4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d040      	beq.n	8005b50 <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8005ace:	f107 0310 	add.w	r3, r7, #16
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 f955 	bl	8005d84 <print_value>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d039      	beq.n	8005b54 <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 8005ae0:	f107 0310 	add.w	r3, r7, #16
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7ff f9d2 	bl	8004e8e <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00d      	beq.n	8005b0e <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	6938      	ldr	r0, [r7, #16]
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	3201      	adds	r2, #1
 8005afc:	4611      	mov	r1, r2
 8005afe:	4798      	blx	r3
 8005b00:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL) {
 8005b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d027      	beq.n	8005b58 <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	613b      	str	r3, [r7, #16]
 8005b0c:	e01e      	b.n	8005b4c <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	3201      	adds	r2, #1
 8005b16:	4610      	mov	r0, r2
 8005b18:	4798      	blx	r3
 8005b1a:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL)
 8005b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d01c      	beq.n	8005b5c <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8005b22:	6939      	ldr	r1, [r7, #16]
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	bf28      	it	cs
 8005b2e:	4613      	movcs	r3, r2
 8005b30:	461a      	mov	r2, r3
 8005b32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005b34:	f001 fd82 	bl	800763c <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b3c:	4413      	add	r3, r2
 8005b3e:	2200      	movs	r2, #0
 8005b40:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	4610      	mov	r0, r2
 8005b4a:	4798      	blx	r3
    }

    return printed;
 8005b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b4e:	e016      	b.n	8005b7e <print+0xfa>
        goto fail;
 8005b50:	bf00      	nop
 8005b52:	e004      	b.n	8005b5e <print+0xda>
        goto fail;
 8005b54:	bf00      	nop
 8005b56:	e002      	b.n	8005b5e <print+0xda>
            goto fail;
 8005b58:	bf00      	nop
 8005b5a:	e000      	b.n	8005b5e <print+0xda>
            goto fail;
 8005b5c:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d004      	beq.n	8005b6e <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	4798      	blx	r3
    }

    if (printed != NULL)
 8005b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <print+0xf8>
    {
        hooks->deallocate(printed);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005b7a:	4798      	blx	r3
    }

    return NULL;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3738      	adds	r7, #56	; 0x38
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	08008290 	.word	0x08008290

08005b8c <JPrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

N_CJSON_PUBLIC(char *) JPrintUnformatted(const J *item)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 8005b94:	4a04      	ldr	r2, [pc, #16]	; (8005ba8 <JPrintUnformatted+0x1c>)
 8005b96:	2100      	movs	r1, #0
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7ff ff73 	bl	8005a84 <print>
 8005b9e:	4603      	mov	r3, r0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	20000058 	.word	0x20000058

08005bac <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static Jbool parse_value(J * const item, parse_buffer * const input_buffer)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <parse_value+0x18>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d101      	bne.n	8005bc8 <parse_value+0x1c>
    {
        return false; /* no input */
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	e0d2      	b.n	8005d6e <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d01d      	beq.n	8005c0a <parse_value+0x5e>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	1d1a      	adds	r2, r3, #4
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d816      	bhi.n	8005c0a <parse_value+0x5e>
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	4413      	add	r3, r2
 8005be6:	2204      	movs	r2, #4
 8005be8:	4963      	ldr	r1, [pc, #396]	; (8005d78 <parse_value+0x1cc>)
 8005bea:	4618      	mov	r0, r3
 8005bec:	f001 fe15 	bl	800781a <strncmp>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d109      	bne.n	8005c0a <parse_value+0x5e>
    {
        item->type = JNULL;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2204      	movs	r2, #4
 8005bfa:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	1d1a      	adds	r2, r3, #4
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	609a      	str	r2, [r3, #8]
        return true;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e0b1      	b.n	8005d6e <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d01d      	beq.n	8005c4c <parse_value+0xa0>
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	1d5a      	adds	r2, r3, #5
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d816      	bhi.n	8005c4c <parse_value+0xa0>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	4413      	add	r3, r2
 8005c28:	2205      	movs	r2, #5
 8005c2a:	4954      	ldr	r1, [pc, #336]	; (8005d7c <parse_value+0x1d0>)
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f001 fdf4 	bl	800781a <strncmp>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d109      	bne.n	8005c4c <parse_value+0xa0>
    {
        item->type = JFalse;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	1d5a      	adds	r2, r3, #5
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	609a      	str	r2, [r3, #8]
        return true;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e090      	b.n	8005d6e <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d020      	beq.n	8005c94 <parse_value+0xe8>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	1d1a      	adds	r2, r3, #4
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d819      	bhi.n	8005c94 <parse_value+0xe8>
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	4413      	add	r3, r2
 8005c6a:	2204      	movs	r2, #4
 8005c6c:	4944      	ldr	r1, [pc, #272]	; (8005d80 <parse_value+0x1d4>)
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f001 fdd3 	bl	800781a <strncmp>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10c      	bne.n	8005c94 <parse_value+0xe8>
    {
        item->type = JTrue;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	1d1a      	adds	r2, r3, #4
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	609a      	str	r2, [r3, #8]
        return true;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e06c      	b.n	8005d6e <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d013      	beq.n	8005cc2 <parse_value+0x116>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	689a      	ldr	r2, [r3, #8]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d20d      	bcs.n	8005cc2 <parse_value+0x116>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	4413      	add	r3, r2
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b22      	cmp	r3, #34	; 0x22
 8005cb4:	d105      	bne.n	8005cc2 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8005cb6:	6839      	ldr	r1, [r7, #0]
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7ff fae9 	bl	8005290 <parse_string>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	e055      	b.n	8005d6e <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d023      	beq.n	8005d10 <parse_value+0x164>
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d21d      	bcs.n	8005d10 <parse_value+0x164>
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	4413      	add	r3, r2
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	2b2d      	cmp	r3, #45	; 0x2d
 8005ce2:	d00f      	beq.n	8005d04 <parse_value+0x158>
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	4413      	add	r3, r2
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	2b2f      	cmp	r3, #47	; 0x2f
 8005cf2:	d90d      	bls.n	8005d10 <parse_value+0x164>
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	2b39      	cmp	r3, #57	; 0x39
 8005d02:	d805      	bhi.n	8005d10 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8005d04:	6839      	ldr	r1, [r7, #0]
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7fe fef6 	bl	8004af8 <parse_number>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	e02e      	b.n	8005d6e <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d013      	beq.n	8005d3e <parse_value+0x192>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	689a      	ldr	r2, [r3, #8]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d20d      	bcs.n	8005d3e <parse_value+0x192>
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	2b5b      	cmp	r3, #91	; 0x5b
 8005d30:	d105      	bne.n	8005d3e <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8005d32:	6839      	ldr	r1, [r7, #0]
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 f8cb 	bl	8005ed0 <parse_array>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	e017      	b.n	8005d6e <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d013      	beq.n	8005d6c <parse_value+0x1c0>
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d20d      	bcs.n	8005d6c <parse_value+0x1c0>
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	4413      	add	r3, r2
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b7b      	cmp	r3, #123	; 0x7b
 8005d5e:	d105      	bne.n	8005d6c <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8005d60:	6839      	ldr	r1, [r7, #0]
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f9f8 	bl	8006158 <parse_object>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	e000      	b.n	8005d6e <parse_value+0x1c2>
    }

    return false;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	08007ff0 	.word	0x08007ff0
 8005d7c:	08008000 	.word	0x08008000
 8005d80:	08008008 	.word	0x08008008

08005d84 <print_value>:

/* Render a value to text. */
static Jbool print_value(const J * const item, printbuffer * const output_buffer)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <print_value+0x1a>
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <print_value+0x1e>
    {
        return false;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	e08b      	b.n	8005eba <print_value+0x136>
    }

    switch ((item->type) & 0xFF)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d04a      	beq.n	8005e42 <print_value+0xbe>
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	dc06      	bgt.n	8005dbe <print_value+0x3a>
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d034      	beq.n	8005e1e <print_value+0x9a>
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	d00e      	beq.n	8005dd6 <print_value+0x52>
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d01e      	beq.n	8005dfa <print_value+0x76>
 8005dbc:	e07c      	b.n	8005eb8 <print_value+0x134>
 8005dbe:	2b20      	cmp	r3, #32
 8005dc0:	d06e      	beq.n	8005ea0 <print_value+0x11c>
 8005dc2:	2b20      	cmp	r3, #32
 8005dc4:	dc02      	bgt.n	8005dcc <print_value+0x48>
 8005dc6:	2b10      	cmp	r3, #16
 8005dc8:	d064      	beq.n	8005e94 <print_value+0x110>
 8005dca:	e075      	b.n	8005eb8 <print_value+0x134>
 8005dcc:	2b40      	cmp	r3, #64	; 0x40
 8005dce:	d06d      	beq.n	8005eac <print_value+0x128>
 8005dd0:	2b80      	cmp	r3, #128	; 0x80
 8005dd2:	d03c      	beq.n	8005e4e <print_value+0xca>
 8005dd4:	e070      	b.n	8005eb8 <print_value+0x134>
    {
        case JNULL:
            output = ensure(output_buffer, 5);
 8005dd6:	2105      	movs	r1, #5
 8005dd8:	6838      	ldr	r0, [r7, #0]
 8005dda:	f7fe ffbb 	bl	8004d54 <ensure>
 8005dde:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <print_value+0x66>
            {
                return false;
 8005de6:	2300      	movs	r3, #0
 8005de8:	e067      	b.n	8005eba <print_value+0x136>
            }
            strcpy((char*)output, "null");
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	4a35      	ldr	r2, [pc, #212]	; (8005ec4 <print_value+0x140>)
 8005dee:	6810      	ldr	r0, [r2, #0]
 8005df0:	6018      	str	r0, [r3, #0]
 8005df2:	7912      	ldrb	r2, [r2, #4]
 8005df4:	711a      	strb	r2, [r3, #4]
            return true;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e05f      	b.n	8005eba <print_value+0x136>

        case JFalse:
            output = ensure(output_buffer, 6);
 8005dfa:	2106      	movs	r1, #6
 8005dfc:	6838      	ldr	r0, [r7, #0]
 8005dfe:	f7fe ffa9 	bl	8004d54 <ensure>
 8005e02:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <print_value+0x8a>
            {
                return false;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	e055      	b.n	8005eba <print_value+0x136>
            }
            strcpy((char*)output, "false");
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4a2d      	ldr	r2, [pc, #180]	; (8005ec8 <print_value+0x144>)
 8005e12:	6810      	ldr	r0, [r2, #0]
 8005e14:	6018      	str	r0, [r3, #0]
 8005e16:	8892      	ldrh	r2, [r2, #4]
 8005e18:	809a      	strh	r2, [r3, #4]
            return true;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e04d      	b.n	8005eba <print_value+0x136>

        case JTrue:
            output = ensure(output_buffer, 5);
 8005e1e:	2105      	movs	r1, #5
 8005e20:	6838      	ldr	r0, [r7, #0]
 8005e22:	f7fe ff97 	bl	8004d54 <ensure>
 8005e26:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <print_value+0xae>
            {
                return false;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	e043      	b.n	8005eba <print_value+0x136>
            }
            strcpy((char*)output, "true");
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	4a25      	ldr	r2, [pc, #148]	; (8005ecc <print_value+0x148>)
 8005e36:	6810      	ldr	r0, [r2, #0]
 8005e38:	6018      	str	r0, [r3, #0]
 8005e3a:	7912      	ldrb	r2, [r2, #4]
 8005e3c:	711a      	strb	r2, [r3, #4]
            return true;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e03b      	b.n	8005eba <print_value+0x136>

        case JNumber:
            return print_number(item, output_buffer);
 8005e42:	6839      	ldr	r1, [r7, #0]
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f7ff f843 	bl	8004ed0 <print_number>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	e035      	b.n	8005eba <print_value+0x136>

        case JRaw:
        {
            size_t raw_length = 0;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <print_value+0xda>
            {
                return false;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	e02d      	b.n	8005eba <print_value+0x136>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fa f97e 	bl	8000164 <strlen>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 8005e6e:	68b9      	ldr	r1, [r7, #8]
 8005e70:	6838      	ldr	r0, [r7, #0]
 8005e72:	f7fe ff6f 	bl	8004d54 <ensure>
 8005e76:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <print_value+0xfe>
            {
                return false;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	e01b      	b.n	8005eba <print_value+0x136>
            }
            memcpy(output, item->valuestring, raw_length);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	4619      	mov	r1, r3
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f001 fbd6 	bl	800763c <memcpy>
            return true;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e012      	b.n	8005eba <print_value+0x136>
        }

        case JString:
            return print_string(item, output_buffer);
 8005e94:	6839      	ldr	r1, [r7, #0]
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7ff fcd4 	bl	8005844 <print_string>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	e00c      	b.n	8005eba <print_value+0x136>

        case JArray:
            return print_array(item, output_buffer);
 8005ea0:	6839      	ldr	r1, [r7, #0]
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f8d2 	bl	800604c <print_array>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	e006      	b.n	8005eba <print_value+0x136>

        case JObject:
            return print_object(item, output_buffer);
 8005eac:	6839      	ldr	r1, [r7, #0]
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fa47 	bl	8006342 <print_object>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	e000      	b.n	8005eba <print_value+0x136>

        default:
            return false;
 8005eb8:	2300      	movs	r3, #0
    }
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	08007ff0 	.word	0x08007ff0
 8005ec8:	08008000 	.word	0x08008000
 8005ecc:	08008008 	.word	0x08008008

08005ed0 <parse_array>:

/* Build an array from input text. */
static Jbool parse_array(J * const item, parse_buffer * const input_buffer)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
    J *head = NULL; /* head of the linked list */
 8005eda:	2300      	movs	r3, #0
 8005edc:	617b      	str	r3, [r7, #20]
    J *current_item = NULL;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= N_CJSON_NESTING_LIMIT)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005eea:	d301      	bcc.n	8005ef0 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8005eec:	2300      	movs	r3, #0
 8005eee:	e0a9      	b.n	8006044 <parse_array+0x174>
    }
    input_buffer->depth++;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	1c5a      	adds	r2, r3, #1
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	4413      	add	r3, r2
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b5b      	cmp	r3, #91	; 0x5b
 8005f08:	f040 808e 	bne.w	8006028 <parse_array+0x158>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	1c5a      	adds	r2, r3, #1
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8005f16:	6838      	ldr	r0, [r7, #0]
 8005f18:	f7ff fca4 	bl	8005864 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00d      	beq.n	8005f3e <parse_array+0x6e>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	689a      	ldr	r2, [r3, #8]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d207      	bcs.n	8005f3e <parse_array+0x6e>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	4413      	add	r3, r2
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b5d      	cmp	r3, #93	; 0x5d
 8005f3c:	d061      	beq.n	8006002 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d005      	beq.n	8005f50 <parse_array+0x80>
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d305      	bcc.n	8005f5c <parse_array+0x8c>
    {
        input_buffer->offset--;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	1e5a      	subs	r2, r3, #1
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	609a      	str	r2, [r3, #8]
        goto fail;
 8005f5a:	e06c      	b.n	8006036 <parse_array+0x166>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	1e5a      	subs	r2, r3, #1
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        J *new_item = JNew_Item(&(input_buffer->hooks));
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	3310      	adds	r3, #16
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fe fd5c 	bl	8004a28 <JNew_Item>
 8005f70:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d059      	beq.n	800602c <parse_array+0x15c>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d104      	bne.n	8005f88 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	617b      	str	r3, [r7, #20]
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	613b      	str	r3, [r7, #16]
 8005f86:	e007      	b.n	8005f98 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	1c5a      	adds	r2, r3, #1
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8005fa2:	6838      	ldr	r0, [r7, #0]
 8005fa4:	f7ff fc5e 	bl	8005864 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8005fa8:	6839      	ldr	r1, [r7, #0]
 8005faa:	6938      	ldr	r0, [r7, #16]
 8005fac:	f7ff fdfe 	bl	8005bac <parse_value>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d03c      	beq.n	8006030 <parse_array+0x160>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8005fb6:	6838      	ldr	r0, [r7, #0]
 8005fb8:	f7ff fc54 	bl	8005864 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00d      	beq.n	8005fde <parse_array+0x10e>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	689a      	ldr	r2, [r3, #8]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d207      	bcs.n	8005fde <parse_array+0x10e>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	2b2c      	cmp	r3, #44	; 0x2c
 8005fdc:	d0c3      	beq.n	8005f66 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d027      	beq.n	8006034 <parse_array+0x164>
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	689a      	ldr	r2, [r3, #8]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d221      	bcs.n	8006034 <parse_array+0x164>
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	2b5d      	cmp	r3, #93	; 0x5d
 8005ffe:	d119      	bne.n	8006034 <parse_array+0x164>
    {
        goto fail; /* expected end of array */
    }

success:
 8006000:	e000      	b.n	8006004 <parse_array+0x134>
        goto success;
 8006002:	bf00      	nop
    input_buffer->depth--;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	1e5a      	subs	r2, r3, #1
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	60da      	str	r2, [r3, #12]

    item->type = JArray;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2220      	movs	r2, #32
 8006012:	60da      	str	r2, [r3, #12]
    item->child = head;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	1c5a      	adds	r2, r3, #1
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	609a      	str	r2, [r3, #8]

    return true;
 8006024:	2301      	movs	r3, #1
 8006026:	e00d      	b.n	8006044 <parse_array+0x174>
        goto fail;
 8006028:	bf00      	nop
 800602a:	e004      	b.n	8006036 <parse_array+0x166>
            goto fail; /* allocation failure */
 800602c:	bf00      	nop
 800602e:	e002      	b.n	8006036 <parse_array+0x166>
            goto fail; /* failed to parse value */
 8006030:	bf00      	nop
 8006032:	e000      	b.n	8006036 <parse_array+0x166>

fail:
 8006034:	bf00      	nop
    if (head != NULL)
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d002      	beq.n	8006042 <parse_array+0x172>
    {
        JDelete(head);
 800603c:	6978      	ldr	r0, [r7, #20]
 800603e:	f7fe fd09 	bl	8004a54 <JDelete>
    }

    return false;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3718      	adds	r7, #24
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <print_array>:

/* Render an array to text */
static Jbool print_array(const J * const item, printbuffer * const output_buffer)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8006056:	2300      	movs	r3, #0
 8006058:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800605a:	2300      	movs	r3, #0
 800605c:	60fb      	str	r3, [r7, #12]
    J *current_element = item->child;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <print_array+0x22>
    {
        return false;
 800606a:	2300      	movs	r3, #0
 800606c:	e070      	b.n	8006150 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800606e:	2101      	movs	r1, #1
 8006070:	6838      	ldr	r0, [r7, #0]
 8006072:	f7fe fe6f 	bl	8004d54 <ensure>
 8006076:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <print_array+0x36>
    {
        return false;
 800607e:	2300      	movs	r3, #0
 8006080:	e066      	b.n	8006150 <print_array+0x104>
    }

    *output_pointer = '[';
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	225b      	movs	r2, #91	; 0x5b
 8006086:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	1c5a      	adds	r2, r3, #1
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 800609c:	e03d      	b.n	800611a <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 800609e:	6839      	ldr	r1, [r7, #0]
 80060a0:	6938      	ldr	r0, [r7, #16]
 80060a2:	f7ff fe6f 	bl	8005d84 <print_value>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <print_array+0x64>
        {
            return false;
 80060ac:	2300      	movs	r3, #0
 80060ae:	e04f      	b.n	8006150 <print_array+0x104>
        }
        update_offset(output_buffer);
 80060b0:	6838      	ldr	r0, [r7, #0]
 80060b2:	f7fe feec 	bl	8004e8e <update_offset>
        if (current_element->next)
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d02a      	beq.n	8006114 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <print_array+0x7e>
 80060c6:	2302      	movs	r3, #2
 80060c8:	e000      	b.n	80060cc <print_array+0x80>
 80060ca:	2301      	movs	r3, #1
 80060cc:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3301      	adds	r3, #1
 80060d2:	4619      	mov	r1, r3
 80060d4:	6838      	ldr	r0, [r7, #0]
 80060d6:	f7fe fe3d 	bl	8004d54 <ensure>
 80060da:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <print_array+0x9a>
            {
                return false;
 80060e2:	2300      	movs	r3, #0
 80060e4:	e034      	b.n	8006150 <print_array+0x104>
            }
            *output_pointer++ = ',';
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	617a      	str	r2, [r7, #20]
 80060ec:	222c      	movs	r2, #44	; 0x2c
 80060ee:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d004      	beq.n	8006102 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	617a      	str	r2, [r7, #20]
 80060fe:	2220      	movs	r2, #32
 8006100:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	2200      	movs	r2, #0
 8006106:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	441a      	add	r2, r3
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1be      	bne.n	800609e <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8006120:	2102      	movs	r1, #2
 8006122:	6838      	ldr	r0, [r7, #0]
 8006124:	f7fe fe16 	bl	8004d54 <ensure>
 8006128:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <print_array+0xe8>
    {
        return false;
 8006130:	2300      	movs	r3, #0
 8006132:	e00d      	b.n	8006150 <print_array+0x104>
    }
    *output_pointer++ = ']';
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	1c5a      	adds	r2, r3, #1
 8006138:	617a      	str	r2, [r7, #20]
 800613a:	225d      	movs	r2, #93	; 0x5d
 800613c:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2200      	movs	r2, #0
 8006142:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	1e5a      	subs	r2, r3, #1
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	60da      	str	r2, [r3, #12]

    return true;
 800614e:	2301      	movs	r3, #1
}
 8006150:	4618      	mov	r0, r3
 8006152:	3718      	adds	r7, #24
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <parse_object>:

/* Build an object from the text. */
static Jbool parse_object(J * const item, parse_buffer * const input_buffer)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
    J *head = NULL; /* linked list head */
 8006162:	2300      	movs	r3, #0
 8006164:	617b      	str	r3, [r7, #20]
    J *current_item = NULL;
 8006166:	2300      	movs	r3, #0
 8006168:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= N_CJSON_NESTING_LIMIT)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006172:	d301      	bcc.n	8006178 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8006174:	2300      	movs	r3, #0
 8006176:	e0e0      	b.n	800633a <parse_object+0x1e2>
    }
    input_buffer->depth++;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	1c5a      	adds	r2, r3, #1
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 80ca 	beq.w	800631e <parse_object+0x1c6>
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	689a      	ldr	r2, [r3, #8]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	429a      	cmp	r2, r3
 8006194:	f080 80c3 	bcs.w	800631e <parse_object+0x1c6>
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	4413      	add	r3, r2
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	2b7b      	cmp	r3, #123	; 0x7b
 80061a6:	f040 80ba 	bne.w	800631e <parse_object+0x1c6>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	1c5a      	adds	r2, r3, #1
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80061b4:	6838      	ldr	r0, [r7, #0]
 80061b6:	f7ff fb55 	bl	8005864 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00e      	beq.n	80061de <parse_object+0x86>
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	689a      	ldr	r2, [r3, #8]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d208      	bcs.n	80061de <parse_object+0x86>
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	4413      	add	r3, r2
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	2b7d      	cmp	r3, #125	; 0x7d
 80061da:	f000 808d 	beq.w	80062f8 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d005      	beq.n	80061f0 <parse_object+0x98>
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d305      	bcc.n	80061fc <parse_object+0xa4>
    {
        input_buffer->offset--;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	1e5a      	subs	r2, r3, #1
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	609a      	str	r2, [r3, #8]
        goto fail;
 80061fa:	e097      	b.n	800632c <parse_object+0x1d4>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	1e5a      	subs	r2, r3, #1
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        J *new_item = JNew_Item(&(input_buffer->hooks));
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	3310      	adds	r3, #16
 800620a:	4618      	mov	r0, r3
 800620c:	f7fe fc0c 	bl	8004a28 <JNew_Item>
 8006210:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 8084 	beq.w	8006322 <parse_object+0x1ca>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d104      	bne.n	800622a <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	617b      	str	r3, [r7, #20]
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	613b      	str	r3, [r7, #16]
 8006228:	e007      	b.n	800623a <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	1c5a      	adds	r2, r3, #1
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8006244:	6838      	ldr	r0, [r7, #0]
 8006246:	f7ff fb0d 	bl	8005864 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800624a:	6839      	ldr	r1, [r7, #0]
 800624c:	6938      	ldr	r0, [r7, #16]
 800624e:	f7ff f81f 	bl	8005290 <parse_string>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d066      	beq.n	8006326 <parse_object+0x1ce>
        {
            goto fail; /* faile to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8006258:	6838      	ldr	r0, [r7, #0]
 800625a:	f7ff fb03 	bl	8005864 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	691a      	ldr	r2, [r3, #16]
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	2200      	movs	r2, #0
 800626a:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d055      	beq.n	800631e <parse_object+0x1c6>
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	689a      	ldr	r2, [r3, #8]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	429a      	cmp	r2, r3
 800627c:	d24f      	bcs.n	800631e <parse_object+0x1c6>
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	4413      	add	r3, r2
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	2b3a      	cmp	r3, #58	; 0x3a
 800628c:	d147      	bne.n	800631e <parse_object+0x1c6>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	1c5a      	adds	r2, r3, #1
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8006298:	6838      	ldr	r0, [r7, #0]
 800629a:	f7ff fae3 	bl	8005864 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800629e:	6839      	ldr	r1, [r7, #0]
 80062a0:	6938      	ldr	r0, [r7, #16]
 80062a2:	f7ff fc83 	bl	8005bac <parse_value>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d03e      	beq.n	800632a <parse_object+0x1d2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80062ac:	6838      	ldr	r0, [r7, #0]
 80062ae:	f7ff fad9 	bl	8005864 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00d      	beq.n	80062d4 <parse_object+0x17c>
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d207      	bcs.n	80062d4 <parse_object+0x17c>
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	4413      	add	r3, r2
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	2b2c      	cmp	r3, #44	; 0x2c
 80062d2:	d098      	beq.n	8006206 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d021      	beq.n	800631e <parse_object+0x1c6>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	689a      	ldr	r2, [r3, #8]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d21b      	bcs.n	800631e <parse_object+0x1c6>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	4413      	add	r3, r2
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	2b7d      	cmp	r3, #125	; 0x7d
 80062f4:	d113      	bne.n	800631e <parse_object+0x1c6>
    {
        goto fail; /* expected end of object */
    }

success:
 80062f6:	e000      	b.n	80062fa <parse_object+0x1a2>
        goto success; /* empty object */
 80062f8:	bf00      	nop
    input_buffer->depth--;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	1e5a      	subs	r2, r3, #1
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	60da      	str	r2, [r3, #12]

    item->type = JObject;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2240      	movs	r2, #64	; 0x40
 8006308:	60da      	str	r2, [r3, #12]
    item->child = head;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	1c5a      	adds	r2, r3, #1
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	609a      	str	r2, [r3, #8]
    return true;
 800631a:	2301      	movs	r3, #1
 800631c:	e00d      	b.n	800633a <parse_object+0x1e2>

fail:
 800631e:	bf00      	nop
 8006320:	e004      	b.n	800632c <parse_object+0x1d4>
            goto fail; /* allocation failure */
 8006322:	bf00      	nop
 8006324:	e002      	b.n	800632c <parse_object+0x1d4>
            goto fail; /* faile to parse name */
 8006326:	bf00      	nop
 8006328:	e000      	b.n	800632c <parse_object+0x1d4>
            goto fail; /* failed to parse value */
 800632a:	bf00      	nop
    if (head != NULL)
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <parse_object+0x1e0>
    {
        JDelete(head);
 8006332:	6978      	ldr	r0, [r7, #20]
 8006334:	f7fe fb8e 	bl	8004a54 <JDelete>
    }

    return false;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3718      	adds	r7, #24
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <print_object>:

/* Render an object to text. */
static Jbool print_object(const J * const item, printbuffer * const output_buffer)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b088      	sub	sp, #32
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800634c:	2300      	movs	r3, #0
 800634e:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8006350:	2300      	movs	r3, #0
 8006352:	60fb      	str	r3, [r7, #12]
    J *current_item = item->child;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <print_object+0x22>
    {
        return false;
 8006360:	2300      	movs	r3, #0
 8006362:	e109      	b.n	8006578 <print_object+0x236>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d001      	beq.n	8006370 <print_object+0x2e>
 800636c:	2302      	movs	r3, #2
 800636e:	e000      	b.n	8006372 <print_object+0x30>
 8006370:	2301      	movs	r3, #1
 8006372:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	3301      	adds	r3, #1
 8006378:	4619      	mov	r1, r3
 800637a:	6838      	ldr	r0, [r7, #0]
 800637c:	f7fe fcea 	bl	8004d54 <ensure>
 8006380:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <print_object+0x4a>
    {
        return false;
 8006388:	2300      	movs	r3, #0
 800638a:	e0f5      	b.n	8006578 <print_object+0x236>
    }

    *output_pointer++ = '{';
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	61fa      	str	r2, [r7, #28]
 8006392:	227b      	movs	r2, #123	; 0x7b
 8006394:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d004      	beq.n	80063b2 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	1c5a      	adds	r2, r3, #1
 80063ac:	61fa      	str	r2, [r7, #28]
 80063ae:	220a      	movs	r2, #10
 80063b0:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	689a      	ldr	r2, [r3, #8]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	441a      	add	r2, r3
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	609a      	str	r2, [r3, #8]

    while (current_item)
 80063be:	e0a1      	b.n	8006504 <print_object+0x1c2>
    {
        if (output_buffer->format)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d022      	beq.n	800640e <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	4619      	mov	r1, r3
 80063ce:	6838      	ldr	r0, [r7, #0]
 80063d0:	f7fe fcc0 	bl	8004d54 <ensure>
 80063d4:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <print_object+0x9e>
            {
                return false;
 80063dc:	2300      	movs	r3, #0
 80063de:	e0cb      	b.n	8006578 <print_object+0x236>
            }
            for (i = 0; i < output_buffer->depth; i++)
 80063e0:	2300      	movs	r3, #0
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	e007      	b.n	80063f6 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	61fa      	str	r2, [r7, #28]
 80063ec:	2209      	movs	r2, #9
 80063ee:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	3301      	adds	r3, #1
 80063f4:	617b      	str	r3, [r7, #20]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d3f2      	bcc.n	80063e6 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	441a      	add	r2, r3
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	6839      	ldr	r1, [r7, #0]
 8006414:	4618      	mov	r0, r3
 8006416:	f7ff f91d 	bl	8005654 <print_string_ptr>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <print_object+0xe2>
        {
            return false;
 8006420:	2300      	movs	r3, #0
 8006422:	e0a9      	b.n	8006578 <print_object+0x236>
        }
        update_offset(output_buffer);
 8006424:	6838      	ldr	r0, [r7, #0]
 8006426:	f7fe fd32 	bl	8004e8e <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <print_object+0xf4>
 8006432:	2302      	movs	r3, #2
 8006434:	e000      	b.n	8006438 <print_object+0xf6>
 8006436:	2301      	movs	r3, #1
 8006438:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 800643a:	68f9      	ldr	r1, [r7, #12]
 800643c:	6838      	ldr	r0, [r7, #0]
 800643e:	f7fe fc89 	bl	8004d54 <ensure>
 8006442:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <print_object+0x10c>
        {
            return false;
 800644a:	2300      	movs	r3, #0
 800644c:	e094      	b.n	8006578 <print_object+0x236>
        }
        *output_pointer++ = ':';
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	61fa      	str	r2, [r7, #28]
 8006454:	223a      	movs	r2, #58	; 0x3a
 8006456:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d004      	beq.n	800646a <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	1c5a      	adds	r2, r3, #1
 8006464:	61fa      	str	r2, [r7, #28]
 8006466:	2209      	movs	r2, #9
 8006468:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	689a      	ldr	r2, [r3, #8]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	441a      	add	r2, r3
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	69b8      	ldr	r0, [r7, #24]
 800647a:	f7ff fc83 	bl	8005d84 <print_value>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <print_object+0x146>
        {
            return false;
 8006484:	2300      	movs	r3, #0
 8006486:	e077      	b.n	8006578 <print_object+0x236>
        }
        update_offset(output_buffer);
 8006488:	6838      	ldr	r0, [r7, #0]
 800648a:	f7fe fd00 	bl	8004e8e <update_offset>

        /* print comma if not last */
        length = (size_t) ((output_buffer->format ? 1 : 0) + (current_item->next ? 1 : 0));
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	2b00      	cmp	r3, #0
 8006494:	bf14      	ite	ne
 8006496:	2301      	movne	r3, #1
 8006498:	2300      	moveq	r3, #0
 800649a:	b2db      	uxtb	r3, r3
 800649c:	461a      	mov	r2, r3
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	bf14      	ite	ne
 80064a6:	2301      	movne	r3, #1
 80064a8:	2300      	moveq	r3, #0
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	4413      	add	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	3301      	adds	r3, #1
 80064b4:	4619      	mov	r1, r3
 80064b6:	6838      	ldr	r0, [r7, #0]
 80064b8:	f7fe fc4c 	bl	8004d54 <ensure>
 80064bc:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <print_object+0x186>
        {
            return false;
 80064c4:	2300      	movs	r3, #0
 80064c6:	e057      	b.n	8006578 <print_object+0x236>
        }
        if (current_item->next)
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d004      	beq.n	80064da <print_object+0x198>
        {
            *output_pointer++ = ',';
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	61fa      	str	r2, [r7, #28]
 80064d6:	222c      	movs	r2, #44	; 0x2c
 80064d8:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d004      	beq.n	80064ec <print_object+0x1aa>
        {
            *output_pointer++ = '\n';
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	1c5a      	adds	r2, r3, #1
 80064e6:	61fa      	str	r2, [r7, #28]
 80064e8:	220a      	movs	r2, #10
 80064ea:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	2200      	movs	r2, #0
 80064f0:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	689a      	ldr	r2, [r3, #8]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	441a      	add	r2, r3
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	2b00      	cmp	r3, #0
 8006508:	f47f af5a 	bne.w	80063c0 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <print_object+0x1da>
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	3301      	adds	r3, #1
 800651a:	e000      	b.n	800651e <print_object+0x1dc>
 800651c:	2302      	movs	r3, #2
 800651e:	4619      	mov	r1, r3
 8006520:	6838      	ldr	r0, [r7, #0]
 8006522:	f7fe fc17 	bl	8004d54 <ensure>
 8006526:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <print_object+0x1f0>
    {
        return false;
 800652e:	2300      	movs	r3, #0
 8006530:	e022      	b.n	8006578 <print_object+0x236>
    }
    if (output_buffer->format)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d010      	beq.n	800655c <print_object+0x21a>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800653a:	2300      	movs	r3, #0
 800653c:	613b      	str	r3, [r7, #16]
 800653e:	e007      	b.n	8006550 <print_object+0x20e>
        {
            *output_pointer++ = '\t';
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	1c5a      	adds	r2, r3, #1
 8006544:	61fa      	str	r2, [r7, #28]
 8006546:	2209      	movs	r2, #9
 8006548:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	3301      	adds	r3, #1
 800654e:	613b      	str	r3, [r7, #16]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	3b01      	subs	r3, #1
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	429a      	cmp	r2, r3
 800655a:	d3f1      	bcc.n	8006540 <print_object+0x1fe>
        }
    }
    *output_pointer++ = '}';
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	1c5a      	adds	r2, r3, #1
 8006560:	61fa      	str	r2, [r7, #28]
 8006562:	227d      	movs	r2, #125	; 0x7d
 8006564:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	2200      	movs	r2, #0
 800656a:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	1e5a      	subs	r2, r3, #1
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	60da      	str	r2, [r3, #12]

    return true;
 8006576:	2301      	movs	r3, #1
}
 8006578:	4618      	mov	r0, r3
 800657a:	3720      	adds	r7, #32
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static J *get_object_item(const J * const object, const char * const name, const Jbool case_sensitive)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
    J *current_element = NULL;
 800658c:	2300      	movs	r3, #0
 800658e:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <get_object_item+0x1c>
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <get_object_item+0x20>
    {
        return NULL;
 800659c:	2300      	movs	r3, #0
 800659e:	e026      	b.n	80065ee <get_object_item+0x6e>
    }

    current_element = object->child;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d013      	beq.n	80065d4 <get_object_item+0x54>
    {
        while ((current_element != NULL) && (strcmp(name, current_element->string) != 0))
 80065ac:	e002      	b.n	80065b4 <get_object_item+0x34>
        {
            current_element = current_element->next;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (strcmp(name, current_element->string) != 0))
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d018      	beq.n	80065ec <get_object_item+0x6c>
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	4619      	mov	r1, r3
 80065c0:	68b8      	ldr	r0, [r7, #8]
 80065c2:	f7f9 fdc5 	bl	8000150 <strcmp>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1f0      	bne.n	80065ae <get_object_item+0x2e>
 80065cc:	e00e      	b.n	80065ec <get_object_item+0x6c>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d008      	beq.n	80065ec <get_object_item+0x6c>
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	4619      	mov	r1, r3
 80065e0:	68b8      	ldr	r0, [r7, #8]
 80065e2:	f7fe f97b 	bl	80048dc <case_insensitive_strcmp>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1f0      	bne.n	80065ce <get_object_item+0x4e>
        }
    }

    return current_element;
 80065ec:	697b      	ldr	r3, [r7, #20]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3718      	adds	r7, #24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <JGetObjectItem>:

N_CJSON_PUBLIC(J *) JGetObjectItem(const J * const object, const char * const string)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b082      	sub	sp, #8
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8006600:	2200      	movs	r2, #0
 8006602:	6839      	ldr	r1, [r7, #0]
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f7ff ffbb 	bl	8006580 <get_object_item>
 800660a:	4603      	mov	r3, r0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3708      	adds	r7, #8
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <suffix_object>:
    return JGetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(J *prev, J *item)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
    prev->next = item;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	605a      	str	r2, [r3, #4]
}
 800662a:	bf00      	nop
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	bc80      	pop	{r7}
 8006632:	4770      	bx	lr

08006634 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static Jbool add_item_to_array(J *array, J *item)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
    J *child = NULL;
 800663e:	2300      	movs	r3, #0
 8006640:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL))
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d002      	beq.n	800664e <add_item_to_array+0x1a>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <add_item_to_array+0x1e>
    {
        return false;
 800664e:	2300      	movs	r3, #0
 8006650:	e015      	b.n	800667e <add_item_to_array+0x4a>
    }

    child = array->child;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	60fb      	str	r3, [r7, #12]

    if (child == NULL)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d106      	bne.n	800666c <add_item_to_array+0x38>
    {
        /* list is empty, start new one */
        array->child = item;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	609a      	str	r2, [r3, #8]
 8006664:	e00a      	b.n	800667c <add_item_to_array+0x48>
    else
    {
        /* append to the end */
        while (child->next)
        {
            child = child->next;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	60fb      	str	r3, [r7, #12]
        while (child->next)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1f8      	bne.n	8006666 <add_item_to_array+0x32>
        }
        suffix_object(child, item);
 8006674:	6839      	ldr	r1, [r7, #0]
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f7ff ffcc 	bl	8006614 <suffix_object>
    }

    return true;
 800667c:	2301      	movs	r3, #1
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8006686:	b480      	push	{r7}
 8006688:	b083      	sub	sp, #12
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
    return (void*)string;
 800668e:	687b      	ldr	r3, [r7, #4]
}
 8006690:	4618      	mov	r0, r3
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	bc80      	pop	{r7}
 8006698:	4770      	bx	lr

0800669a <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static Jbool add_item_to_object(J * const object, const char * const string, J * const item, const internal_hooks * const hooks, const Jbool constant_key)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b086      	sub	sp, #24
 800669e:	af00      	add	r7, sp, #0
 80066a0:	60f8      	str	r0, [r7, #12]
 80066a2:	60b9      	str	r1, [r7, #8]
 80066a4:	607a      	str	r2, [r7, #4]
 80066a6:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 80066a8:	2300      	movs	r3, #0
 80066aa:	617b      	str	r3, [r7, #20]
    int new_type = JInvalid;
 80066ac:	2300      	movs	r3, #0
 80066ae:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL))
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d005      	beq.n	80066c2 <add_item_to_object+0x28>
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d002      	beq.n	80066c2 <add_item_to_object+0x28>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <add_item_to_object+0x2c>
    {
        return false;
 80066c2:	2300      	movs	r3, #0
 80066c4:	e036      	b.n	8006734 <add_item_to_object+0x9a>
    }

    if (constant_key)
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d009      	beq.n	80066e0 <add_item_to_object+0x46>
    {
        new_key = (char*)cast_away_const(string);
 80066cc:	68b8      	ldr	r0, [r7, #8]
 80066ce:	f7ff ffda 	bl	8006686 <cast_away_const>
 80066d2:	6178      	str	r0, [r7, #20]
        new_type = item->type | JStringIsConst;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066dc:	613b      	str	r3, [r7, #16]
 80066de:	e00e      	b.n	80066fe <add_item_to_object+0x64>
    }
    else
    {
        new_key = (char*)Jstrdup((const unsigned char*)string, hooks);
 80066e0:	6839      	ldr	r1, [r7, #0]
 80066e2:	68b8      	ldr	r0, [r7, #8]
 80066e4:	f7fe f96a 	bl	80049bc <Jstrdup>
 80066e8:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <add_item_to_object+0x5a>
        {
            return false;
 80066f0:	2300      	movs	r3, #0
 80066f2:	e01f      	b.n	8006734 <add_item_to_object+0x9a>
        }

        new_type = item->type & ~JStringIsConst;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066fc:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & JStringIsConst) && (item->string != NULL))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006706:	2b00      	cmp	r3, #0
 8006708:	d109      	bne.n	800671e <add_item_to_object+0x84>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d005      	beq.n	800671e <add_item_to_object+0x84>
    {
        hooks->deallocate(item->string);
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	6a12      	ldr	r2, [r2, #32]
 800671a:	4610      	mov	r0, r2
 800671c:	4798      	blx	r3
    }

    item->string = new_key;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 800672a:	6879      	ldr	r1, [r7, #4]
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f7ff ff81 	bl	8006634 <add_item_to_array>
 8006732:	4603      	mov	r3, r0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3718      	adds	r7, #24
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <JAddItemToObject>:

N_CJSON_PUBLIC(void) JAddItemToObject(J *object, const char *string, J *item)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af02      	add	r7, sp, #8
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
    add_item_to_object(object, string, item, &global_hooks, false);
 8006748:	2300      	movs	r3, #0
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	4b04      	ldr	r3, [pc, #16]	; (8006760 <JAddItemToObject+0x24>)
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	68b9      	ldr	r1, [r7, #8]
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f7ff ffa1 	bl	800669a <add_item_to_object>
}
 8006758:	bf00      	nop
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	20000058 	.word	0x20000058

08006764 <JAddBoolToObject>:
    JDelete(false_item);
    return NULL;
}

N_CJSON_PUBLIC(J*) JAddBoolToObject(J * const object, const char * const name, const Jbool boolean)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af02      	add	r7, sp, #8
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
    J *bool_item = JCreateBool(boolean);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 f85f 	bl	8006834 <JCreateBool>
 8006776:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, bool_item, &global_hooks, false))
 8006778:	2300      	movs	r3, #0
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	4b09      	ldr	r3, [pc, #36]	; (80067a4 <JAddBoolToObject+0x40>)
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	68b9      	ldr	r1, [r7, #8]
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f7ff ff89 	bl	800669a <add_item_to_object>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <JAddBoolToObject+0x2e>
    {
        return bool_item;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	e003      	b.n	800679a <JAddBoolToObject+0x36>
    }

    JDelete(bool_item);
 8006792:	6978      	ldr	r0, [r7, #20]
 8006794:	f7fe f95e 	bl	8004a54 <JDelete>
    return NULL;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3718      	adds	r7, #24
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	20000058 	.word	0x20000058

080067a8 <JAddNumberToObject>:

N_CJSON_PUBLIC(J*) JAddNumberToObject(J * const object, const char * const name, const double number)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b088      	sub	sp, #32
 80067ac:	af02      	add	r7, sp, #8
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	e9c7 2300 	strd	r2, r3, [r7]
    J *number_item = JCreateNumber(number);
 80067b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067ba:	f000 f855 	bl	8006868 <JCreateNumber>
 80067be:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 80067c0:	2300      	movs	r3, #0
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	4b09      	ldr	r3, [pc, #36]	; (80067ec <JAddNumberToObject+0x44>)
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	68b9      	ldr	r1, [r7, #8]
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f7ff ff65 	bl	800669a <add_item_to_object>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d001      	beq.n	80067da <JAddNumberToObject+0x32>
    {
        return number_item;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	e003      	b.n	80067e2 <JAddNumberToObject+0x3a>
    }

    JDelete(number_item);
 80067da:	6978      	ldr	r0, [r7, #20]
 80067dc:	f7fe f93a 	bl	8004a54 <JDelete>
    return NULL;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3718      	adds	r7, #24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	20000058 	.word	0x20000058

080067f0 <JAddStringToObject>:

N_CJSON_PUBLIC(J*) JAddStringToObject(J * const object, const char * const name, const char * const string)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b088      	sub	sp, #32
 80067f4:	af02      	add	r7, sp, #8
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
    J *string_item = JCreateString(string);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f87b 	bl	80068f8 <JCreateString>
 8006802:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
 8006804:	2300      	movs	r3, #0
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	4b09      	ldr	r3, [pc, #36]	; (8006830 <JAddStringToObject+0x40>)
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	68b9      	ldr	r1, [r7, #8]
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f7ff ff43 	bl	800669a <add_item_to_object>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <JAddStringToObject+0x2e>
    {
        return string_item;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	e003      	b.n	8006826 <JAddStringToObject+0x36>
    }

    JDelete(string_item);
 800681e:	6978      	ldr	r0, [r7, #20]
 8006820:	f7fe f918 	bl	8004a54 <JDelete>
    return NULL;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3718      	adds	r7, #24
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	20000058 	.word	0x20000058

08006834 <JCreateBool>:

    return item;
}

N_CJSON_PUBLIC(J *) JCreateBool(Jbool b)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
    J *item = JNew_Item(&global_hooks);
 800683c:	4809      	ldr	r0, [pc, #36]	; (8006864 <JCreateBool+0x30>)
 800683e:	f7fe f8f3 	bl	8004a28 <JNew_Item>
 8006842:	60f8      	str	r0, [r7, #12]
    if(item)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d007      	beq.n	800685a <JCreateBool+0x26>
    {
        item->type = b ? JTrue : JFalse;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <JCreateBool+0x20>
 8006850:	2202      	movs	r2, #2
 8006852:	e000      	b.n	8006856 <JCreateBool+0x22>
 8006854:	2201      	movs	r2, #1
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	60da      	str	r2, [r3, #12]
    }

    return item;
 800685a:	68fb      	ldr	r3, [r7, #12]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3710      	adds	r7, #16
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	20000058 	.word	0x20000058

08006868 <JCreateNumber>:

N_CJSON_PUBLIC(J *) JCreateNumber(double num)
{
 8006868:	b590      	push	{r4, r7, lr}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	e9c7 0100 	strd	r0, r1, [r7]
    J *item = JNew_Item(&global_hooks);
 8006872:	481f      	ldr	r0, [pc, #124]	; (80068f0 <JCreateNumber+0x88>)
 8006874:	f7fe f8d8 	bl	8004a28 <JNew_Item>
 8006878:	60f8      	str	r0, [r7, #12]
    if(item)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d02c      	beq.n	80068da <JCreateNumber+0x72>
    {
        item->type = JNumber;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2208      	movs	r2, #8
 8006884:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	e9d7 3400 	ldrd	r3, r4, [r7]
 800688c:	e9c2 3406 	strd	r3, r4, [r2, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8006890:	a315      	add	r3, pc, #84	; (adr r3, 80068e8 <JCreateNumber+0x80>)
 8006892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006896:	e9d7 0100 	ldrd	r0, r1, [r7]
 800689a:	f7fa f8ad 	bl	80009f8 <__aeabi_dcmpge>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d004      	beq.n	80068ae <JCreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80068aa:	615a      	str	r2, [r3, #20]
 80068ac:	e015      	b.n	80068da <JCreateNumber+0x72>
        }
        else if (num <= INT_MIN)
 80068ae:	f04f 0200 	mov.w	r2, #0
 80068b2:	4b10      	ldr	r3, [pc, #64]	; (80068f4 <JCreateNumber+0x8c>)
 80068b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068b8:	f7fa f894 	bl	80009e4 <__aeabi_dcmple>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d004      	beq.n	80068cc <JCreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80068c8:	615a      	str	r2, [r3, #20]
 80068ca:	e006      	b.n	80068da <JCreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 80068cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068d0:	f7fa f8a6 	bl	8000a20 <__aeabi_d2iz>
 80068d4:	4602      	mov	r2, r0
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 80068da:	68fb      	ldr	r3, [r7, #12]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3714      	adds	r7, #20
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd90      	pop	{r4, r7, pc}
 80068e4:	f3af 8000 	nop.w
 80068e8:	ffc00000 	.word	0xffc00000
 80068ec:	41dfffff 	.word	0x41dfffff
 80068f0:	20000058 	.word	0x20000058
 80068f4:	c1e00000 	.word	0xc1e00000

080068f8 <JCreateString>:

N_CJSON_PUBLIC(J *) JCreateString(const char *string)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
    J *item = JNew_Item(&global_hooks);
 8006900:	480f      	ldr	r0, [pc, #60]	; (8006940 <JCreateString+0x48>)
 8006902:	f7fe f891 	bl	8004a28 <JNew_Item>
 8006906:	60f8      	str	r0, [r7, #12]
    if(item)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d012      	beq.n	8006934 <JCreateString+0x3c>
    {
        item->type = JString;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2210      	movs	r2, #16
 8006912:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)Jstrdup((const unsigned char*)string, &global_hooks);
 8006914:	490a      	ldr	r1, [pc, #40]	; (8006940 <JCreateString+0x48>)
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f7fe f850 	bl	80049bc <Jstrdup>
 800691c:	4602      	mov	r2, r0
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d104      	bne.n	8006934 <JCreateString+0x3c>
        {
            JDelete(item);
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f7fe f892 	bl	8004a54 <JDelete>
            return NULL;
 8006930:	2300      	movs	r3, #0
 8006932:	e000      	b.n	8006936 <JCreateString+0x3e>
        }
    }

    return item;
 8006934:	68fb      	ldr	r3, [r7, #12]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	20000058 	.word	0x20000058

08006944 <JCreateObject>:

    return item;
}

N_CJSON_PUBLIC(J *) JCreateObject(void)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
    J *item = JNew_Item(&global_hooks);
 800694a:	4807      	ldr	r0, [pc, #28]	; (8006968 <JCreateObject+0x24>)
 800694c:	f7fe f86c 	bl	8004a28 <JNew_Item>
 8006950:	6078      	str	r0, [r7, #4]
    if (item)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d002      	beq.n	800695e <JCreateObject+0x1a>
    {
        item->type = JObject;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2240      	movs	r2, #64	; 0x40
 800695c:	60da      	str	r2, [r3, #12]
    }

    return item;
 800695e:	687b      	ldr	r3, [r7, #4]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	20000058 	.word	0x20000058

0800696c <JIsNumber>:

    return (item->type & 0xFF) == JNULL;
}

N_CJSON_PUBLIC(Jbool) JIsNumber(const J * const item)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <JIsNumber+0x12>
    {
        return false;
 800697a:	2300      	movs	r3, #0
 800697c:	e007      	b.n	800698e <JIsNumber+0x22>
    }

    return (item->type & 0xFF) == JNumber;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b08      	cmp	r3, #8
 8006986:	bf0c      	ite	eq
 8006988:	2301      	moveq	r3, #1
 800698a:	2300      	movne	r3, #0
 800698c:	b2db      	uxtb	r3, r3
}
 800698e:	4618      	mov	r0, r3
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	bc80      	pop	{r7}
 8006996:	4770      	bx	lr

08006998 <JIsString>:

N_CJSON_PUBLIC(Jbool) JIsString(const J * const item)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <JIsString+0x12>
    {
        return false;
 80069a6:	2300      	movs	r3, #0
 80069a8:	e007      	b.n	80069ba <JIsString+0x22>
    }

    return (item->type & 0xFF) == JString;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b10      	cmp	r3, #16
 80069b2:	bf0c      	ite	eq
 80069b4:	2301      	moveq	r3, #1
 80069b6:	2300      	movne	r3, #0
 80069b8:	b2db      	uxtb	r3, r3
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	bc80      	pop	{r7}
 80069c2:	4770      	bx	lr

080069c4 <JGetNumber>:
        return NULL;
    return item;
}

// Return a number from the specified JSON object, or 0 if it's not present
double JGetNumber(J *rsp, const char *field) {
 80069c4:	b590      	push	{r4, r7, lr}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
    if (rsp == NULL)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d104      	bne.n	80069de <JGetNumber+0x1a>
        return 0.0;
 80069d4:	f04f 0300 	mov.w	r3, #0
 80069d8:	f04f 0400 	mov.w	r4, #0
 80069dc:	e01c      	b.n	8006a18 <JGetNumber+0x54>
    J *item = JGetObjectItem(rsp, field);
 80069de:	6839      	ldr	r1, [r7, #0]
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7ff fe08 	bl	80065f6 <JGetObjectItem>
 80069e6:	60f8      	str	r0, [r7, #12]
    if (item == NULL)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d104      	bne.n	80069f8 <JGetNumber+0x34>
        return 0.0;
 80069ee:	f04f 0300 	mov.w	r3, #0
 80069f2:	f04f 0400 	mov.w	r4, #0
 80069f6:	e00f      	b.n	8006a18 <JGetNumber+0x54>
    if (!JIsNumber(item))
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f7ff ffb7 	bl	800696c <JIsNumber>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d104      	bne.n	8006a0e <JGetNumber+0x4a>
        return 0.0;
 8006a04:	f04f 0300 	mov.w	r3, #0
 8006a08:	f04f 0400 	mov.w	r4, #0
 8006a0c:	e004      	b.n	8006a18 <JGetNumber+0x54>
    return item->valuedouble;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f103 0418 	add.w	r4, r3, #24
 8006a14:	e9d4 3400 	ldrd	r3, r4, [r4]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	4621      	mov	r1, r4
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd90      	pop	{r4, r7, pc}

08006a22 <JIsNullString>:
        return 0.0;
    return JIsTrue(item);
}

// Return true if the object is valid and if the field is not present or if it's null
bool JIsNullString(J *rsp, const char *field) {
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b084      	sub	sp, #16
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	6039      	str	r1, [r7, #0]
    if (rsp == NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <JIsNullString+0x14>
        return false;
 8006a32:	2300      	movs	r3, #0
 8006a34:	e01f      	b.n	8006a76 <JIsNullString+0x54>
    J *item = JGetObjectItem(rsp, field);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f7ff fddc 	bl	80065f6 <JGetObjectItem>
 8006a3e:	60f8      	str	r0, [r7, #12]
    if (item == NULL)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <JIsNullString+0x28>
        return true;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e015      	b.n	8006a76 <JIsNullString+0x54>
    if (!JIsString(item))
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f7ff ffa4 	bl	8006998 <JIsString>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <JIsNullString+0x38>
        return false;
 8006a56:	2300      	movs	r3, #0
 8006a58:	e00d      	b.n	8006a76 <JIsNullString+0x54>
    if (item->valuestring == NULL)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <JIsNullString+0x44>
        return true;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e007      	b.n	8006a76 <JIsNullString+0x54>
    if (item->valuestring[0] == '\0')
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d101      	bne.n	8006a74 <JIsNullString+0x52>
        return true;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e000      	b.n	8006a76 <JIsNullString+0x54>
    return false;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
	...

08006a80 <JNtoA>:
	0.0000000005,		// 9
	0.00000000005		// 10
};

char * JNtoA(double f, char * buf, int original_precision)
{
 8006a80:	b5b0      	push	{r4, r5, r7, lr}
 8006a82:	b08e      	sub	sp, #56	; 0x38
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
 8006a8c:	603b      	str	r3, [r7, #0]
	char * ptr = buf;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	637b      	str	r3, [r7, #52]	; 0x34
	char * p = ptr;
 8006a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a94:	633b      	str	r3, [r7, #48]	; 0x30
	char c;
	long intPart;

	// Check specifically for uncommon but bad floating point numbers that can't be converted
	uint8_t fbytes[8];
	memcpy(&fbytes, &f, sizeof(fbytes));
 8006a96:	f107 0310 	add.w	r3, r7, #16
 8006a9a:	f107 0208 	add.w	r2, r7, #8
 8006a9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006aa2:	e883 0003 	stmia.w	r3, {r0, r1}
	bool wasFF = true;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int i;
	for (i=0; i<(int)sizeof(fbytes); i++)
 8006aac:	2300      	movs	r3, #0
 8006aae:	623b      	str	r3, [r7, #32]
 8006ab0:	e00c      	b.n	8006acc <JNtoA+0x4c>
		if (fbytes[i] != 0xff) wasFF = false;
 8006ab2:	f107 0210 	add.w	r2, r7, #16
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	4413      	add	r3, r2
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	2bff      	cmp	r3, #255	; 0xff
 8006abe:	d002      	beq.n	8006ac6 <JNtoA+0x46>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i=0; i<(int)sizeof(fbytes); i++)
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	623b      	str	r3, [r7, #32]
 8006acc:	6a3b      	ldr	r3, [r7, #32]
 8006ace:	2b07      	cmp	r3, #7
 8006ad0:	ddef      	ble.n	8006ab2 <JNtoA+0x32>
	if (wasFF)
 8006ad2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d005      	beq.n	8006ae6 <JNtoA+0x66>
		f = 0.0;
 8006ada:	f04f 0200 	mov.w	r2, #0
 8006ade:	f04f 0300 	mov.w	r3, #0
 8006ae2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// check precision bounds
	int precision = original_precision;
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	61fb      	str	r3, [r7, #28]
	if (precision < 0 || precision > JNTOA_PRECISION)
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	db02      	blt.n	8006af6 <JNtoA+0x76>
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	2b0a      	cmp	r3, #10
 8006af4:	dd01      	ble.n	8006afa <JNtoA+0x7a>
		precision = JNTOA_PRECISION;
 8006af6:	230a      	movs	r3, #10
 8006af8:	61fb      	str	r3, [r7, #28]

	// sign stuff
	if (f < 0)
 8006afa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006afe:	f04f 0200 	mov.w	r2, #0
 8006b02:	f04f 0300 	mov.w	r3, #0
 8006b06:	f7f9 ff63 	bl	80009d0 <__aeabi_dcmplt>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00b      	beq.n	8006b28 <JNtoA+0xa8>
	{
		f = -f;
 8006b10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b14:	4614      	mov	r4, r2
 8006b16:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8006b1a:	e9c7 4502 	strd	r4, r5, [r7, #8]
		*ptr++ = '-';
 8006b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b20:	1c5a      	adds	r2, r3, #1
 8006b22:	637a      	str	r2, [r7, #52]	; 0x34
 8006b24:	222d      	movs	r2, #45	; 0x2d
 8006b26:	701a      	strb	r2, [r3, #0]
	}

	if (original_precision < 0)	 // negative precision == automatic precision guess
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	da4f      	bge.n	8006bce <JNtoA+0x14e>
	{
		if (f < 1.0) precision = 6;
 8006b2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b32:	f04f 0200 	mov.w	r2, #0
 8006b36:	4b98      	ldr	r3, [pc, #608]	; (8006d98 <JNtoA+0x318>)
 8006b38:	f7f9 ff4a 	bl	80009d0 <__aeabi_dcmplt>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d002      	beq.n	8006b48 <JNtoA+0xc8>
 8006b42:	2306      	movs	r3, #6
 8006b44:	61fb      	str	r3, [r7, #28]
 8006b46:	e042      	b.n	8006bce <JNtoA+0x14e>
		else if (f < 10.0) precision = 5;
 8006b48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b4c:	f04f 0200 	mov.w	r2, #0
 8006b50:	4b92      	ldr	r3, [pc, #584]	; (8006d9c <JNtoA+0x31c>)
 8006b52:	f7f9 ff3d 	bl	80009d0 <__aeabi_dcmplt>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d002      	beq.n	8006b62 <JNtoA+0xe2>
 8006b5c:	2305      	movs	r3, #5
 8006b5e:	61fb      	str	r3, [r7, #28]
 8006b60:	e035      	b.n	8006bce <JNtoA+0x14e>
		else if (f < 100.0) precision = 4;
 8006b62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b66:	f04f 0200 	mov.w	r2, #0
 8006b6a:	4b8d      	ldr	r3, [pc, #564]	; (8006da0 <JNtoA+0x320>)
 8006b6c:	f7f9 ff30 	bl	80009d0 <__aeabi_dcmplt>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d002      	beq.n	8006b7c <JNtoA+0xfc>
 8006b76:	2304      	movs	r3, #4
 8006b78:	61fb      	str	r3, [r7, #28]
 8006b7a:	e028      	b.n	8006bce <JNtoA+0x14e>
		else if (f < 1000.0) precision = 3;
 8006b7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b80:	f04f 0200 	mov.w	r2, #0
 8006b84:	4b87      	ldr	r3, [pc, #540]	; (8006da4 <JNtoA+0x324>)
 8006b86:	f7f9 ff23 	bl	80009d0 <__aeabi_dcmplt>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d002      	beq.n	8006b96 <JNtoA+0x116>
 8006b90:	2303      	movs	r3, #3
 8006b92:	61fb      	str	r3, [r7, #28]
 8006b94:	e01b      	b.n	8006bce <JNtoA+0x14e>
		else if (f < 10000.0) precision = 2;
 8006b96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b9a:	a37b      	add	r3, pc, #492	; (adr r3, 8006d88 <JNtoA+0x308>)
 8006b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba0:	f7f9 ff16 	bl	80009d0 <__aeabi_dcmplt>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d002      	beq.n	8006bb0 <JNtoA+0x130>
 8006baa:	2302      	movs	r3, #2
 8006bac:	61fb      	str	r3, [r7, #28]
 8006bae:	e00e      	b.n	8006bce <JNtoA+0x14e>
		else if (f < 100000.0) precision = 1;
 8006bb0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006bb4:	a376      	add	r3, pc, #472	; (adr r3, 8006d90 <JNtoA+0x310>)
 8006bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bba:	f7f9 ff09 	bl	80009d0 <__aeabi_dcmplt>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <JNtoA+0x14a>
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	61fb      	str	r3, [r7, #28]
 8006bc8:	e001      	b.n	8006bce <JNtoA+0x14e>
		else precision = 0;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	61fb      	str	r3, [r7, #28]
	}

	// round value according the precision
	if (precision)
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00f      	beq.n	8006bf4 <JNtoA+0x174>
		f += rounders[precision];
 8006bd4:	4a74      	ldr	r2, [pc, #464]	; (8006da8 <JNtoA+0x328>)
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	00db      	lsls	r3, r3, #3
 8006bda:	4413      	add	r3, r2
 8006bdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006be0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006be4:	461a      	mov	r2, r3
 8006be6:	4623      	mov	r3, r4
 8006be8:	f7f9 faca 	bl	8000180 <__adddf3>
 8006bec:	4603      	mov	r3, r0
 8006bee:	460c      	mov	r4, r1
 8006bf0:	e9c7 3402 	strd	r3, r4, [r7, #8]

	// integer part...
	intPart = f;
 8006bf4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	4621      	mov	r1, r4
 8006bfc:	f7f9 ff10 	bl	8000a20 <__aeabi_d2iz>
 8006c00:	4603      	mov	r3, r0
 8006c02:	62bb      	str	r3, [r7, #40]	; 0x28
	f -= intPart;
 8006c04:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c0a:	f7f9 fc05 	bl	8000418 <__aeabi_i2d>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	460b      	mov	r3, r1
 8006c12:	4620      	mov	r0, r4
 8006c14:	4629      	mov	r1, r5
 8006c16:	f7f9 fab1 	bl	800017c <__aeabi_dsub>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	460c      	mov	r4, r1
 8006c1e:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (!intPart)
 8006c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d105      	bne.n	8006c34 <JNtoA+0x1b4>
		*ptr++ = '0';
 8006c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c2a:	1c5a      	adds	r2, r3, #1
 8006c2c:	637a      	str	r2, [r7, #52]	; 0x34
 8006c2e:	2230      	movs	r2, #48	; 0x30
 8006c30:	701a      	strb	r2, [r3, #0]
 8006c32:	e03a      	b.n	8006caa <JNtoA+0x22a>
	else
	{
		// save start pointer
		p = ptr;
 8006c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c36:	633b      	str	r3, [r7, #48]	; 0x30

		// convert (reverse order)
		while (intPart)
 8006c38:	e01a      	b.n	8006c70 <JNtoA+0x1f0>
		{
			*p++ = '0' + intPart % 10;
 8006c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c3c:	4b5b      	ldr	r3, [pc, #364]	; (8006dac <JNtoA+0x32c>)
 8006c3e:	fb83 1302 	smull	r1, r3, r3, r2
 8006c42:	1099      	asrs	r1, r3, #2
 8006c44:	17d3      	asrs	r3, r2, #31
 8006c46:	1ac9      	subs	r1, r1, r3
 8006c48:	460b      	mov	r3, r1
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	440b      	add	r3, r1
 8006c4e:	005b      	lsls	r3, r3, #1
 8006c50:	1ad1      	subs	r1, r2, r3
 8006c52:	b2ca      	uxtb	r2, r1
 8006c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c56:	1c59      	adds	r1, r3, #1
 8006c58:	6339      	str	r1, [r7, #48]	; 0x30
 8006c5a:	3230      	adds	r2, #48	; 0x30
 8006c5c:	b2d2      	uxtb	r2, r2
 8006c5e:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 8006c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c62:	4a52      	ldr	r2, [pc, #328]	; (8006dac <JNtoA+0x32c>)
 8006c64:	fb82 1203 	smull	r1, r2, r2, r3
 8006c68:	1092      	asrs	r2, r2, #2
 8006c6a:	17db      	asrs	r3, r3, #31
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	62bb      	str	r3, [r7, #40]	; 0x28
		while (intPart)
 8006c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1e1      	bne.n	8006c3a <JNtoA+0x1ba>
		}

		// save end pos
		p1 = p;
 8006c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c78:	61bb      	str	r3, [r7, #24]

		// reverse result
		while (p > ptr)
 8006c7a:	e010      	b.n	8006c9e <JNtoA+0x21e>
		{
			c = *--p;
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	633b      	str	r3, [r7, #48]	; 0x30
 8006c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			*p = *ptr;
 8006c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8c:	781a      	ldrb	r2, [r3, #0]
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c90:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 8006c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c94:	1c5a      	adds	r2, r3, #1
 8006c96:	637a      	str	r2, [r7, #52]	; 0x34
 8006c98:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006c9c:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 8006c9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d8ea      	bhi.n	8006c7c <JNtoA+0x1fc>
		}

		// restore end pos
		ptr = p1;
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	637b      	str	r3, [r7, #52]	; 0x34
	}

	// decimal part
	if (precision)
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d03e      	beq.n	8006d2e <JNtoA+0x2ae>
	{

		// place decimal point
		*ptr++ = '.';
 8006cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb2:	1c5a      	adds	r2, r3, #1
 8006cb4:	637a      	str	r2, [r7, #52]	; 0x34
 8006cb6:	222e      	movs	r2, #46	; 0x2e
 8006cb8:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 8006cba:	e033      	b.n	8006d24 <JNtoA+0x2a4>
		{
			f *= 10.0;
 8006cbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006cc0:	f04f 0200 	mov.w	r2, #0
 8006cc4:	4b35      	ldr	r3, [pc, #212]	; (8006d9c <JNtoA+0x31c>)
 8006cc6:	f7f9 fc11 	bl	80004ec <__aeabi_dmul>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	460c      	mov	r4, r1
 8006cce:	e9c7 3402 	strd	r3, r4, [r7, #8]
			c = f;
 8006cd2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	4621      	mov	r1, r4
 8006cda:	f7f9 fec9 	bl	8000a70 <__aeabi_d2uiz>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

			// Invalid floating point numbers (specifically 0xffffff) end up at this point
			// with a c == 255 after the coercion
			if (c > 9) c = 0;
 8006ce4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ce8:	2b09      	cmp	r3, #9
 8006cea:	d902      	bls.n	8006cf2 <JNtoA+0x272>
 8006cec:	2300      	movs	r3, #0
 8006cee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

			*ptr++ = '0' + c;
 8006cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf4:	1c5a      	adds	r2, r3, #1
 8006cf6:	637a      	str	r2, [r7, #52]	; 0x34
 8006cf8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006cfc:	3230      	adds	r2, #48	; 0x30
 8006cfe:	b2d2      	uxtb	r2, r2
 8006d00:	701a      	strb	r2, [r3, #0]
			f -= c;
 8006d02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7f9 fb84 	bl	8000418 <__aeabi_i2d>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4620      	mov	r0, r4
 8006d16:	4629      	mov	r1, r5
 8006d18:	f7f9 fa30 	bl	800017c <__aeabi_dsub>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	460c      	mov	r4, r1
 8006d20:	e9c7 3402 	strd	r3, r4, [r7, #8]
		while (precision--)
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	1e5a      	subs	r2, r3, #1
 8006d28:	61fa      	str	r2, [r7, #28]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1c6      	bne.n	8006cbc <JNtoA+0x23c>
		}
	}

	// terminating zero
	*ptr = 0;
 8006d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d30:	2200      	movs	r2, #0
 8006d32:	701a      	strb	r2, [r3, #0]

	// Remove trailing zero's if automatic precision
	if (NULL != strchr(buf, '.')) {
 8006d34:	212e      	movs	r1, #46	; 0x2e
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fd62 	bl	8007800 <strchr>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d01b      	beq.n	8006d7a <JNtoA+0x2fa>
		if (original_precision < 0) {
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	da18      	bge.n	8006d7a <JNtoA+0x2fa>
			--ptr;
 8006d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	637b      	str	r3, [r7, #52]	; 0x34
			while (ptr > (buf+1) && *ptr == '0')
 8006d4e:	e004      	b.n	8006d5a <JNtoA+0x2da>
				*ptr-- = 0;
 8006d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d52:	1e5a      	subs	r2, r3, #1
 8006d54:	637a      	str	r2, [r7, #52]	; 0x34
 8006d56:	2200      	movs	r2, #0
 8006d58:	701a      	strb	r2, [r3, #0]
			while (ptr > (buf+1) && *ptr == '0')
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d903      	bls.n	8006d6c <JNtoA+0x2ec>
 8006d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	2b30      	cmp	r3, #48	; 0x30
 8006d6a:	d0f1      	beq.n	8006d50 <JNtoA+0x2d0>
			if (*ptr == '.')
 8006d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	2b2e      	cmp	r3, #46	; 0x2e
 8006d72:	d102      	bne.n	8006d7a <JNtoA+0x2fa>
				*ptr = 0;
 8006d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d76:	2200      	movs	r2, #0
 8006d78:	701a      	strb	r2, [r3, #0]
		}
	}

	return buf;
 8006d7a:	687b      	ldr	r3, [r7, #4]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3738      	adds	r7, #56	; 0x38
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bdb0      	pop	{r4, r5, r7, pc}
 8006d84:	f3af 8000 	nop.w
 8006d88:	00000000 	.word	0x00000000
 8006d8c:	40c38800 	.word	0x40c38800
 8006d90:	00000000 	.word	0x00000000
 8006d94:	40f86a00 	.word	0x40f86a00
 8006d98:	3ff00000 	.word	0x3ff00000
 8006d9c:	40240000 	.word	0x40240000
 8006da0:	40590000 	.word	0x40590000
 8006da4:	408f4000 	.word	0x408f4000
 8006da8:	08008298 	.word	0x08008298
 8006dac:	66666667 	.word	0x66666667

08006db0 <NoteSetFn>:
        hookDelayMs = delayfn;
    if (hookGetMs == NULL)
        hookGetMs = millisfn;
}
// Set the debug output hook
void NoteSetFn(mallocFn mallocfn, freeFn freefn, delayMsFn delayfn, getMsFn millisfn) {
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
 8006dbc:	603b      	str	r3, [r7, #0]
    hookMalloc = mallocfn;
 8006dbe:	4a08      	ldr	r2, [pc, #32]	; (8006de0 <NoteSetFn+0x30>)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6013      	str	r3, [r2, #0]
    hookFree = freefn;
 8006dc4:	4a07      	ldr	r2, [pc, #28]	; (8006de4 <NoteSetFn+0x34>)
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	6013      	str	r3, [r2, #0]
    hookDelayMs = delayfn;
 8006dca:	4a07      	ldr	r2, [pc, #28]	; (8006de8 <NoteSetFn+0x38>)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6013      	str	r3, [r2, #0]
    hookGetMs = millisfn;
 8006dd0:	4a06      	ldr	r2, [pc, #24]	; (8006dec <NoteSetFn+0x3c>)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	6013      	str	r3, [r2, #0]
}
 8006dd6:	bf00      	nop
 8006dd8:	3714      	adds	r7, #20
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bc80      	pop	{r7}
 8006dde:	4770      	bx	lr
 8006de0:	20000484 	.word	0x20000484
 8006de4:	20000488 	.word	0x20000488
 8006de8:	2000048c 	.word	0x2000048c
 8006dec:	20000490 	.word	0x20000490

08006df0 <NoteSetFnSerial>:
    hookLockI2C = lockI2Cfn;
    hookUnlockI2C = unlockI2Cfn;
    hookLockNote = lockNotefn;
    hookUnlockNote = unlockNotefn;
}
void NoteSetFnSerial(serialResetFn resetfn, serialTransmitFn transmitfn, serialAvailableFn availfn, serialReceiveFn receivefn) {
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
 8006dfc:	603b      	str	r3, [r7, #0]
    hookActiveInterface = interfaceSerial;
 8006dfe:	4b0d      	ldr	r3, [pc, #52]	; (8006e34 <NoteSetFnSerial+0x44>)
 8006e00:	2201      	movs	r2, #1
 8006e02:	601a      	str	r2, [r3, #0]

    hookSerialReset = resetfn;
 8006e04:	4a0c      	ldr	r2, [pc, #48]	; (8006e38 <NoteSetFnSerial+0x48>)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6013      	str	r3, [r2, #0]
    hookSerialTransmit = transmitfn;
 8006e0a:	4a0c      	ldr	r2, [pc, #48]	; (8006e3c <NoteSetFnSerial+0x4c>)
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	6013      	str	r3, [r2, #0]
    hookSerialAvailable = availfn;
 8006e10:	4a0b      	ldr	r2, [pc, #44]	; (8006e40 <NoteSetFnSerial+0x50>)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6013      	str	r3, [r2, #0]
    hookSerialReceive = receivefn;
 8006e16:	4a0b      	ldr	r2, [pc, #44]	; (8006e44 <NoteSetFnSerial+0x54>)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	6013      	str	r3, [r2, #0]

    notecardReset = serialNoteReset;
 8006e1c:	4b0a      	ldr	r3, [pc, #40]	; (8006e48 <NoteSetFnSerial+0x58>)
 8006e1e:	4a0b      	ldr	r2, [pc, #44]	; (8006e4c <NoteSetFnSerial+0x5c>)
 8006e20:	601a      	str	r2, [r3, #0]
    notecardTransaction = serialNoteTransaction;
 8006e22:	4b0b      	ldr	r3, [pc, #44]	; (8006e50 <NoteSetFnSerial+0x60>)
 8006e24:	4a0b      	ldr	r2, [pc, #44]	; (8006e54 <NoteSetFnSerial+0x64>)
 8006e26:	601a      	str	r2, [r3, #0]
}
 8006e28:	bf00      	nop
 8006e2a:	3714      	adds	r7, #20
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bc80      	pop	{r7}
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	20000494 	.word	0x20000494
 8006e38:	20000498 	.word	0x20000498
 8006e3c:	2000049c 	.word	0x2000049c
 8006e40:	200004a0 	.word	0x200004a0
 8006e44:	200004a4 	.word	0x200004a4
 8006e48:	200004a8 	.word	0x200004a8
 8006e4c:	080074c1 	.word	0x080074c1
 8006e50:	200004ac 	.word	0x200004ac
 8006e54:	080072c1 	.word	0x080072c1

08006e58 <NoteFnDebug>:
    notecardTransaction = i2cNoteTransaction;
}


// Runtime hook wrappers
void NoteFnDebug(const char *format, ...) {
 8006e58:	b40f      	push	{r0, r1, r2, r3}
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b0c2      	sub	sp, #264	; 0x108
 8006e5e:	af00      	add	r7, sp, #0
    if (hookDebugOutput != NULL) {
 8006e60:	4b0e      	ldr	r3, [pc, #56]	; (8006e9c <NoteFnDebug+0x44>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d011      	beq.n	8006e8c <NoteFnDebug+0x34>
        char line[256];
        va_list args;
        va_start(args, format);
 8006e68:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8006e6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        vsnprintf(line, sizeof(line), format, args);
 8006e70:	1d38      	adds	r0, r7, #4
 8006e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e76:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8006e7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e7e:	f000 fd0b 	bl	8007898 <vsniprintf>
        va_end(args);
        hookDebugOutput(line);
 8006e82:	4b06      	ldr	r3, [pc, #24]	; (8006e9c <NoteFnDebug+0x44>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	1d3a      	adds	r2, r7, #4
 8006e88:	4610      	mov	r0, r2
 8006e8a:	4798      	blx	r3
    }
}
 8006e8c:	bf00      	nop
 8006e8e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006e92:	46bd      	mov	sp, r7
 8006e94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e98:	b004      	add	sp, #16
 8006e9a:	4770      	bx	lr
 8006e9c:	20000478 	.word	0x20000478

08006ea0 <NoteFnGetMs>:
long unsigned int NoteFnGetMs() {
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	af00      	add	r7, sp, #0
    if (hookGetMs == NULL)
 8006ea4:	4b05      	ldr	r3, [pc, #20]	; (8006ebc <NoteFnGetMs+0x1c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <NoteFnGetMs+0x10>
        return 0;
 8006eac:	2300      	movs	r3, #0
 8006eae:	e003      	b.n	8006eb8 <NoteFnGetMs+0x18>
    return hookGetMs();
 8006eb0:	4b02      	ldr	r3, [pc, #8]	; (8006ebc <NoteFnGetMs+0x1c>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4798      	blx	r3
 8006eb6:	4603      	mov	r3, r0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	20000490 	.word	0x20000490

08006ec0 <NoteFnDelayMs>:
void NoteFnDelayMs(uint32_t ms) {
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
    if (hookDelayMs != NULL)
 8006ec8:	4b05      	ldr	r3, [pc, #20]	; (8006ee0 <NoteFnDelayMs+0x20>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d003      	beq.n	8006ed8 <NoteFnDelayMs+0x18>
        hookDelayMs(ms);
 8006ed0:	4b03      	ldr	r3, [pc, #12]	; (8006ee0 <NoteFnDelayMs+0x20>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	4798      	blx	r3
}
 8006ed8:	bf00      	nop
 8006eda:	3708      	adds	r7, #8
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	2000048c 	.word	0x2000048c

08006ee4 <NoteFnMalloc>:
void *NoteFnMalloc(size_t size) {
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
    if (hookMalloc == NULL)
 8006eec:	4b07      	ldr	r3, [pc, #28]	; (8006f0c <NoteFnMalloc+0x28>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <NoteFnMalloc+0x14>
        return NULL;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	e004      	b.n	8006f02 <NoteFnMalloc+0x1e>
    return hookMalloc(size);
 8006ef8:	4b04      	ldr	r3, [pc, #16]	; (8006f0c <NoteFnMalloc+0x28>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	4798      	blx	r3
 8006f00:	4603      	mov	r3, r0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	20000484 	.word	0x20000484

08006f10 <NoteFnFree>:
void NoteFnFree(void *p) {
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
    if (hookFree != NULL)
 8006f18:	4b05      	ldr	r3, [pc, #20]	; (8006f30 <NoteFnFree+0x20>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d003      	beq.n	8006f28 <NoteFnFree+0x18>
        hookFree(p);
 8006f20:	4b03      	ldr	r3, [pc, #12]	; (8006f30 <NoteFnFree+0x20>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	4798      	blx	r3
}
 8006f28:	bf00      	nop
 8006f2a:	3708      	adds	r7, #8
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	20000488 	.word	0x20000488

08006f34 <NoteFnLockNote>:
}
void NoteFnUnlockI2C() {
    if (hookUnlockI2C != NULL)
        hookUnlockI2C();
}
void NoteFnLockNote() {
 8006f34:	b580      	push	{r7, lr}
 8006f36:	af00      	add	r7, sp, #0
    if (hookLockNote != NULL)
 8006f38:	4b04      	ldr	r3, [pc, #16]	; (8006f4c <NoteFnLockNote+0x18>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <NoteFnLockNote+0x12>
        hookLockNote();
 8006f40:	4b02      	ldr	r3, [pc, #8]	; (8006f4c <NoteFnLockNote+0x18>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4798      	blx	r3
}
 8006f46:	bf00      	nop
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	2000047c 	.word	0x2000047c

08006f50 <NoteFnUnlockNote>:
void NoteFnUnlockNote() {
 8006f50:	b580      	push	{r7, lr}
 8006f52:	af00      	add	r7, sp, #0
    if (hookUnlockNote != NULL)
 8006f54:	4b04      	ldr	r3, [pc, #16]	; (8006f68 <NoteFnUnlockNote+0x18>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <NoteFnUnlockNote+0x12>
        hookUnlockNote();
 8006f5c:	4b02      	ldr	r3, [pc, #8]	; (8006f68 <NoteFnUnlockNote+0x18>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4798      	blx	r3
}
 8006f62:	bf00      	nop
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	20000480 	.word	0x20000480

08006f6c <NoteFnSerialReset>:
void NoteFnSerialReset() {
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	af00      	add	r7, sp, #0
    if (hookActiveInterface == interfaceSerial && hookSerialReset != NULL)
 8006f70:	4b06      	ldr	r3, [pc, #24]	; (8006f8c <NoteFnSerialReset+0x20>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d106      	bne.n	8006f86 <NoteFnSerialReset+0x1a>
 8006f78:	4b05      	ldr	r3, [pc, #20]	; (8006f90 <NoteFnSerialReset+0x24>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <NoteFnSerialReset+0x1a>
        hookSerialReset();
 8006f80:	4b03      	ldr	r3, [pc, #12]	; (8006f90 <NoteFnSerialReset+0x24>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4798      	blx	r3
}
 8006f86:	bf00      	nop
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	20000494 	.word	0x20000494
 8006f90:	20000498 	.word	0x20000498

08006f94 <NoteFnSerialTransmit>:
void NoteFnSerialTransmit(uint8_t *text, size_t len, bool flush) {
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	71fb      	strb	r3, [r7, #7]
    if (hookActiveInterface == interfaceSerial && hookSerialTransmit != NULL)
 8006fa2:	4b09      	ldr	r3, [pc, #36]	; (8006fc8 <NoteFnSerialTransmit+0x34>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d109      	bne.n	8006fbe <NoteFnSerialTransmit+0x2a>
 8006faa:	4b08      	ldr	r3, [pc, #32]	; (8006fcc <NoteFnSerialTransmit+0x38>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d005      	beq.n	8006fbe <NoteFnSerialTransmit+0x2a>
        hookSerialTransmit(text, len, flush);
 8006fb2:	4b06      	ldr	r3, [pc, #24]	; (8006fcc <NoteFnSerialTransmit+0x38>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	79fa      	ldrb	r2, [r7, #7]
 8006fb8:	68b9      	ldr	r1, [r7, #8]
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	4798      	blx	r3
}
 8006fbe:	bf00      	nop
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	20000494 	.word	0x20000494
 8006fcc:	2000049c 	.word	0x2000049c

08006fd0 <NoteFnSerialAvailable>:
bool NoteFnSerialAvailable() {
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	af00      	add	r7, sp, #0
    if (hookActiveInterface == interfaceSerial && hookSerialAvailable != NULL)
 8006fd4:	4b07      	ldr	r3, [pc, #28]	; (8006ff4 <NoteFnSerialAvailable+0x24>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d108      	bne.n	8006fee <NoteFnSerialAvailable+0x1e>
 8006fdc:	4b06      	ldr	r3, [pc, #24]	; (8006ff8 <NoteFnSerialAvailable+0x28>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d004      	beq.n	8006fee <NoteFnSerialAvailable+0x1e>
        return hookSerialAvailable();
 8006fe4:	4b04      	ldr	r3, [pc, #16]	; (8006ff8 <NoteFnSerialAvailable+0x28>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4798      	blx	r3
 8006fea:	4603      	mov	r3, r0
 8006fec:	e000      	b.n	8006ff0 <NoteFnSerialAvailable+0x20>
    return false;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	20000494 	.word	0x20000494
 8006ff8:	200004a0 	.word	0x200004a0

08006ffc <NoteFnSerialReceive>:
char NoteFnSerialReceive() {
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	af00      	add	r7, sp, #0
    if (hookActiveInterface == interfaceSerial && hookSerialReceive != NULL)
 8007000:	4b07      	ldr	r3, [pc, #28]	; (8007020 <NoteFnSerialReceive+0x24>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d108      	bne.n	800701a <NoteFnSerialReceive+0x1e>
 8007008:	4b06      	ldr	r3, [pc, #24]	; (8007024 <NoteFnSerialReceive+0x28>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d004      	beq.n	800701a <NoteFnSerialReceive+0x1e>
        return hookSerialReceive();
 8007010:	4b04      	ldr	r3, [pc, #16]	; (8007024 <NoteFnSerialReceive+0x28>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4798      	blx	r3
 8007016:	4603      	mov	r3, r0
 8007018:	e000      	b.n	800701c <NoteFnSerialReceive+0x20>
    return 0;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	bd80      	pop	{r7, pc}
 8007020:	20000494 	.word	0x20000494
 8007024:	200004a4 	.word	0x200004a4

08007028 <NoteFnNoteReset>:
    if (i2cMax > 127)
        i2cMax = 127;
    return i2cMax;
}

bool NoteFnNoteReset() {
 8007028:	b580      	push	{r7, lr}
 800702a:	af00      	add	r7, sp, #0
    if (notecardReset == NULL)
 800702c:	4b05      	ldr	r3, [pc, #20]	; (8007044 <NoteFnNoteReset+0x1c>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <NoteFnNoteReset+0x10>
        return "notecard not initialized";
 8007034:	2301      	movs	r3, #1
 8007036:	e003      	b.n	8007040 <NoteFnNoteReset+0x18>
    return notecardReset();
 8007038:	4b02      	ldr	r3, [pc, #8]	; (8007044 <NoteFnNoteReset+0x1c>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4798      	blx	r3
 800703e:	4603      	mov	r3, r0
}
 8007040:	4618      	mov	r0, r3
 8007042:	bd80      	pop	{r7, pc}
 8007044:	200004a8 	.word	0x200004a8

08007048 <NoteFnTransaction>:
const char *NoteFnTransaction(char *json, char **jsonResponse) {
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
    if (notecardTransaction == NULL)
 8007052:	4b08      	ldr	r3, [pc, #32]	; (8007074 <NoteFnTransaction+0x2c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d101      	bne.n	800705e <NoteFnTransaction+0x16>
        return "notecard not initialized";
 800705a:	4b07      	ldr	r3, [pc, #28]	; (8007078 <NoteFnTransaction+0x30>)
 800705c:	e005      	b.n	800706a <NoteFnTransaction+0x22>
    return notecardTransaction(json, jsonResponse);
 800705e:	4b05      	ldr	r3, [pc, #20]	; (8007074 <NoteFnTransaction+0x2c>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	4798      	blx	r3
 8007068:	4603      	mov	r3, r0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3708      	adds	r7, #8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	200004ac 	.word	0x200004ac
 8007078:	08008020 	.word	0x08008020

0800707c <errDoc>:

// Flag that gets set whenever an error occurs that should force a reset
static bool resetRequired = true;

// Create an error response document
static J *errDoc(const char *errmsg) {
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
    J *rspdoc = JCreateObject();
 8007084:	f7ff fc5e 	bl	8006944 <JCreateObject>
 8007088:	60f8      	str	r0, [r7, #12]
    if (rspdoc != NULL)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d004      	beq.n	800709a <errDoc+0x1e>
        JAddStringToObject(rspdoc, "err", errmsg);
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	4906      	ldr	r1, [pc, #24]	; (80070ac <errDoc+0x30>)
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f7ff fbab 	bl	80067f0 <JAddStringToObject>
#ifdef SHOW_TRANSACTIONS
    _Debug("{\"err\":\"%s\"}\n", errmsg);
 800709a:	6879      	ldr	r1, [r7, #4]
 800709c:	4804      	ldr	r0, [pc, #16]	; (80070b0 <errDoc+0x34>)
 800709e:	f7ff fedb 	bl	8006e58 <NoteFnDebug>
#endif
    return rspdoc;
 80070a2:	68fb      	ldr	r3, [r7, #12]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	0800803c 	.word	0x0800803c
 80070b0:	08008040 	.word	0x08008040

080070b4 <NoteNewRequest>:

// Lock for mutual exclusion, not only because access to the card must be serialized, but also because
// both C++ and ArduinoJSON call malloc() which is not a thread-safe operation.
J *NoteNewRequest(const char *request) {
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
    J *reqdoc = JCreateObject();
 80070bc:	f7ff fc42 	bl	8006944 <JCreateObject>
 80070c0:	60f8      	str	r0, [r7, #12]
    if (reqdoc != NULL)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d004      	beq.n	80070d2 <NoteNewRequest+0x1e>
        JAddStringToObject(reqdoc, "req", request);
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	4904      	ldr	r1, [pc, #16]	; (80070dc <NoteNewRequest+0x28>)
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f7ff fb8f 	bl	80067f0 <JAddStringToObject>
    return reqdoc;
 80070d2:	68fb      	ldr	r3, [r7, #12]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	08008050 	.word	0x08008050

080070e0 <NoteRequest>:

// Perform a request, FREEING THE REQUEST STRUCTURE, then returning true if success and
// false if either we ran into an error such as out-of-memory or if an error was returned
// from the transaction in the "err" field.
bool NoteRequest(J *req) {
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
    // Exit if null request.  This allows safe execution of the form NoteRequest(NoteNewRequest("xxx"))
    if (req == NULL)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <NoteRequest+0x12>
        return false;
 80070ee:	2300      	movs	r3, #0
 80070f0:	e018      	b.n	8007124 <NoteRequest+0x44>
    // Execute the transaction
    J *rsp = NoteTransaction(req);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f83a 	bl	800716c <NoteTransaction>
 80070f8:	60f8      	str	r0, [r7, #12]
    if (rsp == NULL) {
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d104      	bne.n	800710a <NoteRequest+0x2a>
        JDelete(req);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f7fd fca7 	bl	8004a54 <JDelete>
        return false;
 8007106:	2300      	movs	r3, #0
 8007108:	e00c      	b.n	8007124 <NoteRequest+0x44>
    }
    // Check for a transaction error, and exit
    bool success = JIsNullString(rsp, "err");
 800710a:	4908      	ldr	r1, [pc, #32]	; (800712c <NoteRequest+0x4c>)
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f7ff fc88 	bl	8006a22 <JIsNullString>
 8007112:	4603      	mov	r3, r0
 8007114:	72fb      	strb	r3, [r7, #11]
    JDelete(req);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7fd fc9c 	bl	8004a54 <JDelete>
    JDelete(rsp);
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f7fd fc99 	bl	8004a54 <JDelete>
    return success;
 8007122:	7afb      	ldrb	r3, [r7, #11]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	0800803c 	.word	0x0800803c

08007130 <NoteRequestResponse>:

// Perform a request, FREEING THE REQUEST STRUCTURE, and returning a reply structure or
// NULL if there's insufficient memory.
J *NoteRequestResponse(J *req) {
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
    // Exit if null request.  This allows safe execution of the form NoteRequestResponse(NoteNewRequest("xxx"))
    if (req == NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <NoteRequestResponse+0x12>
        return NULL;
 800713e:	2300      	movs	r3, #0
 8007140:	e00f      	b.n	8007162 <NoteRequestResponse+0x32>
    // Execute the transaction
    J *rsp = NoteTransaction(req);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f812 	bl	800716c <NoteTransaction>
 8007148:	60f8      	str	r0, [r7, #12]
    if (rsp == NULL) {
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d104      	bne.n	800715a <NoteRequestResponse+0x2a>
        JDelete(req);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7fd fc7f 	bl	8004a54 <JDelete>
        return NULL;
 8007156:	2300      	movs	r3, #0
 8007158:	e003      	b.n	8007162 <NoteRequestResponse+0x32>
    }
    // Free the request and exit
    JDelete(req);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7fd fc7a 	bl	8004a54 <JDelete>
    return rsp;
 8007160:	68fb      	ldr	r3, [r7, #12]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <NoteTransaction>:

// Initiate a transaction to the card using reqdoc, and return the result in rspdoc.  This does
// NOT free the request structure.
J *NoteTransaction(J *req) {
 800716c:	b580      	push	{r7, lr}
 800716e:	b08a      	sub	sp, #40	; 0x28
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]

    // If a reset of the module is required for any reason, do it now.
    // We must do this before acquiring lock.
    if (resetRequired) {
 8007174:	4b33      	ldr	r3, [pc, #204]	; (8007244 <NoteTransaction+0xd8>)
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d009      	beq.n	8007190 <NoteTransaction+0x24>
        if (!NoteReset())
 800717c:	f000 f878 	bl	8007270 <NoteReset>
 8007180:	4603      	mov	r3, r0
 8007182:	f083 0301 	eor.w	r3, r3, #1
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <NoteTransaction+0x24>
            return NULL;
 800718c:	2300      	movs	r3, #0
 800718e:	e055      	b.n	800723c <NoteTransaction+0xd0>
    }

    // Lock
    _LockNote();
 8007190:	f7ff fed0 	bl	8006f34 <NoteFnLockNote>

    // Serialize the JSON requet
    char *json = JPrintUnformatted(req);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7fe fcf9 	bl	8005b8c <JPrintUnformatted>
 800719a:	6278      	str	r0, [r7, #36]	; 0x24
    if (json == NULL) {
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d107      	bne.n	80071b2 <NoteTransaction+0x46>
        J *rsp = errDoc("can't convert to JSON");
 80071a2:	4829      	ldr	r0, [pc, #164]	; (8007248 <NoteTransaction+0xdc>)
 80071a4:	f7ff ff6a 	bl	800707c <errDoc>
 80071a8:	6138      	str	r0, [r7, #16]
        _UnlockNote();
 80071aa:	f7ff fed1 	bl	8006f50 <NoteFnUnlockNote>
        return rsp;
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	e044      	b.n	800723c <NoteTransaction+0xd0>
    }
    
#ifdef SHOW_TRANSACTIONS
    _Debug("%s\n", json);
 80071b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071b4:	4825      	ldr	r0, [pc, #148]	; (800724c <NoteTransaction+0xe0>)
 80071b6:	f7ff fe4f 	bl	8006e58 <NoteFnDebug>
#endif

    // Pertform the transaction
    char *responseJSON;
    const char *errStr = _Transaction(json, &responseJSON);
 80071ba:	f107 030c 	add.w	r3, r7, #12
 80071be:	4619      	mov	r1, r3
 80071c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071c2:	f7ff ff41 	bl	8007048 <NoteFnTransaction>
 80071c6:	6238      	str	r0, [r7, #32]

    // Free the json
    JFree(json);
 80071c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071ca:	f7fd fc1f 	bl	8004a0c <JFree>

    // If error, queue up a reset
    if (errStr != NULL) {
 80071ce:	6a3b      	ldr	r3, [r7, #32]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d009      	beq.n	80071e8 <NoteTransaction+0x7c>
		NoteResetRequired();
 80071d4:	f000 f840 	bl	8007258 <NoteResetRequired>
        J *rsp = errDoc(errStr);
 80071d8:	6a38      	ldr	r0, [r7, #32]
 80071da:	f7ff ff4f 	bl	800707c <errDoc>
 80071de:	6178      	str	r0, [r7, #20]
        _UnlockNote();
 80071e0:	f7ff feb6 	bl	8006f50 <NoteFnUnlockNote>
        return rsp;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	e029      	b.n	800723c <NoteTransaction+0xd0>
    }

    // Parse the reply from the card on the input stream
    J *rspdoc = JParse(responseJSON);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fe fc3c 	bl	8005a68 <JParse>
 80071f0:	61f8      	str	r0, [r7, #28]
    if (rspdoc == NULL) {
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d115      	bne.n	8007224 <NoteTransaction+0xb8>
        _Free(responseJSON);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7ff fe88 	bl	8006f10 <NoteFnFree>
        _Debug("unable to parse %d-byte response JSON: \"%s\"\n", strlen(responseJSON), responseJSON);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	4618      	mov	r0, r3
 8007204:	f7f8 ffae 	bl	8000164 <strlen>
 8007208:	4601      	mov	r1, r0
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	461a      	mov	r2, r3
 800720e:	4810      	ldr	r0, [pc, #64]	; (8007250 <NoteTransaction+0xe4>)
 8007210:	f7ff fe22 	bl	8006e58 <NoteFnDebug>
        J *rsp = errDoc("unrecognized response from card");
 8007214:	480f      	ldr	r0, [pc, #60]	; (8007254 <NoteTransaction+0xe8>)
 8007216:	f7ff ff31 	bl	800707c <errDoc>
 800721a:	61b8      	str	r0, [r7, #24]
        _UnlockNote();
 800721c:	f7ff fe98 	bl	8006f50 <NoteFnUnlockNote>
        return rsp;
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	e00b      	b.n	800723c <NoteTransaction+0xd0>
    }

    // Debug
#ifdef SHOW_TRANSACTIONS
    _Debug("%s\n", responseJSON);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4619      	mov	r1, r3
 8007228:	4808      	ldr	r0, [pc, #32]	; (800724c <NoteTransaction+0xe0>)
 800722a:	f7ff fe15 	bl	8006e58 <NoteFnDebug>
#endif

    // Discard the buffer now that it's parsed
    _Free(responseJSON);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	4618      	mov	r0, r3
 8007232:	f7ff fe6d 	bl	8006f10 <NoteFnFree>

    // Unlock
    _UnlockNote();
 8007236:	f7ff fe8b 	bl	8006f50 <NoteFnUnlockNote>

    // Done
    return rspdoc;
 800723a:	69fb      	ldr	r3, [r7, #28]
    
}
 800723c:	4618      	mov	r0, r3
 800723e:	3728      	adds	r7, #40	; 0x28
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	20000064 	.word	0x20000064
 8007248:	08008054 	.word	0x08008054
 800724c:	0800806c 	.word	0x0800806c
 8007250:	08008070 	.word	0x08008070
 8007254:	080080a0 	.word	0x080080a0

08007258 <NoteResetRequired>:

// Mark that a reset will be required before doing further I/O on a given port
void NoteResetRequired() {
 8007258:	b480      	push	{r7}
 800725a:	af00      	add	r7, sp, #0
    resetRequired = true;
 800725c:	4b03      	ldr	r3, [pc, #12]	; (800726c <NoteResetRequired+0x14>)
 800725e:	2201      	movs	r2, #1
 8007260:	701a      	strb	r2, [r3, #0]
}
 8007262:	bf00      	nop
 8007264:	46bd      	mov	sp, r7
 8007266:	bc80      	pop	{r7}
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	20000064 	.word	0x20000064

08007270 <NoteReset>:

// Initialize or re-initialize the module, returning false if anything fails
bool NoteReset() {
 8007270:	b580      	push	{r7, lr}
 8007272:	af00      	add	r7, sp, #0
    _LockNote();
 8007274:	f7ff fe5e 	bl	8006f34 <NoteFnLockNote>
    resetRequired = !_NoteReset();
 8007278:	f7ff fed6 	bl	8007028 <NoteFnNoteReset>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	bf14      	ite	ne
 8007282:	2301      	movne	r3, #1
 8007284:	2300      	moveq	r3, #0
 8007286:	b2db      	uxtb	r3, r3
 8007288:	f083 0301 	eor.w	r3, r3, #1
 800728c:	b2db      	uxtb	r3, r3
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	b2da      	uxtb	r2, r3
 8007294:	4b09      	ldr	r3, [pc, #36]	; (80072bc <NoteReset+0x4c>)
 8007296:	701a      	strb	r2, [r3, #0]
    _UnlockNote();
 8007298:	f7ff fe5a 	bl	8006f50 <NoteFnUnlockNote>
    return !resetRequired;
 800729c:	4b07      	ldr	r3, [pc, #28]	; (80072bc <NoteReset+0x4c>)
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	bf14      	ite	ne
 80072a4:	2301      	movne	r3, #1
 80072a6:	2300      	moveq	r3, #0
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	f083 0301 	eor.w	r3, r3, #1
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	f003 0301 	and.w	r3, r3, #1
 80072b4:	b2db      	uxtb	r3, r3
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	20000064 	.word	0x20000064

080072c0 <serialNoteTransaction>:
// copyright holder including that found in the LICENSE file.

#include "n_lib.h"

// Process a transaction over the serial port, returning NULL and a buffer if success, or an error string
const char *serialNoteTransaction(char *json, char **jsonResponse) {
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b08c      	sub	sp, #48	; 0x30
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]

	// Transmit the request in segments so as not to overwhelm the notecard's interrupt buffers
	uint32_t segOff = 0;
 80072ca:	2300      	movs	r3, #0
 80072cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t segLeft = strlen(json);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7f8 ff48 	bl	8000164 <strlen>
 80072d4:	62b8      	str	r0, [r7, #40]	; 0x28
	while (true) {
		size_t segLen = segLeft;
 80072d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d8:	627b      	str	r3, [r7, #36]	; 0x24
		if (segLen > CARD_REQUEST_SEGMENT_MAX_LEN)
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072e0:	d902      	bls.n	80072e8 <serialNoteTransaction+0x28>
			segLen = CARD_REQUEST_SEGMENT_MAX_LEN;
 80072e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072e6:	627b      	str	r3, [r7, #36]	; 0x24
		segLeft -= segLen;
 80072e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	62bb      	str	r3, [r7, #40]	; 0x28
		_SerialTransmit((uint8_t *)&json[segOff], segLen, false);
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f4:	4413      	add	r3, r2
 80072f6:	2200      	movs	r2, #0
 80072f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7ff fe4a 	bl	8006f94 <NoteFnSerialTransmit>
		if (segLeft == 0) {
 8007300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007302:	2b00      	cmp	r3, #0
 8007304:	d109      	bne.n	800731a <serialNoteTransaction+0x5a>
			_SerialTransmit((uint8_t *)"\n", 1, true);
 8007306:	2201      	movs	r2, #1
 8007308:	2101      	movs	r1, #1
 800730a:	4863      	ldr	r0, [pc, #396]	; (8007498 <serialNoteTransaction+0x1d8>)
 800730c:	f7ff fe42 	bl	8006f94 <NoteFnSerialTransmit>
			break;
 8007310:	bf00      	nop
	// Wait for something to become available, processing timeout errors up-front
	// because the json parse operation immediately following is subject to the
	// serial port timeout. We'd like more flexibility in max timeout and ultimately
	// in our error handling.
	uint32_t start;
	for (start = _GetMs(); !_SerialAvailable(); ) {
 8007312:	f7ff fdc5 	bl	8006ea0 <NoteFnGetMs>
 8007316:	6138      	str	r0, [r7, #16]
 8007318:	e01e      	b.n	8007358 <serialNoteTransaction+0x98>
		segOff += segLen;
 800731a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731e:	4413      	add	r3, r2
 8007320:	62fb      	str	r3, [r7, #44]	; 0x2c
		_DelayMs(CARD_REQUEST_SEGMENT_DELAY_MS);
 8007322:	20fa      	movs	r0, #250	; 0xfa
 8007324:	f7ff fdcc 	bl	8006ec0 <NoteFnDelayMs>
	while (true) {
 8007328:	e7d5      	b.n	80072d6 <serialNoteTransaction+0x16>
		if (_GetMs() >= start + (NOTECARD_TRANSACTION_TIMEOUT_SEC*1000)) {
 800732a:	f7ff fdb9 	bl	8006ea0 <NoteFnGetMs>
 800732e:	4602      	mov	r2, r0
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8007336:	3310      	adds	r3, #16
 8007338:	429a      	cmp	r2, r3
 800733a:	d30a      	bcc.n	8007352 <serialNoteTransaction+0x92>
			_Debug("reply to request didn't arrive from module in %dms\n", _GetMs() - start);
 800733c:	f7ff fdb0 	bl	8006ea0 <NoteFnGetMs>
 8007340:	4602      	mov	r2, r0
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	4619      	mov	r1, r3
 8007348:	4854      	ldr	r0, [pc, #336]	; (800749c <serialNoteTransaction+0x1dc>)
 800734a:	f7ff fd85 	bl	8006e58 <NoteFnDebug>
			return "transaction timeout";
 800734e:	4b54      	ldr	r3, [pc, #336]	; (80074a0 <serialNoteTransaction+0x1e0>)
 8007350:	e09d      	b.n	800748e <serialNoteTransaction+0x1ce>
		}
		_DelayMs(10);
 8007352:	200a      	movs	r0, #10
 8007354:	f7ff fdb4 	bl	8006ec0 <NoteFnDelayMs>
	for (start = _GetMs(); !_SerialAvailable(); ) {
 8007358:	f7ff fe3a 	bl	8006fd0 <NoteFnSerialAvailable>
 800735c:	4603      	mov	r3, r0
 800735e:	f083 0301 	eor.w	r3, r3, #1
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1e0      	bne.n	800732a <serialNoteTransaction+0x6a>
	}

	// Allocate a buffer for input, noting that we always put the +1 in the alloc so we can be assured
	// that it can be null-terminated.	This must be the case because json parsing requires a
	// null-terminated string.
	int jsonbufAllocLen = 1024;
 8007368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800736c:	623b      	str	r3, [r7, #32]
	char *jsonbuf = (char *) _Malloc(jsonbufAllocLen+1);
 800736e:	6a3b      	ldr	r3, [r7, #32]
 8007370:	3301      	adds	r3, #1
 8007372:	4618      	mov	r0, r3
 8007374:	f7ff fdb6 	bl	8006ee4 <NoteFnMalloc>
 8007378:	61f8      	str	r0, [r7, #28]
	if (jsonbuf == NULL) {
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d105      	bne.n	800738c <serialNoteTransaction+0xcc>
		_Debug("transaction: jsonbuf malloc(%d) failed\n", jsonbufAllocLen);
 8007380:	6a39      	ldr	r1, [r7, #32]
 8007382:	4848      	ldr	r0, [pc, #288]	; (80074a4 <serialNoteTransaction+0x1e4>)
 8007384:	f7ff fd68 	bl	8006e58 <NoteFnDebug>
		return "insufficient memory";
 8007388:	4b47      	ldr	r3, [pc, #284]	; (80074a8 <serialNoteTransaction+0x1e8>)
 800738a:	e080      	b.n	800748e <serialNoteTransaction+0x1ce>
	}
	int jsonbufLen = 0;
 800738c:	2300      	movs	r3, #0
 800738e:	61bb      	str	r3, [r7, #24]
	char ch = 0;
 8007390:	2300      	movs	r3, #0
 8007392:	75fb      	strb	r3, [r7, #23]
	start = _GetMs();
 8007394:	f7ff fd84 	bl	8006ea0 <NoteFnGetMs>
 8007398:	6138      	str	r0, [r7, #16]
	while (ch != '\n') {
 800739a:	e06c      	b.n	8007476 <serialNoteTransaction+0x1b6>
		if (!_SerialAvailable()) {
 800739c:	f7ff fe18 	bl	8006fd0 <NoteFnSerialAvailable>
 80073a0:	4603      	mov	r3, r0
 80073a2:	f083 0301 	eor.w	r3, r3, #1
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d022      	beq.n	80073f2 <serialNoteTransaction+0x132>
			ch = 0;
 80073ac:	2300      	movs	r3, #0
 80073ae:	75fb      	strb	r3, [r7, #23]
			if (_GetMs() >= start + (NOTECARD_TRANSACTION_TIMEOUT_SEC*1000)) {
 80073b0:	f7ff fd76 	bl	8006ea0 <NoteFnGetMs>
 80073b4:	4602      	mov	r2, r0
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80073bc:	3310      	adds	r3, #16
 80073be:	429a      	cmp	r2, r3
 80073c0:	d313      	bcc.n	80073ea <serialNoteTransaction+0x12a>
				jsonbuf[jsonbufLen] = '\0';
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	69fa      	ldr	r2, [r7, #28]
 80073c6:	4413      	add	r3, r2
 80073c8:	2200      	movs	r2, #0
 80073ca:	701a      	strb	r2, [r3, #0]
				_Debug("received only %d-byte partial reply after %dms: %s\n", jsonbufLen, _GetMs() - start, jsonbuf);
 80073cc:	f7ff fd68 	bl	8006ea0 <NoteFnGetMs>
 80073d0:	4602      	mov	r2, r0
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	1ad2      	subs	r2, r2, r3
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	69b9      	ldr	r1, [r7, #24]
 80073da:	4834      	ldr	r0, [pc, #208]	; (80074ac <serialNoteTransaction+0x1ec>)
 80073dc:	f7ff fd3c 	bl	8006e58 <NoteFnDebug>
				_Free(jsonbuf);
 80073e0:	69f8      	ldr	r0, [r7, #28]
 80073e2:	f7ff fd95 	bl	8006f10 <NoteFnFree>
				return "transaction incomplete";
 80073e6:	4b32      	ldr	r3, [pc, #200]	; (80074b0 <serialNoteTransaction+0x1f0>)
 80073e8:	e051      	b.n	800748e <serialNoteTransaction+0x1ce>
			}
			_DelayMs(1);
 80073ea:	2001      	movs	r0, #1
 80073ec:	f7ff fd68 	bl	8006ec0 <NoteFnDelayMs>
			continue;
 80073f0:	e041      	b.n	8007476 <serialNoteTransaction+0x1b6>
		}
		ch = _SerialReceive();
 80073f2:	f7ff fe03 	bl	8006ffc <NoteFnSerialReceive>
 80073f6:	4603      	mov	r3, r0
 80073f8:	75fb      	strb	r3, [r7, #23]

		// Because serial I/O can be error-prone, catch common bad data early, knowing that we only accept ASCII
		if (ch == 0 || (ch & 0x80) != 0) {
 80073fa:	7dfb      	ldrb	r3, [r7, #23]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d003      	beq.n	8007408 <serialNoteTransaction+0x148>
 8007400:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007404:	2b00      	cmp	r3, #0
 8007406:	da09      	bge.n	800741c <serialNoteTransaction+0x15c>
			_Debug("invalid data received on serial port from notecard: 0x%02x\n", ch);
 8007408:	7dfb      	ldrb	r3, [r7, #23]
 800740a:	4619      	mov	r1, r3
 800740c:	4829      	ldr	r0, [pc, #164]	; (80074b4 <serialNoteTransaction+0x1f4>)
 800740e:	f7ff fd23 	bl	8006e58 <NoteFnDebug>
			_Free(jsonbuf);
 8007412:	69f8      	ldr	r0, [r7, #28]
 8007414:	f7ff fd7c 	bl	8006f10 <NoteFnFree>
			return "serial communications error";
 8007418:	4b27      	ldr	r3, [pc, #156]	; (80074b8 <serialNoteTransaction+0x1f8>)
 800741a:	e038      	b.n	800748e <serialNoteTransaction+0x1ce>
		}

		// Append into the json buffer
		jsonbuf[jsonbufLen++] = ch;
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	1c5a      	adds	r2, r3, #1
 8007420:	61ba      	str	r2, [r7, #24]
 8007422:	461a      	mov	r2, r3
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	4413      	add	r3, r2
 8007428:	7dfa      	ldrb	r2, [r7, #23]
 800742a:	701a      	strb	r2, [r3, #0]
		if (jsonbufLen >= jsonbufAllocLen) {
 800742c:	69ba      	ldr	r2, [r7, #24]
 800742e:	6a3b      	ldr	r3, [r7, #32]
 8007430:	429a      	cmp	r2, r3
 8007432:	db20      	blt.n	8007476 <serialNoteTransaction+0x1b6>
			jsonbufAllocLen += 512;
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800743a:	623b      	str	r3, [r7, #32]
			char *jsonbufNew = (char *) _Malloc(jsonbufAllocLen+1);
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	3301      	adds	r3, #1
 8007440:	4618      	mov	r0, r3
 8007442:	f7ff fd4f 	bl	8006ee4 <NoteFnMalloc>
 8007446:	60f8      	str	r0, [r7, #12]
			if (jsonbufNew == NULL) {
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d108      	bne.n	8007460 <serialNoteTransaction+0x1a0>
				_Debug("transaction: jsonbuf malloc(%d) grow failed\n", jsonbufAllocLen);
 800744e:	6a39      	ldr	r1, [r7, #32]
 8007450:	481a      	ldr	r0, [pc, #104]	; (80074bc <serialNoteTransaction+0x1fc>)
 8007452:	f7ff fd01 	bl	8006e58 <NoteFnDebug>
				_Free(jsonbuf);
 8007456:	69f8      	ldr	r0, [r7, #28]
 8007458:	f7ff fd5a 	bl	8006f10 <NoteFnFree>
				return "insufficient memory";
 800745c:	4b12      	ldr	r3, [pc, #72]	; (80074a8 <serialNoteTransaction+0x1e8>)
 800745e:	e016      	b.n	800748e <serialNoteTransaction+0x1ce>
			}
			memcpy(jsonbufNew, jsonbuf, jsonbufLen);
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	461a      	mov	r2, r3
 8007464:	69f9      	ldr	r1, [r7, #28]
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f000 f8e8 	bl	800763c <memcpy>
			_Free(jsonbuf);
 800746c:	69f8      	ldr	r0, [r7, #28]
 800746e:	f7ff fd4f 	bl	8006f10 <NoteFnFree>
			jsonbuf = jsonbufNew;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	61fb      	str	r3, [r7, #28]
	while (ch != '\n') {
 8007476:	7dfb      	ldrb	r3, [r7, #23]
 8007478:	2b0a      	cmp	r3, #10
 800747a:	d18f      	bne.n	800739c <serialNoteTransaction+0xdc>
		}
	}

	// Null-terminate it, using the +1 space that we'd allocated in the buffer
	jsonbuf[jsonbufLen] = '\0';
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	69fa      	ldr	r2, [r7, #28]
 8007480:	4413      	add	r3, r2
 8007482:	2200      	movs	r2, #0
 8007484:	701a      	strb	r2, [r3, #0]

	// Return it
	*jsonResponse = jsonbuf;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	69fa      	ldr	r2, [r7, #28]
 800748a:	601a      	str	r2, [r3, #0]
	return NULL;
 800748c:	2300      	movs	r3, #0

}
 800748e:	4618      	mov	r0, r3
 8007490:	3730      	adds	r7, #48	; 0x30
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	080080c0 	.word	0x080080c0
 800749c:	080080c4 	.word	0x080080c4
 80074a0:	080080f8 	.word	0x080080f8
 80074a4:	0800810c 	.word	0x0800810c
 80074a8:	08008134 	.word	0x08008134
 80074ac:	08008148 	.word	0x08008148
 80074b0:	0800817c 	.word	0x0800817c
 80074b4:	08008194 	.word	0x08008194
 80074b8:	080081d0 	.word	0x080081d0
 80074bc:	080081ec 	.word	0x080081ec

080074c0 <serialNoteReset>:

// Initialize or re-initialize the module, returning false if anything fails
bool serialNoteReset() {
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0

	// Initialize, or re-initialize.  Because we've observed Arduino serial driver flakiness,
	_DelayMs(250);
 80074c6:	20fa      	movs	r0, #250	; 0xfa
 80074c8:	f7ff fcfa 	bl	8006ec0 <NoteFnDelayMs>
	_SerialReset();
 80074cc:	f7ff fd4e 	bl	8006f6c <NoteFnSerialReset>

	// The guaranteed behavior for robust resyncing is to send two newlines
	// and	wait for two echoed blank lines in return.
	bool notecardReady = false;
 80074d0:	2300      	movs	r3, #0
 80074d2:	73fb      	strb	r3, [r7, #15]
	int retries;
	for (retries=0; retries<10; retries++) {
 80074d4:	2300      	movs	r3, #0
 80074d6:	60bb      	str	r3, [r7, #8]
 80074d8:	e046      	b.n	8007568 <serialNoteReset+0xa8>

		_Debug("notecard serial reset\n");
 80074da:	4827      	ldr	r0, [pc, #156]	; (8007578 <serialNoteReset+0xb8>)
 80074dc:	f7ff fcbc 	bl	8006e58 <NoteFnDebug>

		// Send a few newlines to the module to clean out request/response processing
		_SerialTransmit((uint8_t *)"\n\n", 2, true);
 80074e0:	2201      	movs	r2, #1
 80074e2:	2102      	movs	r1, #2
 80074e4:	4825      	ldr	r0, [pc, #148]	; (800757c <serialNoteReset+0xbc>)
 80074e6:	f7ff fd55 	bl	8006f94 <NoteFnSerialTransmit>

		// Drain all serial for 500ms
		bool somethingFound = false;
 80074ea:	2300      	movs	r3, #0
 80074ec:	71fb      	strb	r3, [r7, #7]
		bool nonControlCharFound = false;
 80074ee:	2300      	movs	r3, #0
 80074f0:	71bb      	strb	r3, [r7, #6]
		uint32_t start = _GetMs();
 80074f2:	f7ff fcd5 	bl	8006ea0 <NoteFnGetMs>
 80074f6:	6038      	str	r0, [r7, #0]
		while (_GetMs() < start+500) {
 80074f8:	e010      	b.n	800751c <serialNoteReset+0x5c>
			while (_SerialAvailable()) {
				somethingFound = true;
 80074fa:	2301      	movs	r3, #1
 80074fc:	71fb      	strb	r3, [r7, #7]
				if (_SerialReceive() >= ' ')
 80074fe:	f7ff fd7d 	bl	8006ffc <NoteFnSerialReceive>
 8007502:	4603      	mov	r3, r0
 8007504:	2b1f      	cmp	r3, #31
 8007506:	d901      	bls.n	800750c <serialNoteReset+0x4c>
					nonControlCharFound = true;
 8007508:	2301      	movs	r3, #1
 800750a:	71bb      	strb	r3, [r7, #6]
			while (_SerialAvailable()) {
 800750c:	f7ff fd60 	bl	8006fd0 <NoteFnSerialAvailable>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1f1      	bne.n	80074fa <serialNoteReset+0x3a>
			}
			_DelayMs(1);
 8007516:	2001      	movs	r0, #1
 8007518:	f7ff fcd2 	bl	8006ec0 <NoteFnDelayMs>
		while (_GetMs() < start+500) {
 800751c:	f7ff fcc0 	bl	8006ea0 <NoteFnGetMs>
 8007520:	4602      	mov	r2, r0
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007528:	429a      	cmp	r2, r3
 800752a:	d3ef      	bcc.n	800750c <serialNoteReset+0x4c>
		}

		// If all we got back is newlines, we're ready
		if (somethingFound && !nonControlCharFound) {
 800752c:	79fb      	ldrb	r3, [r7, #7]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d008      	beq.n	8007544 <serialNoteReset+0x84>
 8007532:	79bb      	ldrb	r3, [r7, #6]
 8007534:	f083 0301 	eor.w	r3, r3, #1
 8007538:	b2db      	uxtb	r3, r3
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <serialNoteReset+0x84>
			notecardReady = true;
 800753e:	2301      	movs	r3, #1
 8007540:	73fb      	strb	r3, [r7, #15]
			break;
 8007542:	e014      	b.n	800756e <serialNoteReset+0xae>
		}

		_Debug(somethingFound ? "unrecognized data from notecard\n" : "notecard not responding\n");
 8007544:	79fb      	ldrb	r3, [r7, #7]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d001      	beq.n	800754e <serialNoteReset+0x8e>
 800754a:	4b0d      	ldr	r3, [pc, #52]	; (8007580 <serialNoteReset+0xc0>)
 800754c:	e000      	b.n	8007550 <serialNoteReset+0x90>
 800754e:	4b0d      	ldr	r3, [pc, #52]	; (8007584 <serialNoteReset+0xc4>)
 8007550:	4618      	mov	r0, r3
 8007552:	f7ff fc81 	bl	8006e58 <NoteFnDebug>
		_DelayMs(500);
 8007556:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800755a:	f7ff fcb1 	bl	8006ec0 <NoteFnDelayMs>
		_SerialReset();
 800755e:	f7ff fd05 	bl	8006f6c <NoteFnSerialReset>
	for (retries=0; retries<10; retries++) {
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	3301      	adds	r3, #1
 8007566:	60bb      	str	r3, [r7, #8]
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	2b09      	cmp	r3, #9
 800756c:	ddb5      	ble.n	80074da <serialNoteReset+0x1a>

	}

	// Done
	return notecardReady;
 800756e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	0800821c 	.word	0x0800821c
 800757c:	08008234 	.word	0x08008234
 8007580:	08008238 	.word	0x08008238
 8007584:	0800825c 	.word	0x0800825c

08007588 <__errno>:
 8007588:	4b01      	ldr	r3, [pc, #4]	; (8007590 <__errno+0x8>)
 800758a:	6818      	ldr	r0, [r3, #0]
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	20000068 	.word	0x20000068

08007594 <__libc_init_array>:
 8007594:	b570      	push	{r4, r5, r6, lr}
 8007596:	2500      	movs	r5, #0
 8007598:	4e0c      	ldr	r6, [pc, #48]	; (80075cc <__libc_init_array+0x38>)
 800759a:	4c0d      	ldr	r4, [pc, #52]	; (80075d0 <__libc_init_array+0x3c>)
 800759c:	1ba4      	subs	r4, r4, r6
 800759e:	10a4      	asrs	r4, r4, #2
 80075a0:	42a5      	cmp	r5, r4
 80075a2:	d109      	bne.n	80075b8 <__libc_init_array+0x24>
 80075a4:	f000 fcac 	bl	8007f00 <_init>
 80075a8:	2500      	movs	r5, #0
 80075aa:	4e0a      	ldr	r6, [pc, #40]	; (80075d4 <__libc_init_array+0x40>)
 80075ac:	4c0a      	ldr	r4, [pc, #40]	; (80075d8 <__libc_init_array+0x44>)
 80075ae:	1ba4      	subs	r4, r4, r6
 80075b0:	10a4      	asrs	r4, r4, #2
 80075b2:	42a5      	cmp	r5, r4
 80075b4:	d105      	bne.n	80075c2 <__libc_init_array+0x2e>
 80075b6:	bd70      	pop	{r4, r5, r6, pc}
 80075b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075bc:	4798      	blx	r3
 80075be:	3501      	adds	r5, #1
 80075c0:	e7ee      	b.n	80075a0 <__libc_init_array+0xc>
 80075c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075c6:	4798      	blx	r3
 80075c8:	3501      	adds	r5, #1
 80075ca:	e7f2      	b.n	80075b2 <__libc_init_array+0x1e>
 80075cc:	08008430 	.word	0x08008430
 80075d0:	08008430 	.word	0x08008430
 80075d4:	08008430 	.word	0x08008430
 80075d8:	08008434 	.word	0x08008434

080075dc <__locale_ctype_ptr>:
 80075dc:	4b04      	ldr	r3, [pc, #16]	; (80075f0 <__locale_ctype_ptr+0x14>)
 80075de:	4a05      	ldr	r2, [pc, #20]	; (80075f4 <__locale_ctype_ptr+0x18>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	6a1b      	ldr	r3, [r3, #32]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	bf08      	it	eq
 80075e8:	4613      	moveq	r3, r2
 80075ea:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80075ee:	4770      	bx	lr
 80075f0:	20000068 	.word	0x20000068
 80075f4:	200000cc 	.word	0x200000cc

080075f8 <malloc>:
 80075f8:	4b02      	ldr	r3, [pc, #8]	; (8007604 <malloc+0xc>)
 80075fa:	4601      	mov	r1, r0
 80075fc:	6818      	ldr	r0, [r3, #0]
 80075fe:	f000 b895 	b.w	800772c <_malloc_r>
 8007602:	bf00      	nop
 8007604:	20000068 	.word	0x20000068

08007608 <free>:
 8007608:	4b02      	ldr	r3, [pc, #8]	; (8007614 <free+0xc>)
 800760a:	4601      	mov	r1, r0
 800760c:	6818      	ldr	r0, [r3, #0]
 800760e:	f000 b841 	b.w	8007694 <_free_r>
 8007612:	bf00      	nop
 8007614:	20000068 	.word	0x20000068

08007618 <__ascii_mbtowc>:
 8007618:	b082      	sub	sp, #8
 800761a:	b901      	cbnz	r1, 800761e <__ascii_mbtowc+0x6>
 800761c:	a901      	add	r1, sp, #4
 800761e:	b142      	cbz	r2, 8007632 <__ascii_mbtowc+0x1a>
 8007620:	b14b      	cbz	r3, 8007636 <__ascii_mbtowc+0x1e>
 8007622:	7813      	ldrb	r3, [r2, #0]
 8007624:	600b      	str	r3, [r1, #0]
 8007626:	7812      	ldrb	r2, [r2, #0]
 8007628:	1c10      	adds	r0, r2, #0
 800762a:	bf18      	it	ne
 800762c:	2001      	movne	r0, #1
 800762e:	b002      	add	sp, #8
 8007630:	4770      	bx	lr
 8007632:	4610      	mov	r0, r2
 8007634:	e7fb      	b.n	800762e <__ascii_mbtowc+0x16>
 8007636:	f06f 0001 	mvn.w	r0, #1
 800763a:	e7f8      	b.n	800762e <__ascii_mbtowc+0x16>

0800763c <memcpy>:
 800763c:	b510      	push	{r4, lr}
 800763e:	1e43      	subs	r3, r0, #1
 8007640:	440a      	add	r2, r1
 8007642:	4291      	cmp	r1, r2
 8007644:	d100      	bne.n	8007648 <memcpy+0xc>
 8007646:	bd10      	pop	{r4, pc}
 8007648:	f811 4b01 	ldrb.w	r4, [r1], #1
 800764c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007650:	e7f7      	b.n	8007642 <memcpy+0x6>

08007652 <memmove>:
 8007652:	4288      	cmp	r0, r1
 8007654:	b510      	push	{r4, lr}
 8007656:	eb01 0302 	add.w	r3, r1, r2
 800765a:	d807      	bhi.n	800766c <memmove+0x1a>
 800765c:	1e42      	subs	r2, r0, #1
 800765e:	4299      	cmp	r1, r3
 8007660:	d00a      	beq.n	8007678 <memmove+0x26>
 8007662:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007666:	f802 4f01 	strb.w	r4, [r2, #1]!
 800766a:	e7f8      	b.n	800765e <memmove+0xc>
 800766c:	4283      	cmp	r3, r0
 800766e:	d9f5      	bls.n	800765c <memmove+0xa>
 8007670:	1881      	adds	r1, r0, r2
 8007672:	1ad2      	subs	r2, r2, r3
 8007674:	42d3      	cmn	r3, r2
 8007676:	d100      	bne.n	800767a <memmove+0x28>
 8007678:	bd10      	pop	{r4, pc}
 800767a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800767e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007682:	e7f7      	b.n	8007674 <memmove+0x22>

08007684 <memset>:
 8007684:	4603      	mov	r3, r0
 8007686:	4402      	add	r2, r0
 8007688:	4293      	cmp	r3, r2
 800768a:	d100      	bne.n	800768e <memset+0xa>
 800768c:	4770      	bx	lr
 800768e:	f803 1b01 	strb.w	r1, [r3], #1
 8007692:	e7f9      	b.n	8007688 <memset+0x4>

08007694 <_free_r>:
 8007694:	b538      	push	{r3, r4, r5, lr}
 8007696:	4605      	mov	r5, r0
 8007698:	2900      	cmp	r1, #0
 800769a:	d043      	beq.n	8007724 <_free_r+0x90>
 800769c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076a0:	1f0c      	subs	r4, r1, #4
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	bfb8      	it	lt
 80076a6:	18e4      	addlt	r4, r4, r3
 80076a8:	f000 f911 	bl	80078ce <__malloc_lock>
 80076ac:	4a1e      	ldr	r2, [pc, #120]	; (8007728 <_free_r+0x94>)
 80076ae:	6813      	ldr	r3, [r2, #0]
 80076b0:	4610      	mov	r0, r2
 80076b2:	b933      	cbnz	r3, 80076c2 <_free_r+0x2e>
 80076b4:	6063      	str	r3, [r4, #4]
 80076b6:	6014      	str	r4, [r2, #0]
 80076b8:	4628      	mov	r0, r5
 80076ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076be:	f000 b907 	b.w	80078d0 <__malloc_unlock>
 80076c2:	42a3      	cmp	r3, r4
 80076c4:	d90b      	bls.n	80076de <_free_r+0x4a>
 80076c6:	6821      	ldr	r1, [r4, #0]
 80076c8:	1862      	adds	r2, r4, r1
 80076ca:	4293      	cmp	r3, r2
 80076cc:	bf01      	itttt	eq
 80076ce:	681a      	ldreq	r2, [r3, #0]
 80076d0:	685b      	ldreq	r3, [r3, #4]
 80076d2:	1852      	addeq	r2, r2, r1
 80076d4:	6022      	streq	r2, [r4, #0]
 80076d6:	6063      	str	r3, [r4, #4]
 80076d8:	6004      	str	r4, [r0, #0]
 80076da:	e7ed      	b.n	80076b8 <_free_r+0x24>
 80076dc:	4613      	mov	r3, r2
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	b10a      	cbz	r2, 80076e6 <_free_r+0x52>
 80076e2:	42a2      	cmp	r2, r4
 80076e4:	d9fa      	bls.n	80076dc <_free_r+0x48>
 80076e6:	6819      	ldr	r1, [r3, #0]
 80076e8:	1858      	adds	r0, r3, r1
 80076ea:	42a0      	cmp	r0, r4
 80076ec:	d10b      	bne.n	8007706 <_free_r+0x72>
 80076ee:	6820      	ldr	r0, [r4, #0]
 80076f0:	4401      	add	r1, r0
 80076f2:	1858      	adds	r0, r3, r1
 80076f4:	4282      	cmp	r2, r0
 80076f6:	6019      	str	r1, [r3, #0]
 80076f8:	d1de      	bne.n	80076b8 <_free_r+0x24>
 80076fa:	6810      	ldr	r0, [r2, #0]
 80076fc:	6852      	ldr	r2, [r2, #4]
 80076fe:	4401      	add	r1, r0
 8007700:	6019      	str	r1, [r3, #0]
 8007702:	605a      	str	r2, [r3, #4]
 8007704:	e7d8      	b.n	80076b8 <_free_r+0x24>
 8007706:	d902      	bls.n	800770e <_free_r+0x7a>
 8007708:	230c      	movs	r3, #12
 800770a:	602b      	str	r3, [r5, #0]
 800770c:	e7d4      	b.n	80076b8 <_free_r+0x24>
 800770e:	6820      	ldr	r0, [r4, #0]
 8007710:	1821      	adds	r1, r4, r0
 8007712:	428a      	cmp	r2, r1
 8007714:	bf01      	itttt	eq
 8007716:	6811      	ldreq	r1, [r2, #0]
 8007718:	6852      	ldreq	r2, [r2, #4]
 800771a:	1809      	addeq	r1, r1, r0
 800771c:	6021      	streq	r1, [r4, #0]
 800771e:	6062      	str	r2, [r4, #4]
 8007720:	605c      	str	r4, [r3, #4]
 8007722:	e7c9      	b.n	80076b8 <_free_r+0x24>
 8007724:	bd38      	pop	{r3, r4, r5, pc}
 8007726:	bf00      	nop
 8007728:	200004b0 	.word	0x200004b0

0800772c <_malloc_r>:
 800772c:	b570      	push	{r4, r5, r6, lr}
 800772e:	1ccd      	adds	r5, r1, #3
 8007730:	f025 0503 	bic.w	r5, r5, #3
 8007734:	3508      	adds	r5, #8
 8007736:	2d0c      	cmp	r5, #12
 8007738:	bf38      	it	cc
 800773a:	250c      	movcc	r5, #12
 800773c:	2d00      	cmp	r5, #0
 800773e:	4606      	mov	r6, r0
 8007740:	db01      	blt.n	8007746 <_malloc_r+0x1a>
 8007742:	42a9      	cmp	r1, r5
 8007744:	d903      	bls.n	800774e <_malloc_r+0x22>
 8007746:	230c      	movs	r3, #12
 8007748:	6033      	str	r3, [r6, #0]
 800774a:	2000      	movs	r0, #0
 800774c:	bd70      	pop	{r4, r5, r6, pc}
 800774e:	f000 f8be 	bl	80078ce <__malloc_lock>
 8007752:	4a21      	ldr	r2, [pc, #132]	; (80077d8 <_malloc_r+0xac>)
 8007754:	6814      	ldr	r4, [r2, #0]
 8007756:	4621      	mov	r1, r4
 8007758:	b991      	cbnz	r1, 8007780 <_malloc_r+0x54>
 800775a:	4c20      	ldr	r4, [pc, #128]	; (80077dc <_malloc_r+0xb0>)
 800775c:	6823      	ldr	r3, [r4, #0]
 800775e:	b91b      	cbnz	r3, 8007768 <_malloc_r+0x3c>
 8007760:	4630      	mov	r0, r6
 8007762:	f000 f83d 	bl	80077e0 <_sbrk_r>
 8007766:	6020      	str	r0, [r4, #0]
 8007768:	4629      	mov	r1, r5
 800776a:	4630      	mov	r0, r6
 800776c:	f000 f838 	bl	80077e0 <_sbrk_r>
 8007770:	1c43      	adds	r3, r0, #1
 8007772:	d124      	bne.n	80077be <_malloc_r+0x92>
 8007774:	230c      	movs	r3, #12
 8007776:	4630      	mov	r0, r6
 8007778:	6033      	str	r3, [r6, #0]
 800777a:	f000 f8a9 	bl	80078d0 <__malloc_unlock>
 800777e:	e7e4      	b.n	800774a <_malloc_r+0x1e>
 8007780:	680b      	ldr	r3, [r1, #0]
 8007782:	1b5b      	subs	r3, r3, r5
 8007784:	d418      	bmi.n	80077b8 <_malloc_r+0x8c>
 8007786:	2b0b      	cmp	r3, #11
 8007788:	d90f      	bls.n	80077aa <_malloc_r+0x7e>
 800778a:	600b      	str	r3, [r1, #0]
 800778c:	18cc      	adds	r4, r1, r3
 800778e:	50cd      	str	r5, [r1, r3]
 8007790:	4630      	mov	r0, r6
 8007792:	f000 f89d 	bl	80078d0 <__malloc_unlock>
 8007796:	f104 000b 	add.w	r0, r4, #11
 800779a:	1d23      	adds	r3, r4, #4
 800779c:	f020 0007 	bic.w	r0, r0, #7
 80077a0:	1ac3      	subs	r3, r0, r3
 80077a2:	d0d3      	beq.n	800774c <_malloc_r+0x20>
 80077a4:	425a      	negs	r2, r3
 80077a6:	50e2      	str	r2, [r4, r3]
 80077a8:	e7d0      	b.n	800774c <_malloc_r+0x20>
 80077aa:	684b      	ldr	r3, [r1, #4]
 80077ac:	428c      	cmp	r4, r1
 80077ae:	bf16      	itet	ne
 80077b0:	6063      	strne	r3, [r4, #4]
 80077b2:	6013      	streq	r3, [r2, #0]
 80077b4:	460c      	movne	r4, r1
 80077b6:	e7eb      	b.n	8007790 <_malloc_r+0x64>
 80077b8:	460c      	mov	r4, r1
 80077ba:	6849      	ldr	r1, [r1, #4]
 80077bc:	e7cc      	b.n	8007758 <_malloc_r+0x2c>
 80077be:	1cc4      	adds	r4, r0, #3
 80077c0:	f024 0403 	bic.w	r4, r4, #3
 80077c4:	42a0      	cmp	r0, r4
 80077c6:	d005      	beq.n	80077d4 <_malloc_r+0xa8>
 80077c8:	1a21      	subs	r1, r4, r0
 80077ca:	4630      	mov	r0, r6
 80077cc:	f000 f808 	bl	80077e0 <_sbrk_r>
 80077d0:	3001      	adds	r0, #1
 80077d2:	d0cf      	beq.n	8007774 <_malloc_r+0x48>
 80077d4:	6025      	str	r5, [r4, #0]
 80077d6:	e7db      	b.n	8007790 <_malloc_r+0x64>
 80077d8:	200004b0 	.word	0x200004b0
 80077dc:	200004b4 	.word	0x200004b4

080077e0 <_sbrk_r>:
 80077e0:	b538      	push	{r3, r4, r5, lr}
 80077e2:	2300      	movs	r3, #0
 80077e4:	4c05      	ldr	r4, [pc, #20]	; (80077fc <_sbrk_r+0x1c>)
 80077e6:	4605      	mov	r5, r0
 80077e8:	4608      	mov	r0, r1
 80077ea:	6023      	str	r3, [r4, #0]
 80077ec:	f7fc fea2 	bl	8004534 <_sbrk>
 80077f0:	1c43      	adds	r3, r0, #1
 80077f2:	d102      	bne.n	80077fa <_sbrk_r+0x1a>
 80077f4:	6823      	ldr	r3, [r4, #0]
 80077f6:	b103      	cbz	r3, 80077fa <_sbrk_r+0x1a>
 80077f8:	602b      	str	r3, [r5, #0]
 80077fa:	bd38      	pop	{r3, r4, r5, pc}
 80077fc:	20000550 	.word	0x20000550

08007800 <strchr>:
 8007800:	b2c9      	uxtb	r1, r1
 8007802:	4603      	mov	r3, r0
 8007804:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007808:	b11a      	cbz	r2, 8007812 <strchr+0x12>
 800780a:	428a      	cmp	r2, r1
 800780c:	d1f9      	bne.n	8007802 <strchr+0x2>
 800780e:	4618      	mov	r0, r3
 8007810:	4770      	bx	lr
 8007812:	2900      	cmp	r1, #0
 8007814:	bf18      	it	ne
 8007816:	2300      	movne	r3, #0
 8007818:	e7f9      	b.n	800780e <strchr+0xe>

0800781a <strncmp>:
 800781a:	b510      	push	{r4, lr}
 800781c:	b16a      	cbz	r2, 800783a <strncmp+0x20>
 800781e:	3901      	subs	r1, #1
 8007820:	1884      	adds	r4, r0, r2
 8007822:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007826:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800782a:	4293      	cmp	r3, r2
 800782c:	d103      	bne.n	8007836 <strncmp+0x1c>
 800782e:	42a0      	cmp	r0, r4
 8007830:	d001      	beq.n	8007836 <strncmp+0x1c>
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1f5      	bne.n	8007822 <strncmp+0x8>
 8007836:	1a98      	subs	r0, r3, r2
 8007838:	bd10      	pop	{r4, pc}
 800783a:	4610      	mov	r0, r2
 800783c:	e7fc      	b.n	8007838 <strncmp+0x1e>

0800783e <_vsniprintf_r>:
 800783e:	b530      	push	{r4, r5, lr}
 8007840:	1e14      	subs	r4, r2, #0
 8007842:	4605      	mov	r5, r0
 8007844:	b09b      	sub	sp, #108	; 0x6c
 8007846:	4618      	mov	r0, r3
 8007848:	da05      	bge.n	8007856 <_vsniprintf_r+0x18>
 800784a:	238b      	movs	r3, #139	; 0x8b
 800784c:	f04f 30ff 	mov.w	r0, #4294967295
 8007850:	602b      	str	r3, [r5, #0]
 8007852:	b01b      	add	sp, #108	; 0x6c
 8007854:	bd30      	pop	{r4, r5, pc}
 8007856:	f44f 7302 	mov.w	r3, #520	; 0x208
 800785a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800785e:	bf0c      	ite	eq
 8007860:	4623      	moveq	r3, r4
 8007862:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007866:	9302      	str	r3, [sp, #8]
 8007868:	9305      	str	r3, [sp, #20]
 800786a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800786e:	9100      	str	r1, [sp, #0]
 8007870:	9104      	str	r1, [sp, #16]
 8007872:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007876:	4602      	mov	r2, r0
 8007878:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800787a:	4669      	mov	r1, sp
 800787c:	4628      	mov	r0, r5
 800787e:	f000 f883 	bl	8007988 <_svfiprintf_r>
 8007882:	1c43      	adds	r3, r0, #1
 8007884:	bfbc      	itt	lt
 8007886:	238b      	movlt	r3, #139	; 0x8b
 8007888:	602b      	strlt	r3, [r5, #0]
 800788a:	2c00      	cmp	r4, #0
 800788c:	d0e1      	beq.n	8007852 <_vsniprintf_r+0x14>
 800788e:	2200      	movs	r2, #0
 8007890:	9b00      	ldr	r3, [sp, #0]
 8007892:	701a      	strb	r2, [r3, #0]
 8007894:	e7dd      	b.n	8007852 <_vsniprintf_r+0x14>
	...

08007898 <vsniprintf>:
 8007898:	b507      	push	{r0, r1, r2, lr}
 800789a:	9300      	str	r3, [sp, #0]
 800789c:	4613      	mov	r3, r2
 800789e:	460a      	mov	r2, r1
 80078a0:	4601      	mov	r1, r0
 80078a2:	4803      	ldr	r0, [pc, #12]	; (80078b0 <vsniprintf+0x18>)
 80078a4:	6800      	ldr	r0, [r0, #0]
 80078a6:	f7ff ffca 	bl	800783e <_vsniprintf_r>
 80078aa:	b003      	add	sp, #12
 80078ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80078b0:	20000068 	.word	0x20000068

080078b4 <__ascii_wctomb>:
 80078b4:	b149      	cbz	r1, 80078ca <__ascii_wctomb+0x16>
 80078b6:	2aff      	cmp	r2, #255	; 0xff
 80078b8:	bf8b      	itete	hi
 80078ba:	238a      	movhi	r3, #138	; 0x8a
 80078bc:	700a      	strbls	r2, [r1, #0]
 80078be:	6003      	strhi	r3, [r0, #0]
 80078c0:	2001      	movls	r0, #1
 80078c2:	bf88      	it	hi
 80078c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80078c8:	4770      	bx	lr
 80078ca:	4608      	mov	r0, r1
 80078cc:	4770      	bx	lr

080078ce <__malloc_lock>:
 80078ce:	4770      	bx	lr

080078d0 <__malloc_unlock>:
 80078d0:	4770      	bx	lr

080078d2 <__ssputs_r>:
 80078d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078d6:	688e      	ldr	r6, [r1, #8]
 80078d8:	4682      	mov	sl, r0
 80078da:	429e      	cmp	r6, r3
 80078dc:	460c      	mov	r4, r1
 80078de:	4690      	mov	r8, r2
 80078e0:	4699      	mov	r9, r3
 80078e2:	d837      	bhi.n	8007954 <__ssputs_r+0x82>
 80078e4:	898a      	ldrh	r2, [r1, #12]
 80078e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078ea:	d031      	beq.n	8007950 <__ssputs_r+0x7e>
 80078ec:	2302      	movs	r3, #2
 80078ee:	6825      	ldr	r5, [r4, #0]
 80078f0:	6909      	ldr	r1, [r1, #16]
 80078f2:	1a6f      	subs	r7, r5, r1
 80078f4:	6965      	ldr	r5, [r4, #20]
 80078f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078fa:	fb95 f5f3 	sdiv	r5, r5, r3
 80078fe:	f109 0301 	add.w	r3, r9, #1
 8007902:	443b      	add	r3, r7
 8007904:	429d      	cmp	r5, r3
 8007906:	bf38      	it	cc
 8007908:	461d      	movcc	r5, r3
 800790a:	0553      	lsls	r3, r2, #21
 800790c:	d530      	bpl.n	8007970 <__ssputs_r+0x9e>
 800790e:	4629      	mov	r1, r5
 8007910:	f7ff ff0c 	bl	800772c <_malloc_r>
 8007914:	4606      	mov	r6, r0
 8007916:	b950      	cbnz	r0, 800792e <__ssputs_r+0x5c>
 8007918:	230c      	movs	r3, #12
 800791a:	f04f 30ff 	mov.w	r0, #4294967295
 800791e:	f8ca 3000 	str.w	r3, [sl]
 8007922:	89a3      	ldrh	r3, [r4, #12]
 8007924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007928:	81a3      	strh	r3, [r4, #12]
 800792a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800792e:	463a      	mov	r2, r7
 8007930:	6921      	ldr	r1, [r4, #16]
 8007932:	f7ff fe83 	bl	800763c <memcpy>
 8007936:	89a3      	ldrh	r3, [r4, #12]
 8007938:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800793c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007940:	81a3      	strh	r3, [r4, #12]
 8007942:	6126      	str	r6, [r4, #16]
 8007944:	443e      	add	r6, r7
 8007946:	6026      	str	r6, [r4, #0]
 8007948:	464e      	mov	r6, r9
 800794a:	6165      	str	r5, [r4, #20]
 800794c:	1bed      	subs	r5, r5, r7
 800794e:	60a5      	str	r5, [r4, #8]
 8007950:	454e      	cmp	r6, r9
 8007952:	d900      	bls.n	8007956 <__ssputs_r+0x84>
 8007954:	464e      	mov	r6, r9
 8007956:	4632      	mov	r2, r6
 8007958:	4641      	mov	r1, r8
 800795a:	6820      	ldr	r0, [r4, #0]
 800795c:	f7ff fe79 	bl	8007652 <memmove>
 8007960:	68a3      	ldr	r3, [r4, #8]
 8007962:	2000      	movs	r0, #0
 8007964:	1b9b      	subs	r3, r3, r6
 8007966:	60a3      	str	r3, [r4, #8]
 8007968:	6823      	ldr	r3, [r4, #0]
 800796a:	441e      	add	r6, r3
 800796c:	6026      	str	r6, [r4, #0]
 800796e:	e7dc      	b.n	800792a <__ssputs_r+0x58>
 8007970:	462a      	mov	r2, r5
 8007972:	f000 fa97 	bl	8007ea4 <_realloc_r>
 8007976:	4606      	mov	r6, r0
 8007978:	2800      	cmp	r0, #0
 800797a:	d1e2      	bne.n	8007942 <__ssputs_r+0x70>
 800797c:	6921      	ldr	r1, [r4, #16]
 800797e:	4650      	mov	r0, sl
 8007980:	f7ff fe88 	bl	8007694 <_free_r>
 8007984:	e7c8      	b.n	8007918 <__ssputs_r+0x46>
	...

08007988 <_svfiprintf_r>:
 8007988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798c:	461d      	mov	r5, r3
 800798e:	898b      	ldrh	r3, [r1, #12]
 8007990:	b09d      	sub	sp, #116	; 0x74
 8007992:	061f      	lsls	r7, r3, #24
 8007994:	4680      	mov	r8, r0
 8007996:	460c      	mov	r4, r1
 8007998:	4616      	mov	r6, r2
 800799a:	d50f      	bpl.n	80079bc <_svfiprintf_r+0x34>
 800799c:	690b      	ldr	r3, [r1, #16]
 800799e:	b96b      	cbnz	r3, 80079bc <_svfiprintf_r+0x34>
 80079a0:	2140      	movs	r1, #64	; 0x40
 80079a2:	f7ff fec3 	bl	800772c <_malloc_r>
 80079a6:	6020      	str	r0, [r4, #0]
 80079a8:	6120      	str	r0, [r4, #16]
 80079aa:	b928      	cbnz	r0, 80079b8 <_svfiprintf_r+0x30>
 80079ac:	230c      	movs	r3, #12
 80079ae:	f8c8 3000 	str.w	r3, [r8]
 80079b2:	f04f 30ff 	mov.w	r0, #4294967295
 80079b6:	e0c8      	b.n	8007b4a <_svfiprintf_r+0x1c2>
 80079b8:	2340      	movs	r3, #64	; 0x40
 80079ba:	6163      	str	r3, [r4, #20]
 80079bc:	2300      	movs	r3, #0
 80079be:	9309      	str	r3, [sp, #36]	; 0x24
 80079c0:	2320      	movs	r3, #32
 80079c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079c6:	2330      	movs	r3, #48	; 0x30
 80079c8:	f04f 0b01 	mov.w	fp, #1
 80079cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079d0:	9503      	str	r5, [sp, #12]
 80079d2:	4637      	mov	r7, r6
 80079d4:	463d      	mov	r5, r7
 80079d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80079da:	b10b      	cbz	r3, 80079e0 <_svfiprintf_r+0x58>
 80079dc:	2b25      	cmp	r3, #37	; 0x25
 80079de:	d13e      	bne.n	8007a5e <_svfiprintf_r+0xd6>
 80079e0:	ebb7 0a06 	subs.w	sl, r7, r6
 80079e4:	d00b      	beq.n	80079fe <_svfiprintf_r+0x76>
 80079e6:	4653      	mov	r3, sl
 80079e8:	4632      	mov	r2, r6
 80079ea:	4621      	mov	r1, r4
 80079ec:	4640      	mov	r0, r8
 80079ee:	f7ff ff70 	bl	80078d2 <__ssputs_r>
 80079f2:	3001      	adds	r0, #1
 80079f4:	f000 80a4 	beq.w	8007b40 <_svfiprintf_r+0x1b8>
 80079f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079fa:	4453      	add	r3, sl
 80079fc:	9309      	str	r3, [sp, #36]	; 0x24
 80079fe:	783b      	ldrb	r3, [r7, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f000 809d 	beq.w	8007b40 <_svfiprintf_r+0x1b8>
 8007a06:	2300      	movs	r3, #0
 8007a08:	f04f 32ff 	mov.w	r2, #4294967295
 8007a0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a10:	9304      	str	r3, [sp, #16]
 8007a12:	9307      	str	r3, [sp, #28]
 8007a14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a18:	931a      	str	r3, [sp, #104]	; 0x68
 8007a1a:	462f      	mov	r7, r5
 8007a1c:	2205      	movs	r2, #5
 8007a1e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007a22:	4850      	ldr	r0, [pc, #320]	; (8007b64 <_svfiprintf_r+0x1dc>)
 8007a24:	f000 fa30 	bl	8007e88 <memchr>
 8007a28:	9b04      	ldr	r3, [sp, #16]
 8007a2a:	b9d0      	cbnz	r0, 8007a62 <_svfiprintf_r+0xda>
 8007a2c:	06d9      	lsls	r1, r3, #27
 8007a2e:	bf44      	itt	mi
 8007a30:	2220      	movmi	r2, #32
 8007a32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a36:	071a      	lsls	r2, r3, #28
 8007a38:	bf44      	itt	mi
 8007a3a:	222b      	movmi	r2, #43	; 0x2b
 8007a3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a40:	782a      	ldrb	r2, [r5, #0]
 8007a42:	2a2a      	cmp	r2, #42	; 0x2a
 8007a44:	d015      	beq.n	8007a72 <_svfiprintf_r+0xea>
 8007a46:	462f      	mov	r7, r5
 8007a48:	2000      	movs	r0, #0
 8007a4a:	250a      	movs	r5, #10
 8007a4c:	9a07      	ldr	r2, [sp, #28]
 8007a4e:	4639      	mov	r1, r7
 8007a50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a54:	3b30      	subs	r3, #48	; 0x30
 8007a56:	2b09      	cmp	r3, #9
 8007a58:	d94d      	bls.n	8007af6 <_svfiprintf_r+0x16e>
 8007a5a:	b1b8      	cbz	r0, 8007a8c <_svfiprintf_r+0x104>
 8007a5c:	e00f      	b.n	8007a7e <_svfiprintf_r+0xf6>
 8007a5e:	462f      	mov	r7, r5
 8007a60:	e7b8      	b.n	80079d4 <_svfiprintf_r+0x4c>
 8007a62:	4a40      	ldr	r2, [pc, #256]	; (8007b64 <_svfiprintf_r+0x1dc>)
 8007a64:	463d      	mov	r5, r7
 8007a66:	1a80      	subs	r0, r0, r2
 8007a68:	fa0b f000 	lsl.w	r0, fp, r0
 8007a6c:	4318      	orrs	r0, r3
 8007a6e:	9004      	str	r0, [sp, #16]
 8007a70:	e7d3      	b.n	8007a1a <_svfiprintf_r+0x92>
 8007a72:	9a03      	ldr	r2, [sp, #12]
 8007a74:	1d11      	adds	r1, r2, #4
 8007a76:	6812      	ldr	r2, [r2, #0]
 8007a78:	9103      	str	r1, [sp, #12]
 8007a7a:	2a00      	cmp	r2, #0
 8007a7c:	db01      	blt.n	8007a82 <_svfiprintf_r+0xfa>
 8007a7e:	9207      	str	r2, [sp, #28]
 8007a80:	e004      	b.n	8007a8c <_svfiprintf_r+0x104>
 8007a82:	4252      	negs	r2, r2
 8007a84:	f043 0302 	orr.w	r3, r3, #2
 8007a88:	9207      	str	r2, [sp, #28]
 8007a8a:	9304      	str	r3, [sp, #16]
 8007a8c:	783b      	ldrb	r3, [r7, #0]
 8007a8e:	2b2e      	cmp	r3, #46	; 0x2e
 8007a90:	d10c      	bne.n	8007aac <_svfiprintf_r+0x124>
 8007a92:	787b      	ldrb	r3, [r7, #1]
 8007a94:	2b2a      	cmp	r3, #42	; 0x2a
 8007a96:	d133      	bne.n	8007b00 <_svfiprintf_r+0x178>
 8007a98:	9b03      	ldr	r3, [sp, #12]
 8007a9a:	3702      	adds	r7, #2
 8007a9c:	1d1a      	adds	r2, r3, #4
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	9203      	str	r2, [sp, #12]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	bfb8      	it	lt
 8007aa6:	f04f 33ff 	movlt.w	r3, #4294967295
 8007aaa:	9305      	str	r3, [sp, #20]
 8007aac:	4d2e      	ldr	r5, [pc, #184]	; (8007b68 <_svfiprintf_r+0x1e0>)
 8007aae:	2203      	movs	r2, #3
 8007ab0:	7839      	ldrb	r1, [r7, #0]
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	f000 f9e8 	bl	8007e88 <memchr>
 8007ab8:	b138      	cbz	r0, 8007aca <_svfiprintf_r+0x142>
 8007aba:	2340      	movs	r3, #64	; 0x40
 8007abc:	1b40      	subs	r0, r0, r5
 8007abe:	fa03 f000 	lsl.w	r0, r3, r0
 8007ac2:	9b04      	ldr	r3, [sp, #16]
 8007ac4:	3701      	adds	r7, #1
 8007ac6:	4303      	orrs	r3, r0
 8007ac8:	9304      	str	r3, [sp, #16]
 8007aca:	7839      	ldrb	r1, [r7, #0]
 8007acc:	2206      	movs	r2, #6
 8007ace:	4827      	ldr	r0, [pc, #156]	; (8007b6c <_svfiprintf_r+0x1e4>)
 8007ad0:	1c7e      	adds	r6, r7, #1
 8007ad2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ad6:	f000 f9d7 	bl	8007e88 <memchr>
 8007ada:	2800      	cmp	r0, #0
 8007adc:	d038      	beq.n	8007b50 <_svfiprintf_r+0x1c8>
 8007ade:	4b24      	ldr	r3, [pc, #144]	; (8007b70 <_svfiprintf_r+0x1e8>)
 8007ae0:	bb13      	cbnz	r3, 8007b28 <_svfiprintf_r+0x1a0>
 8007ae2:	9b03      	ldr	r3, [sp, #12]
 8007ae4:	3307      	adds	r3, #7
 8007ae6:	f023 0307 	bic.w	r3, r3, #7
 8007aea:	3308      	adds	r3, #8
 8007aec:	9303      	str	r3, [sp, #12]
 8007aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af0:	444b      	add	r3, r9
 8007af2:	9309      	str	r3, [sp, #36]	; 0x24
 8007af4:	e76d      	b.n	80079d2 <_svfiprintf_r+0x4a>
 8007af6:	fb05 3202 	mla	r2, r5, r2, r3
 8007afa:	2001      	movs	r0, #1
 8007afc:	460f      	mov	r7, r1
 8007afe:	e7a6      	b.n	8007a4e <_svfiprintf_r+0xc6>
 8007b00:	2300      	movs	r3, #0
 8007b02:	250a      	movs	r5, #10
 8007b04:	4619      	mov	r1, r3
 8007b06:	3701      	adds	r7, #1
 8007b08:	9305      	str	r3, [sp, #20]
 8007b0a:	4638      	mov	r0, r7
 8007b0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b10:	3a30      	subs	r2, #48	; 0x30
 8007b12:	2a09      	cmp	r2, #9
 8007b14:	d903      	bls.n	8007b1e <_svfiprintf_r+0x196>
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d0c8      	beq.n	8007aac <_svfiprintf_r+0x124>
 8007b1a:	9105      	str	r1, [sp, #20]
 8007b1c:	e7c6      	b.n	8007aac <_svfiprintf_r+0x124>
 8007b1e:	fb05 2101 	mla	r1, r5, r1, r2
 8007b22:	2301      	movs	r3, #1
 8007b24:	4607      	mov	r7, r0
 8007b26:	e7f0      	b.n	8007b0a <_svfiprintf_r+0x182>
 8007b28:	ab03      	add	r3, sp, #12
 8007b2a:	9300      	str	r3, [sp, #0]
 8007b2c:	4622      	mov	r2, r4
 8007b2e:	4b11      	ldr	r3, [pc, #68]	; (8007b74 <_svfiprintf_r+0x1ec>)
 8007b30:	a904      	add	r1, sp, #16
 8007b32:	4640      	mov	r0, r8
 8007b34:	f3af 8000 	nop.w
 8007b38:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007b3c:	4681      	mov	r9, r0
 8007b3e:	d1d6      	bne.n	8007aee <_svfiprintf_r+0x166>
 8007b40:	89a3      	ldrh	r3, [r4, #12]
 8007b42:	065b      	lsls	r3, r3, #25
 8007b44:	f53f af35 	bmi.w	80079b2 <_svfiprintf_r+0x2a>
 8007b48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b4a:	b01d      	add	sp, #116	; 0x74
 8007b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b50:	ab03      	add	r3, sp, #12
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	4622      	mov	r2, r4
 8007b56:	4b07      	ldr	r3, [pc, #28]	; (8007b74 <_svfiprintf_r+0x1ec>)
 8007b58:	a904      	add	r1, sp, #16
 8007b5a:	4640      	mov	r0, r8
 8007b5c:	f000 f882 	bl	8007c64 <_printf_i>
 8007b60:	e7ea      	b.n	8007b38 <_svfiprintf_r+0x1b0>
 8007b62:	bf00      	nop
 8007b64:	080083fb 	.word	0x080083fb
 8007b68:	08008401 	.word	0x08008401
 8007b6c:	08008405 	.word	0x08008405
 8007b70:	00000000 	.word	0x00000000
 8007b74:	080078d3 	.word	0x080078d3

08007b78 <_printf_common>:
 8007b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b7c:	4691      	mov	r9, r2
 8007b7e:	461f      	mov	r7, r3
 8007b80:	688a      	ldr	r2, [r1, #8]
 8007b82:	690b      	ldr	r3, [r1, #16]
 8007b84:	4606      	mov	r6, r0
 8007b86:	4293      	cmp	r3, r2
 8007b88:	bfb8      	it	lt
 8007b8a:	4613      	movlt	r3, r2
 8007b8c:	f8c9 3000 	str.w	r3, [r9]
 8007b90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b94:	460c      	mov	r4, r1
 8007b96:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b9a:	b112      	cbz	r2, 8007ba2 <_printf_common+0x2a>
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	f8c9 3000 	str.w	r3, [r9]
 8007ba2:	6823      	ldr	r3, [r4, #0]
 8007ba4:	0699      	lsls	r1, r3, #26
 8007ba6:	bf42      	ittt	mi
 8007ba8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007bac:	3302      	addmi	r3, #2
 8007bae:	f8c9 3000 	strmi.w	r3, [r9]
 8007bb2:	6825      	ldr	r5, [r4, #0]
 8007bb4:	f015 0506 	ands.w	r5, r5, #6
 8007bb8:	d107      	bne.n	8007bca <_printf_common+0x52>
 8007bba:	f104 0a19 	add.w	sl, r4, #25
 8007bbe:	68e3      	ldr	r3, [r4, #12]
 8007bc0:	f8d9 2000 	ldr.w	r2, [r9]
 8007bc4:	1a9b      	subs	r3, r3, r2
 8007bc6:	42ab      	cmp	r3, r5
 8007bc8:	dc29      	bgt.n	8007c1e <_printf_common+0xa6>
 8007bca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007bce:	6822      	ldr	r2, [r4, #0]
 8007bd0:	3300      	adds	r3, #0
 8007bd2:	bf18      	it	ne
 8007bd4:	2301      	movne	r3, #1
 8007bd6:	0692      	lsls	r2, r2, #26
 8007bd8:	d42e      	bmi.n	8007c38 <_printf_common+0xc0>
 8007bda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bde:	4639      	mov	r1, r7
 8007be0:	4630      	mov	r0, r6
 8007be2:	47c0      	blx	r8
 8007be4:	3001      	adds	r0, #1
 8007be6:	d021      	beq.n	8007c2c <_printf_common+0xb4>
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	68e5      	ldr	r5, [r4, #12]
 8007bec:	f003 0306 	and.w	r3, r3, #6
 8007bf0:	2b04      	cmp	r3, #4
 8007bf2:	bf18      	it	ne
 8007bf4:	2500      	movne	r5, #0
 8007bf6:	f8d9 2000 	ldr.w	r2, [r9]
 8007bfa:	f04f 0900 	mov.w	r9, #0
 8007bfe:	bf08      	it	eq
 8007c00:	1aad      	subeq	r5, r5, r2
 8007c02:	68a3      	ldr	r3, [r4, #8]
 8007c04:	6922      	ldr	r2, [r4, #16]
 8007c06:	bf08      	it	eq
 8007c08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	bfc4      	itt	gt
 8007c10:	1a9b      	subgt	r3, r3, r2
 8007c12:	18ed      	addgt	r5, r5, r3
 8007c14:	341a      	adds	r4, #26
 8007c16:	454d      	cmp	r5, r9
 8007c18:	d11a      	bne.n	8007c50 <_printf_common+0xd8>
 8007c1a:	2000      	movs	r0, #0
 8007c1c:	e008      	b.n	8007c30 <_printf_common+0xb8>
 8007c1e:	2301      	movs	r3, #1
 8007c20:	4652      	mov	r2, sl
 8007c22:	4639      	mov	r1, r7
 8007c24:	4630      	mov	r0, r6
 8007c26:	47c0      	blx	r8
 8007c28:	3001      	adds	r0, #1
 8007c2a:	d103      	bne.n	8007c34 <_printf_common+0xbc>
 8007c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c34:	3501      	adds	r5, #1
 8007c36:	e7c2      	b.n	8007bbe <_printf_common+0x46>
 8007c38:	2030      	movs	r0, #48	; 0x30
 8007c3a:	18e1      	adds	r1, r4, r3
 8007c3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c40:	1c5a      	adds	r2, r3, #1
 8007c42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c46:	4422      	add	r2, r4
 8007c48:	3302      	adds	r3, #2
 8007c4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c4e:	e7c4      	b.n	8007bda <_printf_common+0x62>
 8007c50:	2301      	movs	r3, #1
 8007c52:	4622      	mov	r2, r4
 8007c54:	4639      	mov	r1, r7
 8007c56:	4630      	mov	r0, r6
 8007c58:	47c0      	blx	r8
 8007c5a:	3001      	adds	r0, #1
 8007c5c:	d0e6      	beq.n	8007c2c <_printf_common+0xb4>
 8007c5e:	f109 0901 	add.w	r9, r9, #1
 8007c62:	e7d8      	b.n	8007c16 <_printf_common+0x9e>

08007c64 <_printf_i>:
 8007c64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c68:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007c6c:	460c      	mov	r4, r1
 8007c6e:	7e09      	ldrb	r1, [r1, #24]
 8007c70:	b085      	sub	sp, #20
 8007c72:	296e      	cmp	r1, #110	; 0x6e
 8007c74:	4617      	mov	r7, r2
 8007c76:	4606      	mov	r6, r0
 8007c78:	4698      	mov	r8, r3
 8007c7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c7c:	f000 80b3 	beq.w	8007de6 <_printf_i+0x182>
 8007c80:	d822      	bhi.n	8007cc8 <_printf_i+0x64>
 8007c82:	2963      	cmp	r1, #99	; 0x63
 8007c84:	d036      	beq.n	8007cf4 <_printf_i+0x90>
 8007c86:	d80a      	bhi.n	8007c9e <_printf_i+0x3a>
 8007c88:	2900      	cmp	r1, #0
 8007c8a:	f000 80b9 	beq.w	8007e00 <_printf_i+0x19c>
 8007c8e:	2958      	cmp	r1, #88	; 0x58
 8007c90:	f000 8083 	beq.w	8007d9a <_printf_i+0x136>
 8007c94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c98:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007c9c:	e032      	b.n	8007d04 <_printf_i+0xa0>
 8007c9e:	2964      	cmp	r1, #100	; 0x64
 8007ca0:	d001      	beq.n	8007ca6 <_printf_i+0x42>
 8007ca2:	2969      	cmp	r1, #105	; 0x69
 8007ca4:	d1f6      	bne.n	8007c94 <_printf_i+0x30>
 8007ca6:	6820      	ldr	r0, [r4, #0]
 8007ca8:	6813      	ldr	r3, [r2, #0]
 8007caa:	0605      	lsls	r5, r0, #24
 8007cac:	f103 0104 	add.w	r1, r3, #4
 8007cb0:	d52a      	bpl.n	8007d08 <_printf_i+0xa4>
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6011      	str	r1, [r2, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	da03      	bge.n	8007cc2 <_printf_i+0x5e>
 8007cba:	222d      	movs	r2, #45	; 0x2d
 8007cbc:	425b      	negs	r3, r3
 8007cbe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007cc2:	486f      	ldr	r0, [pc, #444]	; (8007e80 <_printf_i+0x21c>)
 8007cc4:	220a      	movs	r2, #10
 8007cc6:	e039      	b.n	8007d3c <_printf_i+0xd8>
 8007cc8:	2973      	cmp	r1, #115	; 0x73
 8007cca:	f000 809d 	beq.w	8007e08 <_printf_i+0x1a4>
 8007cce:	d808      	bhi.n	8007ce2 <_printf_i+0x7e>
 8007cd0:	296f      	cmp	r1, #111	; 0x6f
 8007cd2:	d020      	beq.n	8007d16 <_printf_i+0xb2>
 8007cd4:	2970      	cmp	r1, #112	; 0x70
 8007cd6:	d1dd      	bne.n	8007c94 <_printf_i+0x30>
 8007cd8:	6823      	ldr	r3, [r4, #0]
 8007cda:	f043 0320 	orr.w	r3, r3, #32
 8007cde:	6023      	str	r3, [r4, #0]
 8007ce0:	e003      	b.n	8007cea <_printf_i+0x86>
 8007ce2:	2975      	cmp	r1, #117	; 0x75
 8007ce4:	d017      	beq.n	8007d16 <_printf_i+0xb2>
 8007ce6:	2978      	cmp	r1, #120	; 0x78
 8007ce8:	d1d4      	bne.n	8007c94 <_printf_i+0x30>
 8007cea:	2378      	movs	r3, #120	; 0x78
 8007cec:	4865      	ldr	r0, [pc, #404]	; (8007e84 <_printf_i+0x220>)
 8007cee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007cf2:	e055      	b.n	8007da0 <_printf_i+0x13c>
 8007cf4:	6813      	ldr	r3, [r2, #0]
 8007cf6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cfa:	1d19      	adds	r1, r3, #4
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	6011      	str	r1, [r2, #0]
 8007d00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d04:	2301      	movs	r3, #1
 8007d06:	e08c      	b.n	8007e22 <_printf_i+0x1be>
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d0e:	6011      	str	r1, [r2, #0]
 8007d10:	bf18      	it	ne
 8007d12:	b21b      	sxthne	r3, r3
 8007d14:	e7cf      	b.n	8007cb6 <_printf_i+0x52>
 8007d16:	6813      	ldr	r3, [r2, #0]
 8007d18:	6825      	ldr	r5, [r4, #0]
 8007d1a:	1d18      	adds	r0, r3, #4
 8007d1c:	6010      	str	r0, [r2, #0]
 8007d1e:	0628      	lsls	r0, r5, #24
 8007d20:	d501      	bpl.n	8007d26 <_printf_i+0xc2>
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	e002      	b.n	8007d2c <_printf_i+0xc8>
 8007d26:	0668      	lsls	r0, r5, #25
 8007d28:	d5fb      	bpl.n	8007d22 <_printf_i+0xbe>
 8007d2a:	881b      	ldrh	r3, [r3, #0]
 8007d2c:	296f      	cmp	r1, #111	; 0x6f
 8007d2e:	bf14      	ite	ne
 8007d30:	220a      	movne	r2, #10
 8007d32:	2208      	moveq	r2, #8
 8007d34:	4852      	ldr	r0, [pc, #328]	; (8007e80 <_printf_i+0x21c>)
 8007d36:	2100      	movs	r1, #0
 8007d38:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d3c:	6865      	ldr	r5, [r4, #4]
 8007d3e:	2d00      	cmp	r5, #0
 8007d40:	60a5      	str	r5, [r4, #8]
 8007d42:	f2c0 8095 	blt.w	8007e70 <_printf_i+0x20c>
 8007d46:	6821      	ldr	r1, [r4, #0]
 8007d48:	f021 0104 	bic.w	r1, r1, #4
 8007d4c:	6021      	str	r1, [r4, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d13d      	bne.n	8007dce <_printf_i+0x16a>
 8007d52:	2d00      	cmp	r5, #0
 8007d54:	f040 808e 	bne.w	8007e74 <_printf_i+0x210>
 8007d58:	4665      	mov	r5, ip
 8007d5a:	2a08      	cmp	r2, #8
 8007d5c:	d10b      	bne.n	8007d76 <_printf_i+0x112>
 8007d5e:	6823      	ldr	r3, [r4, #0]
 8007d60:	07db      	lsls	r3, r3, #31
 8007d62:	d508      	bpl.n	8007d76 <_printf_i+0x112>
 8007d64:	6923      	ldr	r3, [r4, #16]
 8007d66:	6862      	ldr	r2, [r4, #4]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	bfde      	ittt	le
 8007d6c:	2330      	movle	r3, #48	; 0x30
 8007d6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d72:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d76:	ebac 0305 	sub.w	r3, ip, r5
 8007d7a:	6123      	str	r3, [r4, #16]
 8007d7c:	f8cd 8000 	str.w	r8, [sp]
 8007d80:	463b      	mov	r3, r7
 8007d82:	aa03      	add	r2, sp, #12
 8007d84:	4621      	mov	r1, r4
 8007d86:	4630      	mov	r0, r6
 8007d88:	f7ff fef6 	bl	8007b78 <_printf_common>
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	d14d      	bne.n	8007e2c <_printf_i+0x1c8>
 8007d90:	f04f 30ff 	mov.w	r0, #4294967295
 8007d94:	b005      	add	sp, #20
 8007d96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d9a:	4839      	ldr	r0, [pc, #228]	; (8007e80 <_printf_i+0x21c>)
 8007d9c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007da0:	6813      	ldr	r3, [r2, #0]
 8007da2:	6821      	ldr	r1, [r4, #0]
 8007da4:	1d1d      	adds	r5, r3, #4
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6015      	str	r5, [r2, #0]
 8007daa:	060a      	lsls	r2, r1, #24
 8007dac:	d50b      	bpl.n	8007dc6 <_printf_i+0x162>
 8007dae:	07ca      	lsls	r2, r1, #31
 8007db0:	bf44      	itt	mi
 8007db2:	f041 0120 	orrmi.w	r1, r1, #32
 8007db6:	6021      	strmi	r1, [r4, #0]
 8007db8:	b91b      	cbnz	r3, 8007dc2 <_printf_i+0x15e>
 8007dba:	6822      	ldr	r2, [r4, #0]
 8007dbc:	f022 0220 	bic.w	r2, r2, #32
 8007dc0:	6022      	str	r2, [r4, #0]
 8007dc2:	2210      	movs	r2, #16
 8007dc4:	e7b7      	b.n	8007d36 <_printf_i+0xd2>
 8007dc6:	064d      	lsls	r5, r1, #25
 8007dc8:	bf48      	it	mi
 8007dca:	b29b      	uxthmi	r3, r3
 8007dcc:	e7ef      	b.n	8007dae <_printf_i+0x14a>
 8007dce:	4665      	mov	r5, ip
 8007dd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007dd4:	fb02 3311 	mls	r3, r2, r1, r3
 8007dd8:	5cc3      	ldrb	r3, [r0, r3]
 8007dda:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007dde:	460b      	mov	r3, r1
 8007de0:	2900      	cmp	r1, #0
 8007de2:	d1f5      	bne.n	8007dd0 <_printf_i+0x16c>
 8007de4:	e7b9      	b.n	8007d5a <_printf_i+0xf6>
 8007de6:	6813      	ldr	r3, [r2, #0]
 8007de8:	6825      	ldr	r5, [r4, #0]
 8007dea:	1d18      	adds	r0, r3, #4
 8007dec:	6961      	ldr	r1, [r4, #20]
 8007dee:	6010      	str	r0, [r2, #0]
 8007df0:	0628      	lsls	r0, r5, #24
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	d501      	bpl.n	8007dfa <_printf_i+0x196>
 8007df6:	6019      	str	r1, [r3, #0]
 8007df8:	e002      	b.n	8007e00 <_printf_i+0x19c>
 8007dfa:	066a      	lsls	r2, r5, #25
 8007dfc:	d5fb      	bpl.n	8007df6 <_printf_i+0x192>
 8007dfe:	8019      	strh	r1, [r3, #0]
 8007e00:	2300      	movs	r3, #0
 8007e02:	4665      	mov	r5, ip
 8007e04:	6123      	str	r3, [r4, #16]
 8007e06:	e7b9      	b.n	8007d7c <_printf_i+0x118>
 8007e08:	6813      	ldr	r3, [r2, #0]
 8007e0a:	1d19      	adds	r1, r3, #4
 8007e0c:	6011      	str	r1, [r2, #0]
 8007e0e:	681d      	ldr	r5, [r3, #0]
 8007e10:	6862      	ldr	r2, [r4, #4]
 8007e12:	2100      	movs	r1, #0
 8007e14:	4628      	mov	r0, r5
 8007e16:	f000 f837 	bl	8007e88 <memchr>
 8007e1a:	b108      	cbz	r0, 8007e20 <_printf_i+0x1bc>
 8007e1c:	1b40      	subs	r0, r0, r5
 8007e1e:	6060      	str	r0, [r4, #4]
 8007e20:	6863      	ldr	r3, [r4, #4]
 8007e22:	6123      	str	r3, [r4, #16]
 8007e24:	2300      	movs	r3, #0
 8007e26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e2a:	e7a7      	b.n	8007d7c <_printf_i+0x118>
 8007e2c:	6923      	ldr	r3, [r4, #16]
 8007e2e:	462a      	mov	r2, r5
 8007e30:	4639      	mov	r1, r7
 8007e32:	4630      	mov	r0, r6
 8007e34:	47c0      	blx	r8
 8007e36:	3001      	adds	r0, #1
 8007e38:	d0aa      	beq.n	8007d90 <_printf_i+0x12c>
 8007e3a:	6823      	ldr	r3, [r4, #0]
 8007e3c:	079b      	lsls	r3, r3, #30
 8007e3e:	d413      	bmi.n	8007e68 <_printf_i+0x204>
 8007e40:	68e0      	ldr	r0, [r4, #12]
 8007e42:	9b03      	ldr	r3, [sp, #12]
 8007e44:	4298      	cmp	r0, r3
 8007e46:	bfb8      	it	lt
 8007e48:	4618      	movlt	r0, r3
 8007e4a:	e7a3      	b.n	8007d94 <_printf_i+0x130>
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	464a      	mov	r2, r9
 8007e50:	4639      	mov	r1, r7
 8007e52:	4630      	mov	r0, r6
 8007e54:	47c0      	blx	r8
 8007e56:	3001      	adds	r0, #1
 8007e58:	d09a      	beq.n	8007d90 <_printf_i+0x12c>
 8007e5a:	3501      	adds	r5, #1
 8007e5c:	68e3      	ldr	r3, [r4, #12]
 8007e5e:	9a03      	ldr	r2, [sp, #12]
 8007e60:	1a9b      	subs	r3, r3, r2
 8007e62:	42ab      	cmp	r3, r5
 8007e64:	dcf2      	bgt.n	8007e4c <_printf_i+0x1e8>
 8007e66:	e7eb      	b.n	8007e40 <_printf_i+0x1dc>
 8007e68:	2500      	movs	r5, #0
 8007e6a:	f104 0919 	add.w	r9, r4, #25
 8007e6e:	e7f5      	b.n	8007e5c <_printf_i+0x1f8>
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1ac      	bne.n	8007dce <_printf_i+0x16a>
 8007e74:	7803      	ldrb	r3, [r0, #0]
 8007e76:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e7e:	e76c      	b.n	8007d5a <_printf_i+0xf6>
 8007e80:	0800840c 	.word	0x0800840c
 8007e84:	0800841d 	.word	0x0800841d

08007e88 <memchr>:
 8007e88:	b510      	push	{r4, lr}
 8007e8a:	b2c9      	uxtb	r1, r1
 8007e8c:	4402      	add	r2, r0
 8007e8e:	4290      	cmp	r0, r2
 8007e90:	4603      	mov	r3, r0
 8007e92:	d101      	bne.n	8007e98 <memchr+0x10>
 8007e94:	2300      	movs	r3, #0
 8007e96:	e003      	b.n	8007ea0 <memchr+0x18>
 8007e98:	781c      	ldrb	r4, [r3, #0]
 8007e9a:	3001      	adds	r0, #1
 8007e9c:	428c      	cmp	r4, r1
 8007e9e:	d1f6      	bne.n	8007e8e <memchr+0x6>
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	bd10      	pop	{r4, pc}

08007ea4 <_realloc_r>:
 8007ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea6:	4607      	mov	r7, r0
 8007ea8:	4614      	mov	r4, r2
 8007eaa:	460e      	mov	r6, r1
 8007eac:	b921      	cbnz	r1, 8007eb8 <_realloc_r+0x14>
 8007eae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007eb2:	4611      	mov	r1, r2
 8007eb4:	f7ff bc3a 	b.w	800772c <_malloc_r>
 8007eb8:	b922      	cbnz	r2, 8007ec4 <_realloc_r+0x20>
 8007eba:	f7ff fbeb 	bl	8007694 <_free_r>
 8007ebe:	4625      	mov	r5, r4
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ec4:	f000 f814 	bl	8007ef0 <_malloc_usable_size_r>
 8007ec8:	42a0      	cmp	r0, r4
 8007eca:	d20f      	bcs.n	8007eec <_realloc_r+0x48>
 8007ecc:	4621      	mov	r1, r4
 8007ece:	4638      	mov	r0, r7
 8007ed0:	f7ff fc2c 	bl	800772c <_malloc_r>
 8007ed4:	4605      	mov	r5, r0
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	d0f2      	beq.n	8007ec0 <_realloc_r+0x1c>
 8007eda:	4631      	mov	r1, r6
 8007edc:	4622      	mov	r2, r4
 8007ede:	f7ff fbad 	bl	800763c <memcpy>
 8007ee2:	4631      	mov	r1, r6
 8007ee4:	4638      	mov	r0, r7
 8007ee6:	f7ff fbd5 	bl	8007694 <_free_r>
 8007eea:	e7e9      	b.n	8007ec0 <_realloc_r+0x1c>
 8007eec:	4635      	mov	r5, r6
 8007eee:	e7e7      	b.n	8007ec0 <_realloc_r+0x1c>

08007ef0 <_malloc_usable_size_r>:
 8007ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ef4:	1f18      	subs	r0, r3, #4
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	bfbc      	itt	lt
 8007efa:	580b      	ldrlt	r3, [r1, r0]
 8007efc:	18c0      	addlt	r0, r0, r3
 8007efe:	4770      	bx	lr

08007f00 <_init>:
 8007f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f02:	bf00      	nop
 8007f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f06:	bc08      	pop	{r3}
 8007f08:	469e      	mov	lr, r3
 8007f0a:	4770      	bx	lr

08007f0c <_fini>:
 8007f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0e:	bf00      	nop
 8007f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f12:	bc08      	pop	{r3}
 8007f14:	469e      	mov	lr, r3
 8007f16:	4770      	bx	lr
