
note-stm32f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ad8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  08008be8  08008be8  00018be8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009100  08009100  00020238  2**0
                  CONTENTS
  4 .ARM          00000000  08009100  08009100  00020238  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009100  08009100  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009100  08009100  00019100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009104  08009104  00019104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08009108  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  20000238  08009340  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  08009340  00020560  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fd4  00000000  00000000  00020261  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000294e  00000000  00000000  00031235  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f80  00000000  00000000  00033b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f38  00000000  00000000  00034b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015346  00000000  00000000  00035a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bdb7  00000000  00000000  0004ad86  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007032c  00000000  00000000  00056b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c6e69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045b0  00000000  00000000  000c6ee4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000238 	.word	0x20000238
 800012c:	00000000 	.word	0x00000000
 8000130:	08008bd0 	.word	0x08008bd0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000023c 	.word	0x2000023c
 800014c:	08008bd0 	.word	0x08008bd0

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_d2iz>:
 8000a20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a28:	d215      	bcs.n	8000a56 <__aeabi_d2iz+0x36>
 8000a2a:	d511      	bpl.n	8000a50 <__aeabi_d2iz+0x30>
 8000a2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a34:	d912      	bls.n	8000a5c <__aeabi_d2iz+0x3c>
 8000a36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a46:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4a:	bf18      	it	ne
 8000a4c:	4240      	negne	r0, r0
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d105      	bne.n	8000a68 <__aeabi_d2iz+0x48>
 8000a5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	bf08      	it	eq
 8000a62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_d2uiz>:
 8000a70:	004a      	lsls	r2, r1, #1
 8000a72:	d211      	bcs.n	8000a98 <__aeabi_d2uiz+0x28>
 8000a74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a78:	d211      	bcs.n	8000a9e <__aeabi_d2uiz+0x2e>
 8000a7a:	d50d      	bpl.n	8000a98 <__aeabi_d2uiz+0x28>
 8000a7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a84:	d40e      	bmi.n	8000aa4 <__aeabi_d2uiz+0x34>
 8000a86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_d2uiz+0x3a>
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0000 	mov.w	r0, #0
 8000aae:	4770      	bx	lr

08000ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_Init+0x28>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_Init+0x28>)
 8000aba:	f043 0310 	orr.w	r3, r3, #16
 8000abe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f000 f967 	bl	8000d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f000 f808 	bl	8000adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000acc:	f004 f992 	bl	8004df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40022000 	.word	0x40022000

08000adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_InitTick+0x54>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_InitTick+0x58>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 f98d 	bl	8000e1a <HAL_SYSTICK_Config>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e00e      	b.n	8000b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	d80a      	bhi.n	8000b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b10:	2200      	movs	r2, #0
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	f000 f947 	bl	8000daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b1c:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <HAL_InitTick+0x5c>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	e000      	b.n	8000b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000008 	.word	0x20000008
 8000b34:	20000004 	.word	0x20000004
 8000b38:	20000000 	.word	0x20000000

08000b3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_IncTick+0x1c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_IncTick+0x20>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a03      	ldr	r2, [pc, #12]	; (8000b5c <HAL_IncTick+0x20>)
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	20000004 	.word	0x20000004
 8000b5c:	200004c4 	.word	0x200004c4

08000b60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b02      	ldr	r3, [pc, #8]	; (8000b70 <HAL_GetTick+0x10>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	200004c4 	.word	0x200004c4

08000b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b7c:	f7ff fff0 	bl	8000b60 <HAL_GetTick>
 8000b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b8c:	d005      	beq.n	8000b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <HAL_Delay+0x40>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4413      	add	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b9a:	bf00      	nop
 8000b9c:	f7ff ffe0 	bl	8000b60 <HAL_GetTick>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d8f7      	bhi.n	8000b9c <HAL_Delay+0x28>
  {
  }
}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000004 	.word	0x20000004

08000bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bea:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	60d3      	str	r3, [r2, #12]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <__NVIC_GetPriorityGrouping+0x18>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	f003 0307 	and.w	r3, r3, #7
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db0b      	blt.n	8000c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f003 021f 	and.w	r2, r3, #31
 8000c34:	4906      	ldr	r1, [pc, #24]	; (8000c50 <__NVIC_EnableIRQ+0x34>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	095b      	lsrs	r3, r3, #5
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	e000e100 	.word	0xe000e100

08000c54 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	db10      	blt.n	8000c88 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	f003 021f 	and.w	r2, r3, #31
 8000c6c:	4909      	ldr	r1, [pc, #36]	; (8000c94 <__NVIC_DisableIRQ+0x40>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	095b      	lsrs	r3, r3, #5
 8000c74:	2001      	movs	r0, #1
 8000c76:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7a:	3320      	adds	r3, #32
 8000c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c84:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000e100 	.word	0xe000e100

08000c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	6039      	str	r1, [r7, #0]
 8000ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	db0a      	blt.n	8000cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	490c      	ldr	r1, [pc, #48]	; (8000ce4 <__NVIC_SetPriority+0x4c>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	0112      	lsls	r2, r2, #4
 8000cb8:	b2d2      	uxtb	r2, r2
 8000cba:	440b      	add	r3, r1
 8000cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc0:	e00a      	b.n	8000cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4908      	ldr	r1, [pc, #32]	; (8000ce8 <__NVIC_SetPriority+0x50>)
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	f003 030f 	and.w	r3, r3, #15
 8000cce:	3b04      	subs	r3, #4
 8000cd0:	0112      	lsls	r2, r2, #4
 8000cd2:	b2d2      	uxtb	r2, r2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	761a      	strb	r2, [r3, #24]
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000e100 	.word	0xe000e100
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b089      	sub	sp, #36	; 0x24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f1c3 0307 	rsb	r3, r3, #7
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	bf28      	it	cs
 8000d0a:	2304      	movcs	r3, #4
 8000d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3304      	adds	r3, #4
 8000d12:	2b06      	cmp	r3, #6
 8000d14:	d902      	bls.n	8000d1c <NVIC_EncodePriority+0x30>
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3b03      	subs	r3, #3
 8000d1a:	e000      	b.n	8000d1e <NVIC_EncodePriority+0x32>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	f04f 32ff 	mov.w	r2, #4294967295
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43da      	mvns	r2, r3
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	401a      	ands	r2, r3
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d34:	f04f 31ff 	mov.w	r1, #4294967295
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3e:	43d9      	mvns	r1, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	4313      	orrs	r3, r2
         );
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3724      	adds	r7, #36	; 0x24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d60:	d301      	bcc.n	8000d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00f      	b.n	8000d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d66:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <SysTick_Config+0x40>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6e:	210f      	movs	r1, #15
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f7ff ff90 	bl	8000c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <SysTick_Config+0x40>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7e:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <SysTick_Config+0x40>)
 8000d80:	2207      	movs	r2, #7
 8000d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	e000e010 	.word	0xe000e010

08000d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff ff0b 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b086      	sub	sp, #24
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	4603      	mov	r3, r0
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
 8000db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dbc:	f7ff ff20 	bl	8000c00 <__NVIC_GetPriorityGrouping>
 8000dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	68b9      	ldr	r1, [r7, #8]
 8000dc6:	6978      	ldr	r0, [r7, #20]
 8000dc8:	f7ff ff90 	bl	8000cec <NVIC_EncodePriority>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff5f 	bl	8000c98 <__NVIC_SetPriority>
}
 8000dda:	bf00      	nop
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff13 	bl	8000c1c <__NVIC_EnableIRQ>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	4603      	mov	r3, r0
 8000e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff21 	bl	8000c54 <__NVIC_DisableIRQ>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ff94 	bl	8000d50 <SysTick_Config>
 8000e28:	4603      	mov	r3, r0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d005      	beq.n	8000e56 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2204      	movs	r2, #4
 8000e4e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	73fb      	strb	r3, [r7, #15]
 8000e54:	e051      	b.n	8000efa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f022 020e 	bic.w	r2, r2, #14
 8000e64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 0201 	bic.w	r2, r2, #1
 8000e74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a22      	ldr	r2, [pc, #136]	; (8000f04 <HAL_DMA_Abort_IT+0xd0>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d029      	beq.n	8000ed4 <HAL_DMA_Abort_IT+0xa0>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a20      	ldr	r2, [pc, #128]	; (8000f08 <HAL_DMA_Abort_IT+0xd4>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d022      	beq.n	8000ed0 <HAL_DMA_Abort_IT+0x9c>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a1f      	ldr	r2, [pc, #124]	; (8000f0c <HAL_DMA_Abort_IT+0xd8>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d01a      	beq.n	8000eca <HAL_DMA_Abort_IT+0x96>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a1d      	ldr	r2, [pc, #116]	; (8000f10 <HAL_DMA_Abort_IT+0xdc>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d012      	beq.n	8000ec4 <HAL_DMA_Abort_IT+0x90>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a1c      	ldr	r2, [pc, #112]	; (8000f14 <HAL_DMA_Abort_IT+0xe0>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d00a      	beq.n	8000ebe <HAL_DMA_Abort_IT+0x8a>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a1a      	ldr	r2, [pc, #104]	; (8000f18 <HAL_DMA_Abort_IT+0xe4>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d102      	bne.n	8000eb8 <HAL_DMA_Abort_IT+0x84>
 8000eb2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000eb6:	e00e      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xa2>
 8000eb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ebc:	e00b      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xa2>
 8000ebe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec2:	e008      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xa2>
 8000ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec8:	e005      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xa2>
 8000eca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ece:	e002      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xa2>
 8000ed0:	2310      	movs	r3, #16
 8000ed2:	e000      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xa2>
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	4a11      	ldr	r2, [pc, #68]	; (8000f1c <HAL_DMA_Abort_IT+0xe8>)
 8000ed8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2201      	movs	r2, #1
 8000ede:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	4798      	blx	r3
    } 
  }
  return status;
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40020008 	.word	0x40020008
 8000f08:	4002001c 	.word	0x4002001c
 8000f0c:	40020030 	.word	0x40020030
 8000f10:	40020044 	.word	0x40020044
 8000f14:	40020058 	.word	0x40020058
 8000f18:	4002006c 	.word	0x4002006c
 8000f1c:	40020000 	.word	0x40020000

08000f20 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b08b      	sub	sp, #44	; 0x2c
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4a:	e127      	b.n	800119c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	69fa      	ldr	r2, [r7, #28]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	f040 8116 	bne.w	8001196 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b12      	cmp	r3, #18
 8000f70:	d034      	beq.n	8000fdc <HAL_GPIO_Init+0xa4>
 8000f72:	2b12      	cmp	r3, #18
 8000f74:	d80d      	bhi.n	8000f92 <HAL_GPIO_Init+0x5a>
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d02b      	beq.n	8000fd2 <HAL_GPIO_Init+0x9a>
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d804      	bhi.n	8000f88 <HAL_GPIO_Init+0x50>
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d031      	beq.n	8000fe6 <HAL_GPIO_Init+0xae>
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d01c      	beq.n	8000fc0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f86:	e048      	b.n	800101a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d043      	beq.n	8001014 <HAL_GPIO_Init+0xdc>
 8000f8c:	2b11      	cmp	r3, #17
 8000f8e:	d01b      	beq.n	8000fc8 <HAL_GPIO_Init+0x90>
          break;
 8000f90:	e043      	b.n	800101a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f92:	4a89      	ldr	r2, [pc, #548]	; (80011b8 <HAL_GPIO_Init+0x280>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d026      	beq.n	8000fe6 <HAL_GPIO_Init+0xae>
 8000f98:	4a87      	ldr	r2, [pc, #540]	; (80011b8 <HAL_GPIO_Init+0x280>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d806      	bhi.n	8000fac <HAL_GPIO_Init+0x74>
 8000f9e:	4a87      	ldr	r2, [pc, #540]	; (80011bc <HAL_GPIO_Init+0x284>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d020      	beq.n	8000fe6 <HAL_GPIO_Init+0xae>
 8000fa4:	4a86      	ldr	r2, [pc, #536]	; (80011c0 <HAL_GPIO_Init+0x288>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d01d      	beq.n	8000fe6 <HAL_GPIO_Init+0xae>
          break;
 8000faa:	e036      	b.n	800101a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fac:	4a85      	ldr	r2, [pc, #532]	; (80011c4 <HAL_GPIO_Init+0x28c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d019      	beq.n	8000fe6 <HAL_GPIO_Init+0xae>
 8000fb2:	4a85      	ldr	r2, [pc, #532]	; (80011c8 <HAL_GPIO_Init+0x290>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d016      	beq.n	8000fe6 <HAL_GPIO_Init+0xae>
 8000fb8:	4a84      	ldr	r2, [pc, #528]	; (80011cc <HAL_GPIO_Init+0x294>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d013      	beq.n	8000fe6 <HAL_GPIO_Init+0xae>
          break;
 8000fbe:	e02c      	b.n	800101a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	623b      	str	r3, [r7, #32]
          break;
 8000fc6:	e028      	b.n	800101a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	623b      	str	r3, [r7, #32]
          break;
 8000fd0:	e023      	b.n	800101a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	3308      	adds	r3, #8
 8000fd8:	623b      	str	r3, [r7, #32]
          break;
 8000fda:	e01e      	b.n	800101a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	330c      	adds	r3, #12
 8000fe2:	623b      	str	r3, [r7, #32]
          break;
 8000fe4:	e019      	b.n	800101a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d102      	bne.n	8000ff4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fee:	2304      	movs	r3, #4
 8000ff0:	623b      	str	r3, [r7, #32]
          break;
 8000ff2:	e012      	b.n	800101a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d105      	bne.n	8001008 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	611a      	str	r2, [r3, #16]
          break;
 8001006:	e008      	b.n	800101a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001008:	2308      	movs	r3, #8
 800100a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69fa      	ldr	r2, [r7, #28]
 8001010:	615a      	str	r2, [r3, #20]
          break;
 8001012:	e002      	b.n	800101a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001014:	2300      	movs	r3, #0
 8001016:	623b      	str	r3, [r7, #32]
          break;
 8001018:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	2bff      	cmp	r3, #255	; 0xff
 800101e:	d801      	bhi.n	8001024 <HAL_GPIO_Init+0xec>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	e001      	b.n	8001028 <HAL_GPIO_Init+0xf0>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3304      	adds	r3, #4
 8001028:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	2bff      	cmp	r3, #255	; 0xff
 800102e:	d802      	bhi.n	8001036 <HAL_GPIO_Init+0xfe>
 8001030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	e002      	b.n	800103c <HAL_GPIO_Init+0x104>
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	3b08      	subs	r3, #8
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	210f      	movs	r1, #15
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	401a      	ands	r2, r3
 800104e:	6a39      	ldr	r1, [r7, #32]
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	fa01 f303 	lsl.w	r3, r1, r3
 8001056:	431a      	orrs	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 8096 	beq.w	8001196 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800106a:	4b59      	ldr	r3, [pc, #356]	; (80011d0 <HAL_GPIO_Init+0x298>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	4a58      	ldr	r2, [pc, #352]	; (80011d0 <HAL_GPIO_Init+0x298>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6193      	str	r3, [r2, #24]
 8001076:	4b56      	ldr	r3, [pc, #344]	; (80011d0 <HAL_GPIO_Init+0x298>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001082:	4a54      	ldr	r2, [pc, #336]	; (80011d4 <HAL_GPIO_Init+0x29c>)
 8001084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3302      	adds	r3, #2
 800108a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	220f      	movs	r2, #15
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	4013      	ands	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a4b      	ldr	r2, [pc, #300]	; (80011d8 <HAL_GPIO_Init+0x2a0>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d013      	beq.n	80010d6 <HAL_GPIO_Init+0x19e>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a4a      	ldr	r2, [pc, #296]	; (80011dc <HAL_GPIO_Init+0x2a4>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d00d      	beq.n	80010d2 <HAL_GPIO_Init+0x19a>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a49      	ldr	r2, [pc, #292]	; (80011e0 <HAL_GPIO_Init+0x2a8>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d007      	beq.n	80010ce <HAL_GPIO_Init+0x196>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a48      	ldr	r2, [pc, #288]	; (80011e4 <HAL_GPIO_Init+0x2ac>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d101      	bne.n	80010ca <HAL_GPIO_Init+0x192>
 80010c6:	2303      	movs	r3, #3
 80010c8:	e006      	b.n	80010d8 <HAL_GPIO_Init+0x1a0>
 80010ca:	2304      	movs	r3, #4
 80010cc:	e004      	b.n	80010d8 <HAL_GPIO_Init+0x1a0>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e002      	b.n	80010d8 <HAL_GPIO_Init+0x1a0>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <HAL_GPIO_Init+0x1a0>
 80010d6:	2300      	movs	r3, #0
 80010d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010da:	f002 0203 	and.w	r2, r2, #3
 80010de:	0092      	lsls	r2, r2, #2
 80010e0:	4093      	lsls	r3, r2
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010e8:	493a      	ldr	r1, [pc, #232]	; (80011d4 <HAL_GPIO_Init+0x29c>)
 80010ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ec:	089b      	lsrs	r3, r3, #2
 80010ee:	3302      	adds	r3, #2
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d006      	beq.n	8001110 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001102:	4b39      	ldr	r3, [pc, #228]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	4938      	ldr	r1, [pc, #224]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	600b      	str	r3, [r1, #0]
 800110e:	e006      	b.n	800111e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001110:	4b35      	ldr	r3, [pc, #212]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	43db      	mvns	r3, r3
 8001118:	4933      	ldr	r1, [pc, #204]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 800111a:	4013      	ands	r3, r2
 800111c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d006      	beq.n	8001138 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800112a:	4b2f      	ldr	r3, [pc, #188]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	492e      	ldr	r1, [pc, #184]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	604b      	str	r3, [r1, #4]
 8001136:	e006      	b.n	8001146 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001138:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	43db      	mvns	r3, r3
 8001140:	4929      	ldr	r1, [pc, #164]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 8001142:	4013      	ands	r3, r2
 8001144:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d006      	beq.n	8001160 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001152:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	4924      	ldr	r1, [pc, #144]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	608b      	str	r3, [r1, #8]
 800115e:	e006      	b.n	800116e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001160:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	43db      	mvns	r3, r3
 8001168:	491f      	ldr	r1, [pc, #124]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 800116a:	4013      	ands	r3, r2
 800116c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d006      	beq.n	8001188 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800117a:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 800117c:	68da      	ldr	r2, [r3, #12]
 800117e:	491a      	ldr	r1, [pc, #104]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	60cb      	str	r3, [r1, #12]
 8001186:	e006      	b.n	8001196 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 800118a:	68da      	ldr	r2, [r3, #12]
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	43db      	mvns	r3, r3
 8001190:	4915      	ldr	r1, [pc, #84]	; (80011e8 <HAL_GPIO_Init+0x2b0>)
 8001192:	4013      	ands	r3, r2
 8001194:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	3301      	adds	r3, #1
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	fa22 f303 	lsr.w	r3, r2, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f47f aed0 	bne.w	8000f4c <HAL_GPIO_Init+0x14>
  }
}
 80011ac:	bf00      	nop
 80011ae:	372c      	adds	r7, #44	; 0x2c
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	10210000 	.word	0x10210000
 80011bc:	10110000 	.word	0x10110000
 80011c0:	10120000 	.word	0x10120000
 80011c4:	10310000 	.word	0x10310000
 80011c8:	10320000 	.word	0x10320000
 80011cc:	10220000 	.word	0x10220000
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40010000 	.word	0x40010000
 80011d8:	40010800 	.word	0x40010800
 80011dc:	40010c00 	.word	0x40010c00
 80011e0:	40011000 	.word	0x40011000
 80011e4:	40011400 	.word	0x40011400
 80011e8:	40010400 	.word	0x40010400

080011ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80011fa:	e09a      	b.n	8001332 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80011fc:	2201      	movs	r2, #1
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 808d 	beq.w	800132c <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8001212:	4a4e      	ldr	r2, [pc, #312]	; (800134c <HAL_GPIO_DeInit+0x160>)
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	089b      	lsrs	r3, r3, #2
 8001218:	3302      	adds	r3, #2
 800121a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	220f      	movs	r2, #15
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	4013      	ands	r3, r2
 8001232:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a46      	ldr	r2, [pc, #280]	; (8001350 <HAL_GPIO_DeInit+0x164>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d013      	beq.n	8001264 <HAL_GPIO_DeInit+0x78>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a45      	ldr	r2, [pc, #276]	; (8001354 <HAL_GPIO_DeInit+0x168>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d00d      	beq.n	8001260 <HAL_GPIO_DeInit+0x74>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a44      	ldr	r2, [pc, #272]	; (8001358 <HAL_GPIO_DeInit+0x16c>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d007      	beq.n	800125c <HAL_GPIO_DeInit+0x70>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a43      	ldr	r2, [pc, #268]	; (800135c <HAL_GPIO_DeInit+0x170>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d101      	bne.n	8001258 <HAL_GPIO_DeInit+0x6c>
 8001254:	2303      	movs	r3, #3
 8001256:	e006      	b.n	8001266 <HAL_GPIO_DeInit+0x7a>
 8001258:	2304      	movs	r3, #4
 800125a:	e004      	b.n	8001266 <HAL_GPIO_DeInit+0x7a>
 800125c:	2302      	movs	r3, #2
 800125e:	e002      	b.n	8001266 <HAL_GPIO_DeInit+0x7a>
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <HAL_GPIO_DeInit+0x7a>
 8001264:	2300      	movs	r3, #0
 8001266:	69fa      	ldr	r2, [r7, #28]
 8001268:	f002 0203 	and.w	r2, r2, #3
 800126c:	0092      	lsls	r2, r2, #2
 800126e:	4093      	lsls	r3, r2
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	429a      	cmp	r2, r3
 8001274:	d132      	bne.n	80012dc <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	220f      	movs	r2, #15
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001286:	4a31      	ldr	r2, [pc, #196]	; (800134c <HAL_GPIO_DeInit+0x160>)
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	089b      	lsrs	r3, r3, #2
 800128c:	3302      	adds	r3, #2
 800128e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	43da      	mvns	r2, r3
 8001296:	482d      	ldr	r0, [pc, #180]	; (800134c <HAL_GPIO_DeInit+0x160>)
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	400a      	ands	r2, r1
 800129e:	3302      	adds	r3, #2
 80012a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80012a4:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <HAL_GPIO_DeInit+0x174>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	492c      	ldr	r1, [pc, #176]	; (8001360 <HAL_GPIO_DeInit+0x174>)
 80012ae:	4013      	ands	r3, r2
 80012b0:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80012b2:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <HAL_GPIO_DeInit+0x174>)
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	4929      	ldr	r1, [pc, #164]	; (8001360 <HAL_GPIO_DeInit+0x174>)
 80012bc:	4013      	ands	r3, r2
 80012be:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80012c0:	4b27      	ldr	r3, [pc, #156]	; (8001360 <HAL_GPIO_DeInit+0x174>)
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	4925      	ldr	r1, [pc, #148]	; (8001360 <HAL_GPIO_DeInit+0x174>)
 80012ca:	4013      	ands	r3, r2
 80012cc:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80012ce:	4b24      	ldr	r3, [pc, #144]	; (8001360 <HAL_GPIO_DeInit+0x174>)
 80012d0:	68da      	ldr	r2, [r3, #12]
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	4922      	ldr	r1, [pc, #136]	; (8001360 <HAL_GPIO_DeInit+0x174>)
 80012d8:	4013      	ands	r3, r2
 80012da:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	2bff      	cmp	r3, #255	; 0xff
 80012e0:	d801      	bhi.n	80012e6 <HAL_GPIO_DeInit+0xfa>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	e001      	b.n	80012ea <HAL_GPIO_DeInit+0xfe>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3304      	adds	r3, #4
 80012ea:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	2bff      	cmp	r3, #255	; 0xff
 80012f0:	d802      	bhi.n	80012f8 <HAL_GPIO_DeInit+0x10c>
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	e002      	b.n	80012fe <HAL_GPIO_DeInit+0x112>
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	3b08      	subs	r3, #8
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	210f      	movs	r1, #15
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	fa01 f303 	lsl.w	r3, r1, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	401a      	ands	r2, r3
 8001310:	2104      	movs	r1, #4
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	fa01 f303 	lsl.w	r3, r1, r3
 8001318:	431a      	orrs	r2, r3
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68da      	ldr	r2, [r3, #12]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	43db      	mvns	r3, r3
 8001326:	401a      	ands	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	3301      	adds	r3, #1
 8001330:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	fa22 f303 	lsr.w	r3, r2, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	f47f af5e 	bne.w	80011fc <HAL_GPIO_DeInit+0x10>
  }
}
 8001340:	bf00      	nop
 8001342:	3724      	adds	r7, #36	; 0x24
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40010000 	.word	0x40010000
 8001350:	40010800 	.word	0x40010800
 8001354:	40010c00 	.word	0x40010c00
 8001358:	40011000 	.word	0x40011000
 800135c:	40011400 	.word	0x40011400
 8001360:	40010400 	.word	0x40010400

08001364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
 8001370:	4613      	mov	r3, r2
 8001372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001374:	787b      	ldrb	r3, [r7, #1]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800137a:	887a      	ldrh	r2, [r7, #2]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001380:	e003      	b.n	800138a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	041a      	lsls	r2, r3, #16
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	611a      	str	r2, [r3, #16]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800139e:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013a0:	695a      	ldr	r2, [r3, #20]
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	4013      	ands	r3, r2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d006      	beq.n	80013b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013aa:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013b0:	88fb      	ldrh	r3, [r7, #6]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 fc2e 	bl	8004c14 <HAL_GPIO_EXTI_Callback>
  }
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40010400 	.word	0x40010400

080013c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e10f      	b.n	80015f6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d106      	bne.n	80013f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f003 fd34 	bl	8004e58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2224      	movs	r2, #36	; 0x24
 80013f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0201 	bic.w	r2, r2, #1
 8001406:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001408:	f002 ff12 	bl	8004230 <HAL_RCC_GetPCLK1Freq>
 800140c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	4a7b      	ldr	r2, [pc, #492]	; (8001600 <HAL_I2C_Init+0x23c>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d807      	bhi.n	8001428 <HAL_I2C_Init+0x64>
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4a7a      	ldr	r2, [pc, #488]	; (8001604 <HAL_I2C_Init+0x240>)
 800141c:	4293      	cmp	r3, r2
 800141e:	bf94      	ite	ls
 8001420:	2301      	movls	r3, #1
 8001422:	2300      	movhi	r3, #0
 8001424:	b2db      	uxtb	r3, r3
 8001426:	e006      	b.n	8001436 <HAL_I2C_Init+0x72>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4a77      	ldr	r2, [pc, #476]	; (8001608 <HAL_I2C_Init+0x244>)
 800142c:	4293      	cmp	r3, r2
 800142e:	bf94      	ite	ls
 8001430:	2301      	movls	r3, #1
 8001432:	2300      	movhi	r3, #0
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e0db      	b.n	80015f6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4a72      	ldr	r2, [pc, #456]	; (800160c <HAL_I2C_Init+0x248>)
 8001442:	fba2 2303 	umull	r2, r3, r2, r3
 8001446:	0c9b      	lsrs	r3, r3, #18
 8001448:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68ba      	ldr	r2, [r7, #8]
 800145a:	430a      	orrs	r2, r1
 800145c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	4a64      	ldr	r2, [pc, #400]	; (8001600 <HAL_I2C_Init+0x23c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d802      	bhi.n	8001478 <HAL_I2C_Init+0xb4>
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	3301      	adds	r3, #1
 8001476:	e009      	b.n	800148c <HAL_I2C_Init+0xc8>
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800147e:	fb02 f303 	mul.w	r3, r2, r3
 8001482:	4a63      	ldr	r2, [pc, #396]	; (8001610 <HAL_I2C_Init+0x24c>)
 8001484:	fba2 2303 	umull	r2, r3, r2, r3
 8001488:	099b      	lsrs	r3, r3, #6
 800148a:	3301      	adds	r3, #1
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	6812      	ldr	r2, [r2, #0]
 8001490:	430b      	orrs	r3, r1
 8001492:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800149e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	4956      	ldr	r1, [pc, #344]	; (8001600 <HAL_I2C_Init+0x23c>)
 80014a8:	428b      	cmp	r3, r1
 80014aa:	d80d      	bhi.n	80014c8 <HAL_I2C_Init+0x104>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	1e59      	subs	r1, r3, #1
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80014ba:	3301      	adds	r3, #1
 80014bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c0:	2b04      	cmp	r3, #4
 80014c2:	bf38      	it	cc
 80014c4:	2304      	movcc	r3, #4
 80014c6:	e04f      	b.n	8001568 <HAL_I2C_Init+0x1a4>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d111      	bne.n	80014f4 <HAL_I2C_Init+0x130>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	1e58      	subs	r0, r3, #1
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6859      	ldr	r1, [r3, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	440b      	add	r3, r1
 80014de:	fbb0 f3f3 	udiv	r3, r0, r3
 80014e2:	3301      	adds	r3, #1
 80014e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	bf0c      	ite	eq
 80014ec:	2301      	moveq	r3, #1
 80014ee:	2300      	movne	r3, #0
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	e012      	b.n	800151a <HAL_I2C_Init+0x156>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	1e58      	subs	r0, r3, #1
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6859      	ldr	r1, [r3, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	0099      	lsls	r1, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	fbb0 f3f3 	udiv	r3, r0, r3
 800150a:	3301      	adds	r3, #1
 800150c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001510:	2b00      	cmp	r3, #0
 8001512:	bf0c      	ite	eq
 8001514:	2301      	moveq	r3, #1
 8001516:	2300      	movne	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_I2C_Init+0x15e>
 800151e:	2301      	movs	r3, #1
 8001520:	e022      	b.n	8001568 <HAL_I2C_Init+0x1a4>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10e      	bne.n	8001548 <HAL_I2C_Init+0x184>
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	1e58      	subs	r0, r3, #1
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6859      	ldr	r1, [r3, #4]
 8001532:	460b      	mov	r3, r1
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	440b      	add	r3, r1
 8001538:	fbb0 f3f3 	udiv	r3, r0, r3
 800153c:	3301      	adds	r3, #1
 800153e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001546:	e00f      	b.n	8001568 <HAL_I2C_Init+0x1a4>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	1e58      	subs	r0, r3, #1
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6859      	ldr	r1, [r3, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	0099      	lsls	r1, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	fbb0 f3f3 	udiv	r3, r0, r3
 800155e:	3301      	adds	r3, #1
 8001560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001564:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	6809      	ldr	r1, [r1, #0]
 800156c:	4313      	orrs	r3, r2
 800156e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69da      	ldr	r2, [r3, #28]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001596:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6911      	ldr	r1, [r2, #16]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	68d2      	ldr	r2, [r2, #12]
 80015a2:	4311      	orrs	r1, r2
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6812      	ldr	r2, [r2, #0]
 80015a8:	430b      	orrs	r3, r1
 80015aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	695a      	ldr	r2, [r3, #20]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0201 	orr.w	r2, r2, #1
 80015d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2220      	movs	r2, #32
 80015e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	000186a0 	.word	0x000186a0
 8001604:	001e847f 	.word	0x001e847f
 8001608:	003d08ff 	.word	0x003d08ff
 800160c:	431bde83 	.word	0x431bde83
 8001610:	10624dd3 	.word	0x10624dd3

08001614 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e021      	b.n	800166a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2224      	movs	r2, #36	; 0x24
 800162a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 0201 	bic.w	r2, r2, #1
 800163c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f003 fc6a 	bl	8004f18 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af02      	add	r7, sp, #8
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	607a      	str	r2, [r7, #4]
 800167e:	461a      	mov	r2, r3
 8001680:	460b      	mov	r3, r1
 8001682:	817b      	strh	r3, [r7, #10]
 8001684:	4613      	mov	r3, r2
 8001686:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001688:	f7ff fa6a 	bl	8000b60 <HAL_GetTick>
 800168c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b20      	cmp	r3, #32
 8001698:	f040 80e0 	bne.w	800185c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2319      	movs	r3, #25
 80016a2:	2201      	movs	r2, #1
 80016a4:	4970      	ldr	r1, [pc, #448]	; (8001868 <HAL_I2C_Master_Transmit+0x1f4>)
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f001 fff5 	bl	8003696 <I2C_WaitOnFlagUntilTimeout>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80016b2:	2302      	movs	r3, #2
 80016b4:	e0d3      	b.n	800185e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d101      	bne.n	80016c4 <HAL_I2C_Master_Transmit+0x50>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e0cc      	b.n	800185e <HAL_I2C_Master_Transmit+0x1ea>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d007      	beq.n	80016ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f042 0201 	orr.w	r2, r2, #1
 80016e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2221      	movs	r2, #33	; 0x21
 80016fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2210      	movs	r2, #16
 8001706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2200      	movs	r2, #0
 800170e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	893a      	ldrh	r2, [r7, #8]
 800171a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001720:	b29a      	uxth	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	4a50      	ldr	r2, [pc, #320]	; (800186c <HAL_I2C_Master_Transmit+0x1f8>)
 800172a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800172c:	8979      	ldrh	r1, [r7, #10]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	6a3a      	ldr	r2, [r7, #32]
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f001 fe14 	bl	8003360 <I2C_MasterRequestWrite>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e08d      	b.n	800185e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001758:	e066      	b.n	8001828 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	6a39      	ldr	r1, [r7, #32]
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f002 f86f 	bl	8003842 <I2C_WaitOnTXEFlagUntilTimeout>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00d      	beq.n	8001786 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	2b04      	cmp	r3, #4
 8001770:	d107      	bne.n	8001782 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001780:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e06b      	b.n	800185e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	781a      	ldrb	r2, [r3, #0]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	3b01      	subs	r3, #1
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ae:	3b01      	subs	r3, #1
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d11b      	bne.n	80017fc <HAL_I2C_Master_Transmit+0x188>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d017      	beq.n	80017fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	781a      	ldrb	r2, [r3, #0]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	1c5a      	adds	r2, r3, #1
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	3b01      	subs	r3, #1
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f4:	3b01      	subs	r3, #1
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	6a39      	ldr	r1, [r7, #32]
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f002 f85f 	bl	80038c4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00d      	beq.n	8001828 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	2b04      	cmp	r3, #4
 8001812:	d107      	bne.n	8001824 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001822:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e01a      	b.n	800185e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800182c:	2b00      	cmp	r3, #0
 800182e:	d194      	bne.n	800175a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800183e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2220      	movs	r2, #32
 8001844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	e000      	b.n	800185e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800185c:	2302      	movs	r3, #2
  }
}
 800185e:	4618      	mov	r0, r3
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	00100002 	.word	0x00100002
 800186c:	ffff0000 	.word	0xffff0000

08001870 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08c      	sub	sp, #48	; 0x30
 8001874:	af02      	add	r7, sp, #8
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	607a      	str	r2, [r7, #4]
 800187a:	461a      	mov	r2, r3
 800187c:	460b      	mov	r3, r1
 800187e:	817b      	strh	r3, [r7, #10]
 8001880:	4613      	mov	r3, r2
 8001882:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001884:	f7ff f96c 	bl	8000b60 <HAL_GetTick>
 8001888:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b20      	cmp	r3, #32
 8001894:	f040 8213 	bne.w	8001cbe <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	2319      	movs	r3, #25
 800189e:	2201      	movs	r2, #1
 80018a0:	497e      	ldr	r1, [pc, #504]	; (8001a9c <HAL_I2C_Master_Receive+0x22c>)
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f001 fef7 	bl	8003696 <I2C_WaitOnFlagUntilTimeout>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80018ae:	2302      	movs	r3, #2
 80018b0:	e206      	b.n	8001cc0 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d101      	bne.n	80018c0 <HAL_I2C_Master_Receive+0x50>
 80018bc:	2302      	movs	r3, #2
 80018be:	e1ff      	b.n	8001cc0 <HAL_I2C_Master_Receive+0x450>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d007      	beq.n	80018e6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f042 0201 	orr.w	r2, r2, #1
 80018e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2222      	movs	r2, #34	; 0x22
 80018fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2210      	movs	r2, #16
 8001902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	893a      	ldrh	r2, [r7, #8]
 8001916:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800191c:	b29a      	uxth	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4a5e      	ldr	r2, [pc, #376]	; (8001aa0 <HAL_I2C_Master_Receive+0x230>)
 8001926:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001928:	8979      	ldrh	r1, [r7, #10]
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f001 fd8c 	bl	800344c <I2C_MasterRequestRead>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e1c0      	b.n	8001cc0 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001942:	2b00      	cmp	r3, #0
 8001944:	d113      	bne.n	800196e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001946:	2300      	movs	r3, #0
 8001948:	623b      	str	r3, [r7, #32]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	623b      	str	r3, [r7, #32]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	623b      	str	r3, [r7, #32]
 800195a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	e194      	b.n	8001c98 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001972:	2b01      	cmp	r3, #1
 8001974:	d11d      	bne.n	80019b2 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001984:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001986:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001988:	2300      	movs	r3, #0
 800198a:	61fb      	str	r3, [r7, #28]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	61fb      	str	r3, [r7, #28]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	61fb      	str	r3, [r7, #28]
 800199c:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80019ae:	b662      	cpsie	i
 80019b0:	e172      	b.n	8001c98 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d11d      	bne.n	80019f6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80019ca:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019cc:	2300      	movs	r3, #0
 80019ce:	61bb      	str	r3, [r7, #24]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	61bb      	str	r3, [r7, #24]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	61bb      	str	r3, [r7, #24]
 80019e0:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80019f2:	b662      	cpsie	i
 80019f4:	e150      	b.n	8001c98 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001a1c:	e13c      	b.n	8001c98 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	f200 80f5 	bhi.w	8001c12 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d123      	bne.n	8001a78 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f001 ff86 	bl	8003946 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e13d      	b.n	8001cc0 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	691a      	ldr	r2, [r3, #16]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a60:	3b01      	subs	r3, #1
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a76:	e10f      	b.n	8001c98 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d150      	bne.n	8001b22 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a86:	2200      	movs	r2, #0
 8001a88:	4906      	ldr	r1, [pc, #24]	; (8001aa4 <HAL_I2C_Master_Receive+0x234>)
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f001 fe03 	bl	8003696 <I2C_WaitOnFlagUntilTimeout>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d008      	beq.n	8001aa8 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e112      	b.n	8001cc0 <HAL_I2C_Master_Receive+0x450>
 8001a9a:	bf00      	nop
 8001a9c:	00100002 	.word	0x00100002
 8001aa0:	ffff0000 	.word	0xffff0000
 8001aa4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ab8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	691a      	ldr	r2, [r3, #16]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001aec:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	1c5a      	adds	r2, r3, #1
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b20:	e0ba      	b.n	8001c98 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b28:	2200      	movs	r2, #0
 8001b2a:	4967      	ldr	r1, [pc, #412]	; (8001cc8 <HAL_I2C_Master_Receive+0x458>)
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f001 fdb2 	bl	8003696 <I2C_WaitOnFlagUntilTimeout>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e0c1      	b.n	8001cc0 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b4c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	691a      	ldr	r2, [r3, #16]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b86:	2200      	movs	r2, #0
 8001b88:	494f      	ldr	r1, [pc, #316]	; (8001cc8 <HAL_I2C_Master_Receive+0x458>)
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f001 fd83 	bl	8003696 <I2C_WaitOnFlagUntilTimeout>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e092      	b.n	8001cc0 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ba8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001bdc:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	691a      	ldr	r2, [r3, #16]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c10:	e042      	b.n	8001c98 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f001 fe95 	bl	8003946 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e04c      	b.n	8001cc0 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c42:	3b01      	subs	r3, #1
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	3b01      	subs	r3, #1
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d118      	bne.n	8001c98 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c82:	3b01      	subs	r3, #1
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	3b01      	subs	r3, #1
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f47f aebe 	bne.w	8001a1e <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e000      	b.n	8001cc0 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8001cbe:	2302      	movs	r3, #2
  }
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3728      	adds	r7, #40	; 0x28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	00010004 	.word	0x00010004

08001ccc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	2b10      	cmp	r3, #16
 8001cfa:	d003      	beq.n	8001d04 <HAL_I2C_EV_IRQHandler+0x38>
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	2b40      	cmp	r3, #64	; 0x40
 8001d00:	f040 80b6 	bne.w	8001e70 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10d      	bne.n	8001d3a <HAL_I2C_EV_IRQHandler+0x6e>
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001d24:	d003      	beq.n	8001d2e <HAL_I2C_EV_IRQHandler+0x62>
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001d2c:	d101      	bne.n	8001d32 <HAL_I2C_EV_IRQHandler+0x66>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <HAL_I2C_EV_IRQHandler+0x68>
 8001d32:	2300      	movs	r3, #0
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	f000 8127 	beq.w	8001f88 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00c      	beq.n	8001d5e <HAL_I2C_EV_IRQHandler+0x92>
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	0a5b      	lsrs	r3, r3, #9
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d006      	beq.n	8001d5e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f001 fe7c 	bl	8003a4e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 fd03 	bl	8002762 <I2C_Master_SB>
 8001d5c:	e087      	b.n	8001e6e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	08db      	lsrs	r3, r3, #3
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d009      	beq.n	8001d7e <HAL_I2C_EV_IRQHandler+0xb2>
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	0a5b      	lsrs	r3, r3, #9
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 fd78 	bl	800286c <I2C_Master_ADD10>
 8001d7c:	e077      	b.n	8001e6e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	085b      	lsrs	r3, r3, #1
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d009      	beq.n	8001d9e <HAL_I2C_EV_IRQHandler+0xd2>
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	0a5b      	lsrs	r3, r3, #9
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 fd91 	bl	80028be <I2C_Master_ADDR>
 8001d9c:	e067      	b.n	8001e6e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	089b      	lsrs	r3, r3, #2
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d030      	beq.n	8001e0c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001db4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001db8:	f000 80e8 	beq.w	8001f8c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	09db      	lsrs	r3, r3, #7
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00f      	beq.n	8001de8 <HAL_I2C_EV_IRQHandler+0x11c>
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	0a9b      	lsrs	r3, r3, #10
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d009      	beq.n	8001de8 <HAL_I2C_EV_IRQHandler+0x11c>
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d103      	bne.n	8001de8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f9e4 	bl	80021ae <I2C_MasterTransmit_TXE>
 8001de6:	e042      	b.n	8001e6e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 80cb 	beq.w	8001f8c <HAL_I2C_EV_IRQHandler+0x2c0>
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	0a5b      	lsrs	r3, r3, #9
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 80c4 	beq.w	8001f8c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 faca 	bl	800239e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e0a:	e0bf      	b.n	8001f8c <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e1a:	f000 80b7 	beq.w	8001f8c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	099b      	lsrs	r3, r3, #6
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00f      	beq.n	8001e4a <HAL_I2C_EV_IRQHandler+0x17e>
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	0a9b      	lsrs	r3, r3, #10
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d009      	beq.n	8001e4a <HAL_I2C_EV_IRQHandler+0x17e>
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	089b      	lsrs	r3, r3, #2
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d103      	bne.n	8001e4a <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 fb21 	bl	800248a <I2C_MasterReceive_RXNE>
 8001e48:	e011      	b.n	8001e6e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 809a 	beq.w	8001f8c <HAL_I2C_EV_IRQHandler+0x2c0>
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	0a5b      	lsrs	r3, r3, #9
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 8093 	beq.w	8001f8c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 fb91 	bl	800258e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e6c:	e08e      	b.n	8001f8c <HAL_I2C_EV_IRQHandler+0x2c0>
 8001e6e:	e08d      	b.n	8001f8c <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d004      	beq.n	8001e82 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	61fb      	str	r3, [r7, #28]
 8001e80:	e007      	b.n	8001e92 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	085b      	lsrs	r3, r3, #1
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d012      	beq.n	8001ec4 <HAL_I2C_EV_IRQHandler+0x1f8>
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	0a5b      	lsrs	r3, r3, #9
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00c      	beq.n	8001ec4 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001eba:	69b9      	ldr	r1, [r7, #24]
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 ff55 	bl	8002d6c <I2C_Slave_ADDR>
 8001ec2:	e066      	b.n	8001f92 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	091b      	lsrs	r3, r3, #4
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d009      	beq.n	8001ee4 <HAL_I2C_EV_IRQHandler+0x218>
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	0a5b      	lsrs	r3, r3, #9
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 ff89 	bl	8002df4 <I2C_Slave_STOPF>
 8001ee2:	e056      	b.n	8001f92 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001ee4:	7bbb      	ldrb	r3, [r7, #14]
 8001ee6:	2b21      	cmp	r3, #33	; 0x21
 8001ee8:	d002      	beq.n	8001ef0 <HAL_I2C_EV_IRQHandler+0x224>
 8001eea:	7bbb      	ldrb	r3, [r7, #14]
 8001eec:	2b29      	cmp	r3, #41	; 0x29
 8001eee:	d125      	bne.n	8001f3c <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	09db      	lsrs	r3, r3, #7
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00f      	beq.n	8001f1c <HAL_I2C_EV_IRQHandler+0x250>
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	0a9b      	lsrs	r3, r3, #10
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d009      	beq.n	8001f1c <HAL_I2C_EV_IRQHandler+0x250>
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d103      	bne.n	8001f1c <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 fe6d 	bl	8002bf4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f1a:	e039      	b.n	8001f90 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	089b      	lsrs	r3, r3, #2
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d033      	beq.n	8001f90 <HAL_I2C_EV_IRQHandler+0x2c4>
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	0a5b      	lsrs	r3, r3, #9
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d02d      	beq.n	8001f90 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 fe9a 	bl	8002c6e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f3a:	e029      	b.n	8001f90 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	099b      	lsrs	r3, r3, #6
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00f      	beq.n	8001f68 <HAL_I2C_EV_IRQHandler+0x29c>
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	0a9b      	lsrs	r3, r3, #10
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d009      	beq.n	8001f68 <HAL_I2C_EV_IRQHandler+0x29c>
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	089b      	lsrs	r3, r3, #2
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d103      	bne.n	8001f68 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 fea4 	bl	8002cae <I2C_SlaveReceive_RXNE>
 8001f66:	e014      	b.n	8001f92 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	089b      	lsrs	r3, r3, #2
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00e      	beq.n	8001f92 <HAL_I2C_EV_IRQHandler+0x2c6>
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	0a5b      	lsrs	r3, r3, #9
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d008      	beq.n	8001f92 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 fed2 	bl	8002d2a <I2C_SlaveReceive_BTF>
 8001f86:	e004      	b.n	8001f92 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8001f88:	bf00      	nop
 8001f8a:	e002      	b.n	8001f92 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f8c:	bf00      	nop
 8001f8e:	e000      	b.n	8001f92 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f90:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001f92:	3720      	adds	r7, #32
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08a      	sub	sp, #40	; 0x28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d016      	beq.n	8001fee <HAL_I2C_ER_IRQHandler+0x56>
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	0a1b      	lsrs	r3, r3, #8
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d010      	beq.n	8001fee <HAL_I2C_ER_IRQHandler+0x56>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001fdc:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fec:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001fee:	6a3b      	ldr	r3, [r7, #32]
 8001ff0:	0a5b      	lsrs	r3, r3, #9
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00e      	beq.n	8002018 <HAL_I2C_ER_IRQHandler+0x80>
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	0a1b      	lsrs	r3, r3, #8
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d008      	beq.n	8002018 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	f043 0302 	orr.w	r3, r3, #2
 800200c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002016:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	0a9b      	lsrs	r3, r3, #10
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b00      	cmp	r3, #0
 8002022:	d041      	beq.n	80020a8 <HAL_I2C_ER_IRQHandler+0x110>
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	0a1b      	lsrs	r3, r3, #8
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b00      	cmp	r3, #0
 800202e:	d03b      	beq.n	80020a8 <HAL_I2C_ER_IRQHandler+0x110>
  {
    tmp1 = hi2c->Mode;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002036:	76fb      	strb	r3, [r7, #27]
    tmp2 = hi2c->XferCount;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203c:	b29b      	uxth	r3, r3
 800203e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002046:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800204e:	7efb      	ldrb	r3, [r7, #27]
 8002050:	2b20      	cmp	r3, #32
 8002052:	d112      	bne.n	800207a <HAL_I2C_ER_IRQHandler+0xe2>
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10f      	bne.n	800207a <HAL_I2C_ER_IRQHandler+0xe2>
 800205a:	7cfb      	ldrb	r3, [r7, #19]
 800205c:	2b21      	cmp	r3, #33	; 0x21
 800205e:	d008      	beq.n	8002072 <HAL_I2C_ER_IRQHandler+0xda>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002060:	7cfb      	ldrb	r3, [r7, #19]
 8002062:	2b29      	cmp	r3, #41	; 0x29
 8002064:	d005      	beq.n	8002072 <HAL_I2C_ER_IRQHandler+0xda>
 8002066:	7cfb      	ldrb	r3, [r7, #19]
 8002068:	2b28      	cmp	r3, #40	; 0x28
 800206a:	d106      	bne.n	800207a <HAL_I2C_ER_IRQHandler+0xe2>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b21      	cmp	r3, #33	; 0x21
 8002070:	d103      	bne.n	800207a <HAL_I2C_ER_IRQHandler+0xe2>
    {
      I2C_Slave_AF(hi2c);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 ffee 	bl	8003054 <I2C_Slave_AF>
 8002078:	e016      	b.n	80020a8 <HAL_I2C_ER_IRQHandler+0x110>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002082:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	f043 0304 	orr.w	r3, r3, #4
 800208a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b10      	cmp	r3, #16
 8002096:	d107      	bne.n	80020a8 <HAL_I2C_ER_IRQHandler+0x110>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a6:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	0adb      	lsrs	r3, r3, #11
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00e      	beq.n	80020d2 <HAL_I2C_ER_IRQHandler+0x13a>
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <HAL_I2C_ER_IRQHandler+0x13a>
  {
    error |= HAL_I2C_ERROR_OVR;
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	f043 0308 	orr.w	r3, r3, #8
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80020d0:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d008      	beq.n	80020ea <HAL_I2C_ER_IRQHandler+0x152>
  {
    hi2c->ErrorCode |= error;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f001 f825 	bl	8003134 <I2C_ITError>
  }
}
 80020ea:	bf00      	nop
 80020ec:	3728      	adds	r7, #40	; 0x28
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr

08002116 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr

0800213a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	460b      	mov	r3, r1
 8002144:	70fb      	strb	r3, [r7, #3]
 8002146:	4613      	mov	r3, r2
 8002148:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr

08002154 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr

08002166 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr

08002178 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr

0800218a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr

080021ae <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b084      	sub	sp, #16
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021bc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021c4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ca:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d150      	bne.n	8002276 <I2C_MasterTransmit_TXE+0xc8>
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	2b21      	cmp	r3, #33	; 0x21
 80021d8:	d14d      	bne.n	8002276 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d01d      	beq.n	800221c <I2C_MasterTransmit_TXE+0x6e>
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2b20      	cmp	r3, #32
 80021e4:	d01a      	beq.n	800221c <I2C_MasterTransmit_TXE+0x6e>
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021ec:	d016      	beq.n	800221c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021fc:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2211      	movs	r2, #17
 8002202:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2220      	movs	r2, #32
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ff6c 	bl	80020f2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800221a:	e0bc      	b.n	8002396 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800222a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2220      	movs	r2, #32
 8002246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b40      	cmp	r3, #64	; 0x40
 8002254:	d107      	bne.n	8002266 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7ff ff81 	bl	8002166 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002264:	e097      	b.n	8002396 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff ff3f 	bl	80020f2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002274:	e08f      	b.n	8002396 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	2b21      	cmp	r3, #33	; 0x21
 800227a:	d007      	beq.n	800228c <I2C_MasterTransmit_TXE+0xde>
 800227c:	7bbb      	ldrb	r3, [r7, #14]
 800227e:	2b40      	cmp	r3, #64	; 0x40
 8002280:	f040 8089 	bne.w	8002396 <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	2b22      	cmp	r3, #34	; 0x22
 8002288:	f040 8085 	bne.w	8002396 <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002290:	b29b      	uxth	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d108      	bne.n	80022a8 <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022a4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80022a6:	e076      	b.n	8002396 <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b40      	cmp	r3, #64	; 0x40
 80022b2:	d15d      	bne.n	8002370 <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d11d      	bne.n	80022f8 <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d10b      	bne.n	80022dc <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022d4:	1c9a      	adds	r2, r3, #2
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022da:	e05c      	b.n	8002396 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	121b      	asrs	r3, r3, #8
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022f6:	e04e      	b.n	8002396 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d10b      	bne.n	8002318 <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002304:	b2da      	uxtb	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002316:	e03e      	b.n	8002396 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800231c:	2b02      	cmp	r3, #2
 800231e:	d13a      	bne.n	8002396 <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b22      	cmp	r3, #34	; 0x22
 800232a:	d108      	bne.n	800233e <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800233a:	601a      	str	r2, [r3, #0]
}
 800233c:	e02b      	b.n	8002396 <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b21      	cmp	r3, #33	; 0x21
 8002348:	d125      	bne.n	8002396 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	781a      	ldrb	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002364:	b29b      	uxth	r3, r3
 8002366:	3b01      	subs	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800236e:	e012      	b.n	8002396 <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	781a      	ldrb	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238a:	b29b      	uxth	r3, r3
 800238c:	3b01      	subs	r3, #1
 800238e:	b29a      	uxth	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002394:	e7ff      	b.n	8002396 <I2C_MasterTransmit_TXE+0x1e8>
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023aa:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b21      	cmp	r3, #33	; 0x21
 80023b6:	d164      	bne.n	8002482 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023bc:	b29b      	uxth	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d012      	beq.n	80023e8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	781a      	ldrb	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 80023e6:	e04c      	b.n	8002482 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d01d      	beq.n	800242a <I2C_MasterTransmit_BTF+0x8c>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2b20      	cmp	r3, #32
 80023f2:	d01a      	beq.n	800242a <I2C_MasterTransmit_BTF+0x8c>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023fa:	d016      	beq.n	800242a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800240a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2211      	movs	r2, #17
 8002410:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2220      	movs	r2, #32
 800241e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff fe65 	bl	80020f2 <HAL_I2C_MasterTxCpltCallback>
}
 8002428:	e02b      	b.n	8002482 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002438:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002448:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2220      	movs	r2, #32
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b40      	cmp	r3, #64	; 0x40
 8002462:	d107      	bne.n	8002474 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff fe7a 	bl	8002166 <HAL_I2C_MemTxCpltCallback>
}
 8002472:	e006      	b.n	8002482 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff fe38 	bl	80020f2 <HAL_I2C_MasterTxCpltCallback>
}
 8002482:	bf00      	nop
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b084      	sub	sp, #16
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b22      	cmp	r3, #34	; 0x22
 800249c:	d173      	bne.n	8002586 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	d920      	bls.n	80024ee <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d154      	bne.n	8002586 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ea:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80024ec:	e04b      	b.n	8002586 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d047      	beq.n	8002586 <I2C_MasterReceive_RXNE+0xfc>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d002      	beq.n	8002502 <I2C_MasterReceive_RXNE+0x78>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d141      	bne.n	8002586 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002510:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002520:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253e:	b29b      	uxth	r3, r3
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2220      	movs	r2, #32
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b40      	cmp	r3, #64	; 0x40
 800255a:	d10a      	bne.n	8002572 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7ff fe04 	bl	8002178 <HAL_I2C_MemRxCpltCallback>
}
 8002570:	e009      	b.n	8002586 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2212      	movs	r2, #18
 800257e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff fdbf 	bl	8002104 <HAL_I2C_MasterRxCpltCallback>
}
 8002586:	bf00      	nop
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b084      	sub	sp, #16
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d11b      	bne.n	80025de <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80025dc:	e0bd      	b.n	800275a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d129      	bne.n	800263c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025f6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d00a      	beq.n	8002614 <I2C_MasterReceive_BTF+0x86>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2b02      	cmp	r3, #2
 8002602:	d007      	beq.n	8002614 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002612:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691a      	ldr	r2, [r3, #16]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002630:	b29b      	uxth	r3, r3
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800263a:	e08e      	b.n	800275a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002640:	b29b      	uxth	r3, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d176      	bne.n	8002734 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d002      	beq.n	8002652 <I2C_MasterReceive_BTF+0xc4>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2b10      	cmp	r3, #16
 8002650:	d108      	bne.n	8002664 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	e019      	b.n	8002698 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b04      	cmp	r3, #4
 8002668:	d002      	beq.n	8002670 <I2C_MasterReceive_BTF+0xe2>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2b02      	cmp	r3, #2
 800266e:	d108      	bne.n	8002682 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	e00a      	b.n	8002698 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2b10      	cmp	r3, #16
 8002686:	d007      	beq.n	8002698 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002696:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691a      	ldr	r2, [r3, #16]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	1c5a      	adds	r2, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026da:	b29b      	uxth	r3, r3
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80026f2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b40      	cmp	r3, #64	; 0x40
 8002706:	d10a      	bne.n	800271e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff fd2e 	bl	8002178 <HAL_I2C_MemRxCpltCallback>
}
 800271c:	e01d      	b.n	800275a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2212      	movs	r2, #18
 800272a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff fce9 	bl	8002104 <HAL_I2C_MasterRxCpltCallback>
}
 8002732:	e012      	b.n	800275a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691a      	ldr	r2, [r3, #16]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002750:	b29b      	uxth	r3, r3
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b40      	cmp	r3, #64	; 0x40
 8002774:	d117      	bne.n	80027a6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800277a:	2b00      	cmp	r3, #0
 800277c:	d109      	bne.n	8002792 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	b2db      	uxtb	r3, r3
 8002784:	461a      	mov	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800278e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002790:	e067      	b.n	8002862 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	b2db      	uxtb	r3, r3
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	b2da      	uxtb	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	611a      	str	r2, [r3, #16]
}
 80027a4:	e05d      	b.n	8002862 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027ae:	d133      	bne.n	8002818 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b21      	cmp	r3, #33	; 0x21
 80027ba:	d109      	bne.n	80027d0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027cc:	611a      	str	r2, [r3, #16]
 80027ce:	e008      	b.n	80027e2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	f043 0301 	orr.w	r3, r3, #1
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d103      	bne.n	80027f2 <I2C_Master_SB+0x90>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d037      	beq.n	8002862 <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d104      	bne.n	8002806 <I2C_Master_SB+0xa4>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002802:	2b00      	cmp	r3, #0
 8002804:	d02d      	beq.n	8002862 <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002814:	605a      	str	r2, [r3, #4]
}
 8002816:	e024      	b.n	8002862 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10e      	bne.n	800283e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002824:	b29b      	uxth	r3, r3
 8002826:	11db      	asrs	r3, r3, #7
 8002828:	b2db      	uxtb	r3, r3
 800282a:	f003 0306 	and.w	r3, r3, #6
 800282e:	b2db      	uxtb	r3, r3
 8002830:	f063 030f 	orn	r3, r3, #15
 8002834:	b2da      	uxtb	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	611a      	str	r2, [r3, #16]
}
 800283c:	e011      	b.n	8002862 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002842:	2b01      	cmp	r3, #1
 8002844:	d10d      	bne.n	8002862 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	b29b      	uxth	r3, r3
 800284c:	11db      	asrs	r3, r3, #7
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f003 0306 	and.w	r3, r3, #6
 8002854:	b2db      	uxtb	r3, r3
 8002856:	f063 030e 	orn	r3, r3, #14
 800285a:	b2da      	uxtb	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	611a      	str	r2, [r3, #16]
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002878:	b2da      	uxtb	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002884:	2b00      	cmp	r3, #0
 8002886:	d103      	bne.n	8002890 <I2C_Master_ADD10+0x24>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288c:	2b00      	cmp	r3, #0
 800288e:	d011      	beq.n	80028b4 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002896:	2b00      	cmp	r3, #0
 8002898:	d104      	bne.n	80028a4 <I2C_Master_ADD10+0x38>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d007      	beq.n	80028b4 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028b2:	605a      	str	r2, [r3, #4]
    }
  }
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80028be:	b480      	push	{r7}
 80028c0:	b091      	sub	sp, #68	; 0x44
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b22      	cmp	r3, #34	; 0x22
 80028e6:	f040 8174 	bne.w	8002bd2 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10f      	bne.n	8002912 <I2C_Master_ADDR+0x54>
 80028f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80028f6:	2b40      	cmp	r3, #64	; 0x40
 80028f8:	d10b      	bne.n	8002912 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028fa:	2300      	movs	r3, #0
 80028fc:	633b      	str	r3, [r7, #48]	; 0x30
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	633b      	str	r3, [r7, #48]	; 0x30
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	633b      	str	r3, [r7, #48]	; 0x30
 800290e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002910:	e16b      	b.n	8002bea <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002916:	2b00      	cmp	r3, #0
 8002918:	d11d      	bne.n	8002956 <I2C_Master_ADDR+0x98>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002922:	d118      	bne.n	8002956 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002924:	2300      	movs	r3, #0
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002938:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002948:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	651a      	str	r2, [r3, #80]	; 0x50
 8002954:	e149      	b.n	8002bea <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295a:	b29b      	uxth	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d113      	bne.n	8002988 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002960:	2300      	movs	r3, #0
 8002962:	62bb      	str	r3, [r7, #40]	; 0x28
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	62bb      	str	r3, [r7, #40]	; 0x28
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	62bb      	str	r3, [r7, #40]	; 0x28
 8002974:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	e120      	b.n	8002bca <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298c:	b29b      	uxth	r3, r3
 800298e:	2b01      	cmp	r3, #1
 8002990:	f040 808a 	bne.w	8002aa8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002996:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800299a:	d137      	bne.n	8002a0c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029aa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029ba:	d113      	bne.n	80029e4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ca:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029cc:	2300      	movs	r3, #0
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	e0f2      	b.n	8002bca <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e4:	2300      	movs	r3, #0
 80029e6:	623b      	str	r3, [r7, #32]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	623b      	str	r3, [r7, #32]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	623b      	str	r3, [r7, #32]
 80029f8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	e0de      	b.n	8002bca <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d02e      	beq.n	8002a70 <I2C_Master_ADDR+0x1b2>
 8002a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a14:	2b20      	cmp	r3, #32
 8002a16:	d02b      	beq.n	8002a70 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1a:	2b12      	cmp	r3, #18
 8002a1c:	d102      	bne.n	8002a24 <I2C_Master_ADDR+0x166>
 8002a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d125      	bne.n	8002a70 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d00e      	beq.n	8002a48 <I2C_Master_ADDR+0x18a>
 8002a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d00b      	beq.n	8002a48 <I2C_Master_ADDR+0x18a>
 8002a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a32:	2b10      	cmp	r3, #16
 8002a34:	d008      	beq.n	8002a48 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	e007      	b.n	8002a58 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a56:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61fb      	str	r3, [r7, #28]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	61fb      	str	r3, [r7, #28]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	61fb      	str	r3, [r7, #28]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	e0ac      	b.n	8002bca <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a7e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a80:	2300      	movs	r3, #0
 8002a82:	61bb      	str	r3, [r7, #24]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	61bb      	str	r3, [r7, #24]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	61bb      	str	r3, [r7, #24]
 8002a94:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	e090      	b.n	8002bca <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d158      	bne.n	8002b64 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d021      	beq.n	8002afc <I2C_Master_ADDR+0x23e>
 8002ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d01e      	beq.n	8002afc <I2C_Master_ADDR+0x23e>
 8002abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac0:	2b10      	cmp	r3, #16
 8002ac2:	d01b      	beq.n	8002afc <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ad2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	e012      	b.n	8002b22 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b0a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	613b      	str	r3, [r7, #16]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	613b      	str	r3, [r7, #16]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b30:	d14b      	bne.n	8002bca <I2C_Master_ADDR+0x30c>
 8002b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b38:	d00b      	beq.n	8002b52 <I2C_Master_ADDR+0x294>
 8002b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d008      	beq.n	8002b52 <I2C_Master_ADDR+0x294>
 8002b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d005      	beq.n	8002b52 <I2C_Master_ADDR+0x294>
 8002b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b48:	2b10      	cmp	r3, #16
 8002b4a:	d002      	beq.n	8002b52 <I2C_Master_ADDR+0x294>
 8002b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	d13b      	bne.n	8002bca <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	e032      	b.n	8002bca <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b72:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b82:	d117      	bne.n	8002bb4 <I2C_Master_ADDR+0x2f6>
 8002b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b86:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b8a:	d00b      	beq.n	8002ba4 <I2C_Master_ADDR+0x2e6>
 8002b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d008      	beq.n	8002ba4 <I2C_Master_ADDR+0x2e6>
 8002b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d005      	beq.n	8002ba4 <I2C_Master_ADDR+0x2e6>
 8002b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9a:	2b10      	cmp	r3, #16
 8002b9c:	d002      	beq.n	8002ba4 <I2C_Master_ADDR+0x2e6>
 8002b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba0:	2b20      	cmp	r3, #32
 8002ba2:	d107      	bne.n	8002bb4 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bb2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002bd0:	e00b      	b.n	8002bea <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	68bb      	ldr	r3, [r7, #8]
}
 8002be8:	e7ff      	b.n	8002bea <I2C_Master_ADDR+0x32c>
 8002bea:	bf00      	nop
 8002bec:	3744      	adds	r7, #68	; 0x44
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c02:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d02b      	beq.n	8002c66 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	781a      	ldrb	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d114      	bne.n	8002c66 <I2C_SlaveTransmit_TXE+0x72>
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
 8002c3e:	2b29      	cmp	r3, #41	; 0x29
 8002c40:	d111      	bne.n	8002c66 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c50:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2221      	movs	r2, #33	; 0x21
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2228      	movs	r2, #40	; 0x28
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff fa58 	bl	8002116 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002c66:	bf00      	nop
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d011      	beq.n	8002ca4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	781a      	ldrb	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	1c5a      	adds	r2, r3, #1
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr

08002cae <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cbc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d02c      	beq.n	8002d22 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691a      	ldr	r2, [r3, #16]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d114      	bne.n	8002d22 <I2C_SlaveReceive_RXNE+0x74>
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	2b2a      	cmp	r3, #42	; 0x2a
 8002cfc:	d111      	bne.n	8002d22 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d0c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2222      	movs	r2, #34	; 0x22
 8002d12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2228      	movs	r2, #40	; 0x28
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7ff fa03 	bl	8002128 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002d22:	bf00      	nop
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d012      	beq.n	8002d62 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691a      	ldr	r2, [r3, #16]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr

08002d6c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002d76:	2300      	movs	r3, #0
 8002d78:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d86:	2b28      	cmp	r3, #40	; 0x28
 8002d88:	d127      	bne.n	8002dda <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d98:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	089b      	lsrs	r3, r3, #2
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002da6:	2301      	movs	r3, #1
 8002da8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	09db      	lsrs	r3, r3, #7
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d103      	bne.n	8002dbe <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	81bb      	strh	r3, [r7, #12]
 8002dbc:	e002      	b.n	8002dc4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002dcc:	89ba      	ldrh	r2, [r7, #12]
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7ff f9b1 	bl	800213a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002dd8:	e008      	b.n	8002dec <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f06f 0202 	mvn.w	r2, #2
 8002de2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002dec:	bf00      	nop
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e02:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e12:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002e14:	2300      	movs	r3, #0
 8002e16:	60bb      	str	r3, [r7, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	60bb      	str	r3, [r7, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e40:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e50:	d172      	bne.n	8002f38 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
 8002e54:	2b22      	cmp	r3, #34	; 0x22
 8002e56:	d002      	beq.n	8002e5e <I2C_Slave_STOPF+0x6a>
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
 8002e5a:	2b2a      	cmp	r3, #42	; 0x2a
 8002e5c:	d135      	bne.n	8002eca <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d005      	beq.n	8002e82 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f043 0204 	orr.w	r2, r3, #4
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e90:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fe f842 	bl	8000f20 <HAL_DMA_GetState>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d049      	beq.n	8002f36 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea6:	4a69      	ldr	r2, [pc, #420]	; (800304c <I2C_Slave_STOPF+0x258>)
 8002ea8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd ffc0 	bl	8000e34 <HAL_DMA_Abort_IT>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d03d      	beq.n	8002f36 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ec8:	e035      	b.n	8002f36 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d005      	beq.n	8002eee <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f043 0204 	orr.w	r2, r3, #4
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002efc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe f80c 	bl	8000f20 <HAL_DMA_GetState>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d014      	beq.n	8002f38 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f12:	4a4e      	ldr	r2, [pc, #312]	; (800304c <I2C_Slave_STOPF+0x258>)
 8002f14:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fd ff8a 	bl	8000e34 <HAL_DMA_Abort_IT>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d008      	beq.n	8002f38 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f30:	4610      	mov	r0, r2
 8002f32:	4798      	blx	r3
 8002f34:	e000      	b.n	8002f38 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f36:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d03e      	beq.n	8002fc0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d112      	bne.n	8002f76 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691a      	ldr	r2, [r3, #16]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f80:	2b40      	cmp	r3, #64	; 0x40
 8002f82:	d112      	bne.n	8002faa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691a      	ldr	r2, [r3, #16]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	f043 0204 	orr.w	r2, r3, #4
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f8b3 	bl	8003134 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002fce:	e039      	b.n	8003044 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
 8002fd2:	2b2a      	cmp	r3, #42	; 0x2a
 8002fd4:	d109      	bne.n	8002fea <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2228      	movs	r2, #40	; 0x28
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7ff f89f 	bl	8002128 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b28      	cmp	r3, #40	; 0x28
 8002ff4:	d111      	bne.n	800301a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a15      	ldr	r2, [pc, #84]	; (8003050 <I2C_Slave_STOPF+0x25c>)
 8002ffa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2220      	movs	r2, #32
 8003006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff f89e 	bl	8002154 <HAL_I2C_ListenCpltCallback>
}
 8003018:	e014      	b.n	8003044 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	2b22      	cmp	r3, #34	; 0x22
 8003020:	d002      	beq.n	8003028 <I2C_Slave_STOPF+0x234>
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	2b22      	cmp	r3, #34	; 0x22
 8003026:	d10d      	bne.n	8003044 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2220      	movs	r2, #32
 8003032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7ff f872 	bl	8002128 <HAL_I2C_SlaveRxCpltCallback>
}
 8003044:	bf00      	nop
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	080035b9 	.word	0x080035b9
 8003050:	ffff0000 	.word	0xffff0000

08003054 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003062:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003068:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b08      	cmp	r3, #8
 800306e:	d002      	beq.n	8003076 <I2C_Slave_AF+0x22>
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b20      	cmp	r3, #32
 8003074:	d129      	bne.n	80030ca <I2C_Slave_AF+0x76>
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	2b28      	cmp	r3, #40	; 0x28
 800307a:	d126      	bne.n	80030ca <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a2c      	ldr	r2, [pc, #176]	; (8003130 <I2C_Slave_AF+0xdc>)
 8003080:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003090:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800309a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030aa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7ff f846 	bl	8002154 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80030c8:	e02e      	b.n	8003128 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
 80030cc:	2b21      	cmp	r3, #33	; 0x21
 80030ce:	d126      	bne.n	800311e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a17      	ldr	r2, [pc, #92]	; (8003130 <I2C_Slave_AF+0xdc>)
 80030d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2221      	movs	r2, #33	; 0x21
 80030da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030fa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003104:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003114:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7fe fffd 	bl	8002116 <HAL_I2C_SlaveTxCpltCallback>
}
 800311c:	e004      	b.n	8003128 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003126:	615a      	str	r2, [r3, #20]
}
 8003128:	bf00      	nop
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	ffff0000 	.word	0xffff0000

08003134 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003142:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b10      	cmp	r3, #16
 800314e:	d10a      	bne.n	8003166 <I2C_ITError+0x32>
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	2b22      	cmp	r3, #34	; 0x22
 8003154:	d107      	bne.n	8003166 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003164:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800316c:	2b28      	cmp	r3, #40	; 0x28
 800316e:	d107      	bne.n	8003180 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2228      	movs	r2, #40	; 0x28
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800317e:	e015      	b.n	80031ac <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800318a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800318e:	d006      	beq.n	800319e <I2C_ITError+0x6a>
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	2b60      	cmp	r3, #96	; 0x60
 8003194:	d003      	beq.n	800319e <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ba:	d161      	bne.n	8003280 <I2C_ITError+0x14c>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ca:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d020      	beq.n	800321a <I2C_ITError+0xe6>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031dc:	4a5e      	ldr	r2, [pc, #376]	; (8003358 <I2C_ITError+0x224>)
 80031de:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fd fe25 	bl	8000e34 <HAL_DMA_Abort_IT>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 8089 	beq.w	8003304 <I2C_ITError+0x1d0>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0201 	bic.w	r2, r2, #1
 8003200:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2220      	movs	r2, #32
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003214:	4610      	mov	r0, r2
 8003216:	4798      	blx	r3
 8003218:	e074      	b.n	8003304 <I2C_ITError+0x1d0>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321e:	4a4e      	ldr	r2, [pc, #312]	; (8003358 <I2C_ITError+0x224>)
 8003220:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	4618      	mov	r0, r3
 8003228:	f7fd fe04 	bl	8000e34 <HAL_DMA_Abort_IT>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d068      	beq.n	8003304 <I2C_ITError+0x1d0>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323c:	2b40      	cmp	r3, #64	; 0x40
 800323e:	d10b      	bne.n	8003258 <I2C_ITError+0x124>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691a      	ldr	r2, [r3, #16]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0201 	bic.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800327a:	4610      	mov	r0, r2
 800327c:	4798      	blx	r3
 800327e:	e041      	b.n	8003304 <I2C_ITError+0x1d0>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b60      	cmp	r3, #96	; 0x60
 800328a:	d125      	bne.n	80032d8 <I2C_ITError+0x1a4>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a4:	2b40      	cmp	r3, #64	; 0x40
 80032a6:	d10b      	bne.n	80032c0 <I2C_ITError+0x18c>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7fe ff63 	bl	800219c <HAL_I2C_AbortCpltCallback>
 80032d6:	e015      	b.n	8003304 <I2C_ITError+0x1d0>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e2:	2b40      	cmp	r3, #64	; 0x40
 80032e4:	d10b      	bne.n	80032fe <I2C_ITError+0x1ca>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7fe ff43 	bl	800218a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800330a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b04      	cmp	r3, #4
 8003316:	d11b      	bne.n	8003350 <I2C_ITError+0x21c>
 8003318:	7bfb      	ldrb	r3, [r7, #15]
 800331a:	2b28      	cmp	r3, #40	; 0x28
 800331c:	d118      	bne.n	8003350 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800332c:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a0a      	ldr	r2, [pc, #40]	; (800335c <I2C_ITError+0x228>)
 8003332:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2220      	movs	r2, #32
 800333e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7fe ff02 	bl	8002154 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003350:	bf00      	nop
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	080035b9 	.word	0x080035b9
 800335c:	ffff0000 	.word	0xffff0000

08003360 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af02      	add	r7, sp, #8
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	607a      	str	r2, [r7, #4]
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	460b      	mov	r3, r1
 800336e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003374:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2b08      	cmp	r3, #8
 800337a:	d006      	beq.n	800338a <I2C_MasterRequestWrite+0x2a>
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d003      	beq.n	800338a <I2C_MasterRequestWrite+0x2a>
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003388:	d108      	bne.n	800339c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	e00b      	b.n	80033b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	2b12      	cmp	r3, #18
 80033a2:	d107      	bne.n	80033b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 f968 	bl	8003696 <I2C_WaitOnFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e035      	b.n	800343c <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033d8:	d108      	bne.n	80033ec <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033da:	897b      	ldrh	r3, [r7, #10]
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	461a      	mov	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033e8:	611a      	str	r2, [r3, #16]
 80033ea:	e01b      	b.n	8003424 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033ec:	897b      	ldrh	r3, [r7, #10]
 80033ee:	11db      	asrs	r3, r3, #7
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	f003 0306 	and.w	r3, r3, #6
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	f063 030f 	orn	r3, r3, #15
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	490e      	ldr	r1, [pc, #56]	; (8003444 <I2C_MasterRequestWrite+0xe4>)
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 f99a 	bl	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e010      	b.n	800343c <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800341a:	897b      	ldrh	r3, [r7, #10]
 800341c:	b2da      	uxtb	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	4907      	ldr	r1, [pc, #28]	; (8003448 <I2C_MasterRequestWrite+0xe8>)
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 f98a 	bl	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e000      	b.n	800343c <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	00010008 	.word	0x00010008
 8003448:	00010002 	.word	0x00010002

0800344c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af02      	add	r7, sp, #8
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	460b      	mov	r3, r1
 800345a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003470:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2b08      	cmp	r3, #8
 8003476:	d006      	beq.n	8003486 <I2C_MasterRequestRead+0x3a>
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d003      	beq.n	8003486 <I2C_MasterRequestRead+0x3a>
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003484:	d108      	bne.n	8003498 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	e00b      	b.n	80034b0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	2b11      	cmp	r3, #17
 800349e:	d107      	bne.n	80034b0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 f8ea 	bl	8003696 <I2C_WaitOnFlagUntilTimeout>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e06d      	b.n	80035a8 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034d4:	d108      	bne.n	80034e8 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034d6:	897b      	ldrh	r3, [r7, #10]
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	611a      	str	r2, [r3, #16]
 80034e6:	e053      	b.n	8003590 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034e8:	897b      	ldrh	r3, [r7, #10]
 80034ea:	11db      	asrs	r3, r3, #7
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	f003 0306 	and.w	r3, r3, #6
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	f063 030f 	orn	r3, r3, #15
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	492a      	ldr	r1, [pc, #168]	; (80035b0 <I2C_MasterRequestRead+0x164>)
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 f91c 	bl	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e048      	b.n	80035a8 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003516:	897b      	ldrh	r3, [r7, #10]
 8003518:	b2da      	uxtb	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	4923      	ldr	r1, [pc, #140]	; (80035b4 <I2C_MasterRequestRead+0x168>)
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f90c 	bl	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e038      	b.n	80035a8 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800355a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f894 	bl	8003696 <I2C_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e017      	b.n	80035a8 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003578:	897b      	ldrh	r3, [r7, #10]
 800357a:	11db      	asrs	r3, r3, #7
 800357c:	b2db      	uxtb	r3, r3
 800357e:	f003 0306 	and.w	r3, r3, #6
 8003582:	b2db      	uxtb	r3, r3
 8003584:	f063 030e 	orn	r3, r3, #14
 8003588:	b2da      	uxtb	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	4907      	ldr	r1, [pc, #28]	; (80035b4 <I2C_MasterRequestRead+0x168>)
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 f8d4 	bl	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	00010008 	.word	0x00010008
 80035b4:	00010002 	.word	0x00010002

080035b8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035cc:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d2:	2200      	movs	r2, #0
 80035d4:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035da:	2200      	movs	r2, #0
 80035dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ec:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f8:	2200      	movs	r2, #0
 80035fa:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003600:	2200      	movs	r2, #0
 8003602:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0201 	bic.w	r2, r2, #1
 8003612:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b60      	cmp	r3, #96	; 0x60
 800361e:	d10e      	bne.n	800363e <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f7fe fdb0 	bl	800219c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800363c:	e027      	b.n	800368e <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800363e:	7afb      	ldrb	r3, [r7, #11]
 8003640:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003644:	2b28      	cmp	r3, #40	; 0x28
 8003646:	d117      	bne.n	8003678 <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003666:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2228      	movs	r2, #40	; 0x28
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003676:	e007      	b.n	8003688 <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f7fe fd7e 	bl	800218a <HAL_I2C_ErrorCallback>
}
 800368e:	bf00      	nop
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b084      	sub	sp, #16
 800369a:	af00      	add	r7, sp, #0
 800369c:	60f8      	str	r0, [r7, #12]
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	603b      	str	r3, [r7, #0]
 80036a2:	4613      	mov	r3, r2
 80036a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036a6:	e025      	b.n	80036f4 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ae:	d021      	beq.n	80036f4 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b0:	f7fd fa56 	bl	8000b60 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d302      	bcc.n	80036c6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d116      	bne.n	80036f4 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	f043 0220 	orr.w	r2, r3, #32
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e023      	b.n	800373c <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	0c1b      	lsrs	r3, r3, #16
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d10d      	bne.n	800371a <I2C_WaitOnFlagUntilTimeout+0x84>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	43da      	mvns	r2, r3
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	4013      	ands	r3, r2
 800370a:	b29b      	uxth	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	bf0c      	ite	eq
 8003710:	2301      	moveq	r3, #1
 8003712:	2300      	movne	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	461a      	mov	r2, r3
 8003718:	e00c      	b.n	8003734 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	43da      	mvns	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	4013      	ands	r3, r2
 8003726:	b29b      	uxth	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	bf0c      	ite	eq
 800372c:	2301      	moveq	r3, #1
 800372e:	2300      	movne	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	461a      	mov	r2, r3
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	429a      	cmp	r2, r3
 8003738:	d0b6      	beq.n	80036a8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003752:	e051      	b.n	80037f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800375e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003762:	d123      	bne.n	80037ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003772:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800377c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	f043 0204 	orr.w	r2, r3, #4
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e046      	b.n	800383a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b2:	d021      	beq.n	80037f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b4:	f7fd f9d4 	bl	8000b60 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d302      	bcc.n	80037ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d116      	bne.n	80037f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	f043 0220 	orr.w	r2, r3, #32
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e020      	b.n	800383a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	0c1b      	lsrs	r3, r3, #16
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d10c      	bne.n	800381c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	43da      	mvns	r2, r3
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	4013      	ands	r3, r2
 800380e:	b29b      	uxth	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	bf14      	ite	ne
 8003814:	2301      	movne	r3, #1
 8003816:	2300      	moveq	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	e00b      	b.n	8003834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	43da      	mvns	r2, r3
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4013      	ands	r3, r2
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	bf14      	ite	ne
 800382e:	2301      	movne	r3, #1
 8003830:	2300      	moveq	r3, #0
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d18d      	bne.n	8003754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b084      	sub	sp, #16
 8003846:	af00      	add	r7, sp, #0
 8003848:	60f8      	str	r0, [r7, #12]
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800384e:	e02d      	b.n	80038ac <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 f8ce 	bl	80039f2 <I2C_IsAcknowledgeFailed>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e02d      	b.n	80038bc <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003866:	d021      	beq.n	80038ac <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003868:	f7fd f97a 	bl	8000b60 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	429a      	cmp	r2, r3
 8003876:	d302      	bcc.n	800387e <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d116      	bne.n	80038ac <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	f043 0220 	orr.w	r2, r3, #32
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e007      	b.n	80038bc <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b6:	2b80      	cmp	r3, #128	; 0x80
 80038b8:	d1ca      	bne.n	8003850 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038d0:	e02d      	b.n	800392e <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 f88d 	bl	80039f2 <I2C_IsAcknowledgeFailed>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e02d      	b.n	800393e <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e8:	d021      	beq.n	800392e <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ea:	f7fd f939 	bl	8000b60 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d302      	bcc.n	8003900 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d116      	bne.n	800392e <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	f043 0220 	orr.w	r2, r3, #32
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e007      	b.n	800393e <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b04      	cmp	r3, #4
 800393a:	d1ca      	bne.n	80038d2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b084      	sub	sp, #16
 800394a:	af00      	add	r7, sp, #0
 800394c:	60f8      	str	r0, [r7, #12]
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003952:	e042      	b.n	80039da <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	2b10      	cmp	r3, #16
 8003960:	d119      	bne.n	8003996 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f06f 0210 	mvn.w	r2, #16
 800396a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e029      	b.n	80039ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003996:	f7fd f8e3 	bl	8000b60 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d302      	bcc.n	80039ac <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d116      	bne.n	80039da <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	f043 0220 	orr.w	r2, r3, #32
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e007      	b.n	80039ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e4:	2b40      	cmp	r3, #64	; 0x40
 80039e6:	d1b5      	bne.n	8003954 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a08:	d11b      	bne.n	8003a42 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a12:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f043 0204 	orr.w	r2, r3, #4
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr

08003a4e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003a5e:	d103      	bne.n	8003a68 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003a66:	e007      	b.n	8003a78 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003a70:	d102      	bne.n	8003a78 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2208      	movs	r2, #8
 8003a76:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bc80      	pop	{r7}
 8003a80:	4770      	bx	lr
	...

08003a84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e26c      	b.n	8003f70 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 8087 	beq.w	8003bb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003aa4:	4b92      	ldr	r3, [pc, #584]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 030c 	and.w	r3, r3, #12
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d00c      	beq.n	8003aca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ab0:	4b8f      	ldr	r3, [pc, #572]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 030c 	and.w	r3, r3, #12
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d112      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x5e>
 8003abc:	4b8c      	ldr	r3, [pc, #560]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac8:	d10b      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aca:	4b89      	ldr	r3, [pc, #548]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d06c      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x12c>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d168      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e246      	b.n	8003f70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aea:	d106      	bne.n	8003afa <HAL_RCC_OscConfig+0x76>
 8003aec:	4b80      	ldr	r3, [pc, #512]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a7f      	ldr	r2, [pc, #508]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	e02e      	b.n	8003b58 <HAL_RCC_OscConfig+0xd4>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10c      	bne.n	8003b1c <HAL_RCC_OscConfig+0x98>
 8003b02:	4b7b      	ldr	r3, [pc, #492]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a7a      	ldr	r2, [pc, #488]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	4b78      	ldr	r3, [pc, #480]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a77      	ldr	r2, [pc, #476]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003b14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	e01d      	b.n	8003b58 <HAL_RCC_OscConfig+0xd4>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b24:	d10c      	bne.n	8003b40 <HAL_RCC_OscConfig+0xbc>
 8003b26:	4b72      	ldr	r3, [pc, #456]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a71      	ldr	r2, [pc, #452]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	4b6f      	ldr	r3, [pc, #444]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a6e      	ldr	r2, [pc, #440]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	e00b      	b.n	8003b58 <HAL_RCC_OscConfig+0xd4>
 8003b40:	4b6b      	ldr	r3, [pc, #428]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a6a      	ldr	r2, [pc, #424]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b4a:	6013      	str	r3, [r2, #0]
 8003b4c:	4b68      	ldr	r3, [pc, #416]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a67      	ldr	r2, [pc, #412]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d013      	beq.n	8003b88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b60:	f7fc fffe 	bl	8000b60 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b68:	f7fc fffa 	bl	8000b60 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b64      	cmp	r3, #100	; 0x64
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e1fa      	b.n	8003f70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7a:	4b5d      	ldr	r3, [pc, #372]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0f0      	beq.n	8003b68 <HAL_RCC_OscConfig+0xe4>
 8003b86:	e014      	b.n	8003bb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b88:	f7fc ffea 	bl	8000b60 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b90:	f7fc ffe6 	bl	8000b60 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b64      	cmp	r3, #100	; 0x64
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e1e6      	b.n	8003f70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ba2:	4b53      	ldr	r3, [pc, #332]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f0      	bne.n	8003b90 <HAL_RCC_OscConfig+0x10c>
 8003bae:	e000      	b.n	8003bb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d063      	beq.n	8003c86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bbe:	4b4c      	ldr	r3, [pc, #304]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00b      	beq.n	8003be2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003bca:	4b49      	ldr	r3, [pc, #292]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f003 030c 	and.w	r3, r3, #12
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d11c      	bne.n	8003c10 <HAL_RCC_OscConfig+0x18c>
 8003bd6:	4b46      	ldr	r3, [pc, #280]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d116      	bne.n	8003c10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003be2:	4b43      	ldr	r3, [pc, #268]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d005      	beq.n	8003bfa <HAL_RCC_OscConfig+0x176>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d001      	beq.n	8003bfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e1ba      	b.n	8003f70 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bfa:	4b3d      	ldr	r3, [pc, #244]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	4939      	ldr	r1, [pc, #228]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c0e:	e03a      	b.n	8003c86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d020      	beq.n	8003c5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c18:	4b36      	ldr	r3, [pc, #216]	; (8003cf4 <HAL_RCC_OscConfig+0x270>)
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1e:	f7fc ff9f 	bl	8000b60 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c26:	f7fc ff9b 	bl	8000b60 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e19b      	b.n	8003f70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c38:	4b2d      	ldr	r3, [pc, #180]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0f0      	beq.n	8003c26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c44:	4b2a      	ldr	r3, [pc, #168]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	4927      	ldr	r1, [pc, #156]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	600b      	str	r3, [r1, #0]
 8003c58:	e015      	b.n	8003c86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c5a:	4b26      	ldr	r3, [pc, #152]	; (8003cf4 <HAL_RCC_OscConfig+0x270>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c60:	f7fc ff7e 	bl	8000b60 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c68:	f7fc ff7a 	bl	8000b60 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e17a      	b.n	8003f70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c7a:	4b1d      	ldr	r3, [pc, #116]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1f0      	bne.n	8003c68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d03a      	beq.n	8003d08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d019      	beq.n	8003cce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c9a:	4b17      	ldr	r3, [pc, #92]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca0:	f7fc ff5e 	bl	8000b60 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca8:	f7fc ff5a 	bl	8000b60 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e15a      	b.n	8003f70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cba:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <HAL_RCC_OscConfig+0x26c>)
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0f0      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003cc6:	2001      	movs	r0, #1
 8003cc8:	f000 fac6 	bl	8004258 <RCC_Delay>
 8003ccc:	e01c      	b.n	8003d08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cce:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd4:	f7fc ff44 	bl	8000b60 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cda:	e00f      	b.n	8003cfc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cdc:	f7fc ff40 	bl	8000b60 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d908      	bls.n	8003cfc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e140      	b.n	8003f70 <HAL_RCC_OscConfig+0x4ec>
 8003cee:	bf00      	nop
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	42420000 	.word	0x42420000
 8003cf8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cfc:	4b9e      	ldr	r3, [pc, #632]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1e9      	bne.n	8003cdc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 80a6 	beq.w	8003e62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d16:	2300      	movs	r3, #0
 8003d18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d1a:	4b97      	ldr	r3, [pc, #604]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10d      	bne.n	8003d42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d26:	4b94      	ldr	r3, [pc, #592]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	4a93      	ldr	r2, [pc, #588]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d30:	61d3      	str	r3, [r2, #28]
 8003d32:	4b91      	ldr	r3, [pc, #580]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3a:	60bb      	str	r3, [r7, #8]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d42:	4b8e      	ldr	r3, [pc, #568]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d118      	bne.n	8003d80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d4e:	4b8b      	ldr	r3, [pc, #556]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a8a      	ldr	r2, [pc, #552]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d5a:	f7fc ff01 	bl	8000b60 <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d62:	f7fc fefd 	bl	8000b60 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b64      	cmp	r3, #100	; 0x64
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e0fd      	b.n	8003f70 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d74:	4b81      	ldr	r3, [pc, #516]	; (8003f7c <HAL_RCC_OscConfig+0x4f8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0f0      	beq.n	8003d62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d106      	bne.n	8003d96 <HAL_RCC_OscConfig+0x312>
 8003d88:	4b7b      	ldr	r3, [pc, #492]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	4a7a      	ldr	r2, [pc, #488]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003d8e:	f043 0301 	orr.w	r3, r3, #1
 8003d92:	6213      	str	r3, [r2, #32]
 8003d94:	e02d      	b.n	8003df2 <HAL_RCC_OscConfig+0x36e>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10c      	bne.n	8003db8 <HAL_RCC_OscConfig+0x334>
 8003d9e:	4b76      	ldr	r3, [pc, #472]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	4a75      	ldr	r2, [pc, #468]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003da4:	f023 0301 	bic.w	r3, r3, #1
 8003da8:	6213      	str	r3, [r2, #32]
 8003daa:	4b73      	ldr	r3, [pc, #460]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	4a72      	ldr	r2, [pc, #456]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003db0:	f023 0304 	bic.w	r3, r3, #4
 8003db4:	6213      	str	r3, [r2, #32]
 8003db6:	e01c      	b.n	8003df2 <HAL_RCC_OscConfig+0x36e>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	2b05      	cmp	r3, #5
 8003dbe:	d10c      	bne.n	8003dda <HAL_RCC_OscConfig+0x356>
 8003dc0:	4b6d      	ldr	r3, [pc, #436]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	4a6c      	ldr	r2, [pc, #432]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003dc6:	f043 0304 	orr.w	r3, r3, #4
 8003dca:	6213      	str	r3, [r2, #32]
 8003dcc:	4b6a      	ldr	r3, [pc, #424]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	4a69      	ldr	r2, [pc, #420]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003dd2:	f043 0301 	orr.w	r3, r3, #1
 8003dd6:	6213      	str	r3, [r2, #32]
 8003dd8:	e00b      	b.n	8003df2 <HAL_RCC_OscConfig+0x36e>
 8003dda:	4b67      	ldr	r3, [pc, #412]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	4a66      	ldr	r2, [pc, #408]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003de0:	f023 0301 	bic.w	r3, r3, #1
 8003de4:	6213      	str	r3, [r2, #32]
 8003de6:	4b64      	ldr	r3, [pc, #400]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	4a63      	ldr	r2, [pc, #396]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003dec:	f023 0304 	bic.w	r3, r3, #4
 8003df0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d015      	beq.n	8003e26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dfa:	f7fc feb1 	bl	8000b60 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e00:	e00a      	b.n	8003e18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e02:	f7fc fead 	bl	8000b60 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e0ab      	b.n	8003f70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e18:	4b57      	ldr	r3, [pc, #348]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0ee      	beq.n	8003e02 <HAL_RCC_OscConfig+0x37e>
 8003e24:	e014      	b.n	8003e50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e26:	f7fc fe9b 	bl	8000b60 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e2c:	e00a      	b.n	8003e44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2e:	f7fc fe97 	bl	8000b60 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e095      	b.n	8003f70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e44:	4b4c      	ldr	r3, [pc, #304]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1ee      	bne.n	8003e2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e50:	7dfb      	ldrb	r3, [r7, #23]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d105      	bne.n	8003e62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e56:	4b48      	ldr	r3, [pc, #288]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	4a47      	ldr	r2, [pc, #284]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 8081 	beq.w	8003f6e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e6c:	4b42      	ldr	r3, [pc, #264]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f003 030c 	and.w	r3, r3, #12
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d061      	beq.n	8003f3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d146      	bne.n	8003f0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e80:	4b3f      	ldr	r3, [pc, #252]	; (8003f80 <HAL_RCC_OscConfig+0x4fc>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e86:	f7fc fe6b 	bl	8000b60 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e8e:	f7fc fe67 	bl	8000b60 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e067      	b.n	8003f70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ea0:	4b35      	ldr	r3, [pc, #212]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1f0      	bne.n	8003e8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb4:	d108      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003eb6:	4b30      	ldr	r3, [pc, #192]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	492d      	ldr	r1, [pc, #180]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ec8:	4b2b      	ldr	r3, [pc, #172]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a19      	ldr	r1, [r3, #32]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	430b      	orrs	r3, r1
 8003eda:	4927      	ldr	r1, [pc, #156]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ee0:	4b27      	ldr	r3, [pc, #156]	; (8003f80 <HAL_RCC_OscConfig+0x4fc>)
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee6:	f7fc fe3b 	bl	8000b60 <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eee:	f7fc fe37 	bl	8000b60 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e037      	b.n	8003f70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f00:	4b1d      	ldr	r3, [pc, #116]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0f0      	beq.n	8003eee <HAL_RCC_OscConfig+0x46a>
 8003f0c:	e02f      	b.n	8003f6e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f0e:	4b1c      	ldr	r3, [pc, #112]	; (8003f80 <HAL_RCC_OscConfig+0x4fc>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f14:	f7fc fe24 	bl	8000b60 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f1c:	f7fc fe20 	bl	8000b60 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e020      	b.n	8003f70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f2e:	4b12      	ldr	r3, [pc, #72]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1f0      	bne.n	8003f1c <HAL_RCC_OscConfig+0x498>
 8003f3a:	e018      	b.n	8003f6e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e013      	b.n	8003f70 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f48:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <HAL_RCC_OscConfig+0x4f4>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d106      	bne.n	8003f6a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d001      	beq.n	8003f6e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e000      	b.n	8003f70 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	40007000 	.word	0x40007000
 8003f80:	42420060 	.word	0x42420060

08003f84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0d0      	b.n	800413a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f98:	4b6a      	ldr	r3, [pc, #424]	; (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d910      	bls.n	8003fc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa6:	4b67      	ldr	r3, [pc, #412]	; (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f023 0207 	bic.w	r2, r3, #7
 8003fae:	4965      	ldr	r1, [pc, #404]	; (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb6:	4b63      	ldr	r3, [pc, #396]	; (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d001      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0b8      	b.n	800413a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d020      	beq.n	8004016 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fe0:	4b59      	ldr	r3, [pc, #356]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	4a58      	ldr	r2, [pc, #352]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003fea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ff8:	4b53      	ldr	r3, [pc, #332]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	4a52      	ldr	r2, [pc, #328]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004002:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004004:	4b50      	ldr	r3, [pc, #320]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	494d      	ldr	r1, [pc, #308]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004012:	4313      	orrs	r3, r2
 8004014:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d040      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d107      	bne.n	800403a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402a:	4b47      	ldr	r3, [pc, #284]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d115      	bne.n	8004062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e07f      	b.n	800413a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b02      	cmp	r3, #2
 8004040:	d107      	bne.n	8004052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004042:	4b41      	ldr	r3, [pc, #260]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d109      	bne.n	8004062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e073      	b.n	800413a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004052:	4b3d      	ldr	r3, [pc, #244]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e06b      	b.n	800413a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004062:	4b39      	ldr	r3, [pc, #228]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f023 0203 	bic.w	r2, r3, #3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	4936      	ldr	r1, [pc, #216]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004070:	4313      	orrs	r3, r2
 8004072:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004074:	f7fc fd74 	bl	8000b60 <HAL_GetTick>
 8004078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407a:	e00a      	b.n	8004092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800407c:	f7fc fd70 	bl	8000b60 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	f241 3288 	movw	r2, #5000	; 0x1388
 800408a:	4293      	cmp	r3, r2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e053      	b.n	800413a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004092:	4b2d      	ldr	r3, [pc, #180]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f003 020c 	and.w	r2, r3, #12
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d1eb      	bne.n	800407c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040a4:	4b27      	ldr	r3, [pc, #156]	; (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d210      	bcs.n	80040d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b2:	4b24      	ldr	r3, [pc, #144]	; (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f023 0207 	bic.w	r2, r3, #7
 80040ba:	4922      	ldr	r1, [pc, #136]	; (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	4313      	orrs	r3, r2
 80040c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c2:	4b20      	ldr	r3, [pc, #128]	; (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d001      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e032      	b.n	800413a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d008      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040e0:	4b19      	ldr	r3, [pc, #100]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	4916      	ldr	r1, [pc, #88]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d009      	beq.n	8004112 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040fe:	4b12      	ldr	r3, [pc, #72]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	490e      	ldr	r1, [pc, #56]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 800410e:	4313      	orrs	r3, r2
 8004110:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004112:	f000 f821 	bl	8004158 <HAL_RCC_GetSysClockFreq>
 8004116:	4601      	mov	r1, r0
 8004118:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	091b      	lsrs	r3, r3, #4
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	4a0a      	ldr	r2, [pc, #40]	; (800414c <HAL_RCC_ClockConfig+0x1c8>)
 8004124:	5cd3      	ldrb	r3, [r2, r3]
 8004126:	fa21 f303 	lsr.w	r3, r1, r3
 800412a:	4a09      	ldr	r2, [pc, #36]	; (8004150 <HAL_RCC_ClockConfig+0x1cc>)
 800412c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800412e:	4b09      	ldr	r3, [pc, #36]	; (8004154 <HAL_RCC_ClockConfig+0x1d0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f7fc fcd2 	bl	8000adc <HAL_InitTick>

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	40022000 	.word	0x40022000
 8004148:	40021000 	.word	0x40021000
 800414c:	08008f48 	.word	0x08008f48
 8004150:	20000008 	.word	0x20000008
 8004154:	20000000 	.word	0x20000000

08004158 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004158:	b490      	push	{r4, r7}
 800415a:	b08a      	sub	sp, #40	; 0x28
 800415c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800415e:	4b2a      	ldr	r3, [pc, #168]	; (8004208 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004160:	1d3c      	adds	r4, r7, #4
 8004162:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004164:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004168:	4b28      	ldr	r3, [pc, #160]	; (800420c <HAL_RCC_GetSysClockFreq+0xb4>)
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800416e:	2300      	movs	r3, #0
 8004170:	61fb      	str	r3, [r7, #28]
 8004172:	2300      	movs	r3, #0
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	2300      	movs	r3, #0
 8004178:	627b      	str	r3, [r7, #36]	; 0x24
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800417e:	2300      	movs	r3, #0
 8004180:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004182:	4b23      	ldr	r3, [pc, #140]	; (8004210 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	f003 030c 	and.w	r3, r3, #12
 800418e:	2b04      	cmp	r3, #4
 8004190:	d002      	beq.n	8004198 <HAL_RCC_GetSysClockFreq+0x40>
 8004192:	2b08      	cmp	r3, #8
 8004194:	d003      	beq.n	800419e <HAL_RCC_GetSysClockFreq+0x46>
 8004196:	e02d      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004198:	4b1e      	ldr	r3, [pc, #120]	; (8004214 <HAL_RCC_GetSysClockFreq+0xbc>)
 800419a:	623b      	str	r3, [r7, #32]
      break;
 800419c:	e02d      	b.n	80041fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	0c9b      	lsrs	r3, r3, #18
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80041aa:	4413      	add	r3, r2
 80041ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80041b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d013      	beq.n	80041e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041bc:	4b14      	ldr	r3, [pc, #80]	; (8004210 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	0c5b      	lsrs	r3, r3, #17
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80041ca:	4413      	add	r3, r2
 80041cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80041d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	4a0f      	ldr	r2, [pc, #60]	; (8004214 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041d6:	fb02 f203 	mul.w	r2, r2, r3
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e0:	627b      	str	r3, [r7, #36]	; 0x24
 80041e2:	e004      	b.n	80041ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	4a0c      	ldr	r2, [pc, #48]	; (8004218 <HAL_RCC_GetSysClockFreq+0xc0>)
 80041e8:	fb02 f303 	mul.w	r3, r2, r3
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	623b      	str	r3, [r7, #32]
      break;
 80041f2:	e002      	b.n	80041fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041f4:	4b07      	ldr	r3, [pc, #28]	; (8004214 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041f6:	623b      	str	r3, [r7, #32]
      break;
 80041f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041fa:	6a3b      	ldr	r3, [r7, #32]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3728      	adds	r7, #40	; 0x28
 8004200:	46bd      	mov	sp, r7
 8004202:	bc90      	pop	{r4, r7}
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	08008be8 	.word	0x08008be8
 800420c:	08008bf8 	.word	0x08008bf8
 8004210:	40021000 	.word	0x40021000
 8004214:	007a1200 	.word	0x007a1200
 8004218:	003d0900 	.word	0x003d0900

0800421c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004220:	4b02      	ldr	r3, [pc, #8]	; (800422c <HAL_RCC_GetHCLKFreq+0x10>)
 8004222:	681b      	ldr	r3, [r3, #0]
}
 8004224:	4618      	mov	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr
 800422c:	20000008 	.word	0x20000008

08004230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004234:	f7ff fff2 	bl	800421c <HAL_RCC_GetHCLKFreq>
 8004238:	4601      	mov	r1, r0
 800423a:	4b05      	ldr	r3, [pc, #20]	; (8004250 <HAL_RCC_GetPCLK1Freq+0x20>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	0a1b      	lsrs	r3, r3, #8
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	4a03      	ldr	r2, [pc, #12]	; (8004254 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004246:	5cd3      	ldrb	r3, [r2, r3]
 8004248:	fa21 f303 	lsr.w	r3, r1, r3
}
 800424c:	4618      	mov	r0, r3
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40021000 	.word	0x40021000
 8004254:	08008f58 	.word	0x08008f58

08004258 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004260:	4b0a      	ldr	r3, [pc, #40]	; (800428c <RCC_Delay+0x34>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a0a      	ldr	r2, [pc, #40]	; (8004290 <RCC_Delay+0x38>)
 8004266:	fba2 2303 	umull	r2, r3, r2, r3
 800426a:	0a5b      	lsrs	r3, r3, #9
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	fb02 f303 	mul.w	r3, r2, r3
 8004272:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004274:	bf00      	nop
  }
  while (Delay --);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	1e5a      	subs	r2, r3, #1
 800427a:	60fa      	str	r2, [r7, #12]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1f9      	bne.n	8004274 <RCC_Delay+0x1c>
}
 8004280:	bf00      	nop
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	20000008 	.word	0x20000008
 8004290:	10624dd3 	.word	0x10624dd3

08004294 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	4613      	mov	r3, r2
 80042a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	d140      	bne.n	8004330 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d002      	beq.n	80042ba <HAL_UART_Receive_IT+0x26>
 80042b4:	88fb      	ldrh	r3, [r7, #6]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e039      	b.n	8004332 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_UART_Receive_IT+0x38>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e032      	b.n	8004332 <HAL_UART_Receive_IT+0x9e>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	88fa      	ldrh	r2, [r7, #6]
 80042de:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	88fa      	ldrh	r2, [r7, #6]
 80042e4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2222      	movs	r2, #34	; 0x22
 80042f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800430a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695a      	ldr	r2, [r3, #20]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0220 	orr.w	r2, r2, #32
 800432a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800432c:	2300      	movs	r3, #0
 800432e:	e000      	b.n	8004332 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004330:	2302      	movs	r3, #2
  }
}
 8004332:	4618      	mov	r0, r3
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr

0800433c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b088      	sub	sp, #32
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800435c:	2300      	movs	r3, #0
 800435e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004360:	2300      	movs	r3, #0
 8004362:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10d      	bne.n	800438e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	f003 0320 	and.w	r3, r3, #32
 8004378:	2b00      	cmp	r3, #0
 800437a:	d008      	beq.n	800438e <HAL_UART_IRQHandler+0x52>
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	f003 0320 	and.w	r3, r3, #32
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f98d 	bl	80046a6 <UART_Receive_IT>
      return;
 800438c:	e0cc      	b.n	8004528 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 80ab 	beq.w	80044ec <HAL_UART_IRQHandler+0x1b0>
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d105      	bne.n	80043ac <HAL_UART_IRQHandler+0x70>
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 80a0 	beq.w	80044ec <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <HAL_UART_IRQHandler+0x90>
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c4:	f043 0201 	orr.w	r2, r3, #1
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <HAL_UART_IRQHandler+0xb0>
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d005      	beq.n	80043ec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e4:	f043 0202 	orr.w	r2, r3, #2
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <HAL_UART_IRQHandler+0xd0>
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d005      	beq.n	800440c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004404:	f043 0204 	orr.w	r2, r3, #4
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <HAL_UART_IRQHandler+0xf0>
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d005      	beq.n	800442c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004424:	f043 0208 	orr.w	r2, r3, #8
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004430:	2b00      	cmp	r3, #0
 8004432:	d078      	beq.n	8004526 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b00      	cmp	r3, #0
 800443c:	d007      	beq.n	800444e <HAL_UART_IRQHandler+0x112>
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	f003 0320 	and.w	r3, r3, #32
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f92c 	bl	80046a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004458:	2b00      	cmp	r3, #0
 800445a:	bf14      	ite	ne
 800445c:	2301      	movne	r3, #1
 800445e:	2300      	moveq	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b00      	cmp	r3, #0
 800446e:	d102      	bne.n	8004476 <HAL_UART_IRQHandler+0x13a>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d031      	beq.n	80044da <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f877 	bl	800456a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004486:	2b00      	cmp	r3, #0
 8004488:	d023      	beq.n	80044d2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	695a      	ldr	r2, [r3, #20]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004498:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d013      	beq.n	80044ca <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a6:	4a22      	ldr	r2, [pc, #136]	; (8004530 <HAL_UART_IRQHandler+0x1f4>)
 80044a8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fc fcc0 	bl	8000e34 <HAL_DMA_Abort_IT>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d016      	beq.n	80044e8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044c4:	4610      	mov	r0, r2
 80044c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c8:	e00e      	b.n	80044e8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f844 	bl	8004558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d0:	e00a      	b.n	80044e8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f840 	bl	8004558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d8:	e006      	b.n	80044e8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f83c 	bl	8004558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80044e6:	e01e      	b.n	8004526 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e8:	bf00      	nop
    return;
 80044ea:	e01c      	b.n	8004526 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d008      	beq.n	8004508 <HAL_UART_IRQHandler+0x1cc>
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f863 	bl	80045cc <UART_Transmit_IT>
    return;
 8004506:	e00f      	b.n	8004528 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <HAL_UART_IRQHandler+0x1ec>
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004518:	2b00      	cmp	r3, #0
 800451a:	d005      	beq.n	8004528 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f8aa 	bl	8004676 <UART_EndTransmit_IT>
    return;
 8004522:	bf00      	nop
 8004524:	e000      	b.n	8004528 <HAL_UART_IRQHandler+0x1ec>
    return;
 8004526:	bf00      	nop
  }
}
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	080045a5 	.word	0x080045a5

08004534 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	bc80      	pop	{r7}
 8004544:	4770      	bx	lr

08004546 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr

08004558 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	bc80      	pop	{r7}
 8004568:	4770      	bx	lr

0800456a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004580:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695a      	ldr	r2, [r3, #20]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0201 	bic.w	r2, r2, #1
 8004590:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2220      	movs	r2, #32
 8004596:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	bc80      	pop	{r7}
 80045a2:	4770      	bx	lr

080045a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f7ff ffca 	bl	8004558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045c4:	bf00      	nop
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b21      	cmp	r3, #33	; 0x21
 80045de:	d144      	bne.n	800466a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e8:	d11a      	bne.n	8004620 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045fe:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d105      	bne.n	8004614 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	1c9a      	adds	r2, r3, #2
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	621a      	str	r2, [r3, #32]
 8004612:	e00e      	b.n	8004632 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	1c5a      	adds	r2, r3, #1
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	621a      	str	r2, [r3, #32]
 800461e:	e008      	b.n	8004632 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	1c59      	adds	r1, r3, #1
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6211      	str	r1, [r2, #32]
 800462a:	781a      	ldrb	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004636:	b29b      	uxth	r3, r3
 8004638:	3b01      	subs	r3, #1
 800463a:	b29b      	uxth	r3, r3
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	4619      	mov	r1, r3
 8004640:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10f      	bne.n	8004666 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004654:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004664:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	e000      	b.n	800466c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800466a:	2302      	movs	r3, #2
  }
}
 800466c:	4618      	mov	r0, r3
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	4770      	bx	lr

08004676 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800468c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2220      	movs	r2, #32
 8004692:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7ff ff4c 	bl	8004534 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b084      	sub	sp, #16
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b22      	cmp	r3, #34	; 0x22
 80046b8:	d171      	bne.n	800479e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c2:	d123      	bne.n	800470c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c8:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10e      	bne.n	80046f0 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	b29b      	uxth	r3, r3
 80046da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e8:	1c9a      	adds	r2, r3, #2
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	629a      	str	r2, [r3, #40]	; 0x28
 80046ee:	e029      	b.n	8004744 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	629a      	str	r2, [r3, #40]	; 0x28
 800470a:	e01b      	b.n	8004744 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10a      	bne.n	800472a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6858      	ldr	r0, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471e:	1c59      	adds	r1, r3, #1
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6291      	str	r1, [r2, #40]	; 0x28
 8004724:	b2c2      	uxtb	r2, r0
 8004726:	701a      	strb	r2, [r3, #0]
 8004728:	e00c      	b.n	8004744 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	b2da      	uxtb	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004736:	1c58      	adds	r0, r3, #1
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	6288      	str	r0, [r1, #40]	; 0x28
 800473c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004740:	b2d2      	uxtb	r2, r2
 8004742:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004748:	b29b      	uxth	r3, r3
 800474a:	3b01      	subs	r3, #1
 800474c:	b29b      	uxth	r3, r3
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	4619      	mov	r1, r3
 8004752:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004754:	2b00      	cmp	r3, #0
 8004756:	d120      	bne.n	800479a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0220 	bic.w	r2, r2, #32
 8004766:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004776:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695a      	ldr	r2, [r3, #20]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0201 	bic.w	r2, r2, #1
 8004786:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2220      	movs	r2, #32
 800478c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff fed8 	bl	8004546 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	e002      	b.n	80047a0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	e000      	b.n	80047a0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800479e:	2302      	movs	r3, #2
  }
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <setup>:
#else
#define DELAY_PERIOD    (15*60*1000)    // 15 minutes
#endif

// One-time initialization
void setup() {
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0

	// "NoteNewRequest()" uses the bundled "J" json package to allocate a "req", which is a JSON object
	// for the request to which we will then add Request arguments.  The function allocates a "req"
	// request structure using malloc() and initializes its "req" field with the type of request.
	J *req = NoteNewRequest("service.set");
 80047ae:	480a      	ldr	r0, [pc, #40]	; (80047d8 <setup+0x30>)
 80047b0:	f003 fc4c 	bl	800804c <NoteNewRequest>
 80047b4:	6078      	str	r0, [r7, #4]

	// This command (required) causes the data to be delivered to the Project on notehub.io that has claimed
	// this Product ID.  (see above)
	JAddStringToObject(req, "product", myProductID);
 80047b6:	4a09      	ldr	r2, [pc, #36]	; (80047dc <setup+0x34>)
 80047b8:	4909      	ldr	r1, [pc, #36]	; (80047e0 <setup+0x38>)
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f002 fdcc 	bl	8007358 <JAddStringToObject>
	// This command determines how often the Notecard connects to the service.  If "continuous" the Notecard
    // immediately establishes a session with the service at notehub.io, and keeps it active continuously.
    // Because of the power requirements of a continuous connection, a battery powered device would instead
    // only sample its sensors occasionally, and would only upload to the service on a periodic basis.
#if myLiveDemo
	JAddStringToObject(req, "mode", "continuous");
 80047c0:	4a08      	ldr	r2, [pc, #32]	; (80047e4 <setup+0x3c>)
 80047c2:	4909      	ldr	r1, [pc, #36]	; (80047e8 <setup+0x40>)
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f002 fdc7 	bl	8007358 <JAddStringToObject>
	//		 "product" : myProductID,
	//		 "mode"	   : "continuous"
	//	   }
	// Note that NoteRequest() always uses free() to release the request data structure, and it
	// returns "true" if success and "false" if there is any failure.
	NoteRequest(req);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f003 fc54 	bl	8008078 <NoteRequest>

}
 80047d0:	bf00      	nop
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	08008bfc 	.word	0x08008bfc
 80047dc:	08008c08 	.word	0x08008c08
 80047e0:	08008c30 	.word	0x08008c30
 80047e4:	08008c38 	.word	0x08008c38
 80047e8:	08008c44 	.word	0x08008c44

080047ec <loop>:

// This  main loop which is called repeatedly, add outbound data every 15 seconds
void loop() {
 80047ec:	b590      	push	{r4, r7, lr}
 80047ee:	b089      	sub	sp, #36	; 0x24
 80047f0:	af00      	add	r7, sp, #0

	// Simulate an event counter of some kind
	static unsigned eventCounter = 0;
	eventCounter = eventCounter + 1;
 80047f2:	4b3c      	ldr	r3, [pc, #240]	; (80048e4 <loop+0xf8>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3301      	adds	r3, #1
 80047f8:	4a3a      	ldr	r2, [pc, #232]	; (80048e4 <loop+0xf8>)
 80047fa:	6013      	str	r3, [r2, #0]
	// that we would like to examine the response of the transaction.  This method takes a "request" JSON
	// data structure as input, then processes it and returns a "response" JSON data structure with
	// the response.  Note that because the Notecard library uses malloc(), developers must always
	// check for NULL to ensure that there was enough memory available on the microcontroller to
	// satisfy the allocation request.
	double temperature = 0;
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	f04f 0400 	mov.w	r4, #0
 8004804:	e9c7 3406 	strd	r3, r4, [r7, #24]
    J *rsp = NoteRequestResponse(NoteNewRequest("card.temp"));
 8004808:	4837      	ldr	r0, [pc, #220]	; (80048e8 <loop+0xfc>)
 800480a:	f003 fc1f 	bl	800804c <NoteNewRequest>
 800480e:	4603      	mov	r3, r0
 8004810:	4618      	mov	r0, r3
 8004812:	f003 fc59 	bl	80080c8 <NoteRequestResponse>
 8004816:	60f8      	str	r0, [r7, #12]
    if (rsp != NULL) {
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d008      	beq.n	8004830 <loop+0x44>
        temperature = JGetNumber(rsp, "value");
 800481e:	4933      	ldr	r1, [pc, #204]	; (80048ec <loop+0x100>)
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f002 fe83 	bl	800752c <JGetNumber>
 8004826:	e9c7 0106 	strd	r0, r1, [r7, #24]
        NoteDeleteResponse(rsp);
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 fec6 	bl	80055bc <JDelete>
    }

	// Do the same to retrieve the voltage that is detected by the Notecard on its V+ pin.
	double voltage = 0;
 8004830:	f04f 0300 	mov.w	r3, #0
 8004834:	f04f 0400 	mov.w	r4, #0
 8004838:	e9c7 3404 	strd	r3, r4, [r7, #16]
    rsp = NoteRequestResponse(NoteNewRequest("card.voltage"));
 800483c:	482c      	ldr	r0, [pc, #176]	; (80048f0 <loop+0x104>)
 800483e:	f003 fc05 	bl	800804c <NoteNewRequest>
 8004842:	4603      	mov	r3, r0
 8004844:	4618      	mov	r0, r3
 8004846:	f003 fc3f 	bl	80080c8 <NoteRequestResponse>
 800484a:	60f8      	str	r0, [r7, #12]
    if (rsp != NULL) {
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d008      	beq.n	8004864 <loop+0x78>
        voltage = JGetNumber(rsp, "value");
 8004852:	4926      	ldr	r1, [pc, #152]	; (80048ec <loop+0x100>)
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f002 fe69 	bl	800752c <JGetNumber>
 800485a:	e9c7 0104 	strd	r0, r1, [r7, #16]
        NoteDeleteResponse(rsp);
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 feac 	bl	80055bc <JDelete>
    }

	// Enqueue the measurement to the Notecard for transmission to the Notehub, adding the "start"
	// flag for demonstration purposes to upload the data instantaneously, so that if you are looking
	// at this on notehub.io you will see the data appearing 'live'.)
    J *req = NoteNewRequest("note.add");
 8004864:	4823      	ldr	r0, [pc, #140]	; (80048f4 <loop+0x108>)
 8004866:	f003 fbf1 	bl	800804c <NoteNewRequest>
 800486a:	60b8      	str	r0, [r7, #8]
	if (req != NULL) {
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d030      	beq.n	80048d4 <loop+0xe8>
	    JAddStringToObject(req, "file", "sensors.qo");
 8004872:	4a21      	ldr	r2, [pc, #132]	; (80048f8 <loop+0x10c>)
 8004874:	4921      	ldr	r1, [pc, #132]	; (80048fc <loop+0x110>)
 8004876:	68b8      	ldr	r0, [r7, #8]
 8004878:	f002 fd6e 	bl	8007358 <JAddStringToObject>
	    JAddBoolToObject(req, "start", true);
 800487c:	2201      	movs	r2, #1
 800487e:	4920      	ldr	r1, [pc, #128]	; (8004900 <loop+0x114>)
 8004880:	68b8      	ldr	r0, [r7, #8]
 8004882:	f002 fd23 	bl	80072cc <JAddBoolToObject>
		J *body = JCreateObject();
 8004886:	f002 fe11 	bl	80074ac <JCreateObject>
 800488a:	6078      	str	r0, [r7, #4]
		if (body != NULL) {
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d01d      	beq.n	80048ce <loop+0xe2>
			JAddNumberToObject(body, "temp", temperature);
 8004892:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004896:	491b      	ldr	r1, [pc, #108]	; (8004904 <loop+0x118>)
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f002 fd39 	bl	8007310 <JAddNumberToObject>
			JAddNumberToObject(body, "voltage", voltage);
 800489e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80048a2:	4919      	ldr	r1, [pc, #100]	; (8004908 <loop+0x11c>)
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f002 fd33 	bl	8007310 <JAddNumberToObject>
			JAddNumberToObject(body, "count", eventCounter);
 80048aa:	4b0e      	ldr	r3, [pc, #56]	; (80048e4 <loop+0xf8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fb fda2 	bl	80003f8 <__aeabi_ui2d>
 80048b4:	4603      	mov	r3, r0
 80048b6:	460c      	mov	r4, r1
 80048b8:	461a      	mov	r2, r3
 80048ba:	4623      	mov	r3, r4
 80048bc:	4913      	ldr	r1, [pc, #76]	; (800490c <loop+0x120>)
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f002 fd26 	bl	8007310 <JAddNumberToObject>
		    JAddItemToObject(req, "body", body);
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	4912      	ldr	r1, [pc, #72]	; (8004910 <loop+0x124>)
 80048c8:	68b8      	ldr	r0, [r7, #8]
 80048ca:	f002 fceb 	bl	80072a4 <JAddItemToObject>
		}
	    NoteRequest(req);
 80048ce:	68b8      	ldr	r0, [r7, #8]
 80048d0:	f003 fbd2 	bl	8008078 <NoteRequest>
	}

	// Delay between measurements
	delay(DELAY_PERIOD);
 80048d4:	f643 2098 	movw	r0, #15000	; 0x3a98
 80048d8:	f000 f9ac 	bl	8004c34 <delay>

}
 80048dc:	bf00      	nop
 80048de:	3724      	adds	r7, #36	; 0x24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd90      	pop	{r4, r7, pc}
 80048e4:	20000254 	.word	0x20000254
 80048e8:	08008c4c 	.word	0x08008c4c
 80048ec:	08008c58 	.word	0x08008c58
 80048f0:	08008c60 	.word	0x08008c60
 80048f4:	08008c70 	.word	0x08008c70
 80048f8:	08008c7c 	.word	0x08008c7c
 80048fc:	08008c88 	.word	0x08008c88
 8004900:	08008c90 	.word	0x08008c90
 8004904:	08008c98 	.word	0x08008c98
 8004908:	08008ca0 	.word	0x08008ca0
 800490c:	08008ca8 	.word	0x08008ca8
 8004910:	08008cb0 	.word	0x08008cb0

08004914 <main>:
void noteI2CReset(void);
const char *noteI2CTransmit(uint16_t DevAddress, uint8_t* pBuffer, uint16_t Size);
const char *noteI2CReceive(uint16_t DevAddress, uint8_t* pBuffer, uint16_t Size, uint32_t *avail);

// Main entry point
int main(void) {
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af02      	add	r7, sp, #8

    // Initialize peripherals
    HAL_Init();
 800491a:	f7fc f8c9 	bl	8000ab0 <HAL_Init>
    SystemClock_Config();
 800491e:	f000 f823 	bl	8004968 <SystemClock_Config>
    MX_GPIO_Init();
 8004922:	f000 f8fd 	bl	8004b20 <MX_GPIO_Init>
#ifdef EVENT_TIMER
    MX_LPTIM1_Init();
#endif

    // Register callbacks with note-c subsystem that it needs for I/O, memory, timer
    NoteSetFn(malloc, free, delay, millis);
 8004926:	4b09      	ldr	r3, [pc, #36]	; (800494c <main+0x38>)
 8004928:	4a09      	ldr	r2, [pc, #36]	; (8004950 <main+0x3c>)
 800492a:	490a      	ldr	r1, [pc, #40]	; (8004954 <main+0x40>)
 800492c:	480a      	ldr	r0, [pc, #40]	; (8004958 <main+0x44>)
 800492e:	f002 fff3 	bl	8007918 <NoteSetFn>

    // Register callbacks for Notecard I/O
#if NOTECARD_USE_I2C
    NoteSetFnI2C(NOTE_I2C_ADDR_DEFAULT, NOTE_I2C_MAX_DEFAULT, noteI2CReset, noteI2CTransmit, noteI2CReceive);
 8004932:	4b0a      	ldr	r3, [pc, #40]	; (800495c <main+0x48>)
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <main+0x4c>)
 8004938:	4a0a      	ldr	r2, [pc, #40]	; (8004964 <main+0x50>)
 800493a:	2100      	movs	r1, #0
 800493c:	2000      	movs	r0, #0
 800493e:	f003 f80b 	bl	8007958 <NoteSetFnI2C>
#else
    NoteSetFnSerial(noteSerialReset, noteSerialTransmit, noteSerialAvailable, noteSerialReceive);
#endif

    // Use this method of invoking main app code so that we can re-use familiar Arduino examples
    setup();
 8004942:	f7ff ff31 	bl	80047a8 <setup>
    while (true)
        loop();
 8004946:	f7ff ff51 	bl	80047ec <loop>
 800494a:	e7fc      	b.n	8004946 <main+0x32>
 800494c:	08004c4b 	.word	0x08004c4b
 8004950:	08004c35 	.word	0x08004c35
 8004954:	080082d9 	.word	0x080082d9
 8004958:	080082c9 	.word	0x080082c9
 800495c:	08004cf5 	.word	0x08004cf5
 8004960:	08004c69 	.word	0x08004c69
 8004964:	08004c59 	.word	0x08004c59

08004968 <SystemClock_Config>:

}

// System clock configuration
void SystemClock_Config(void) {
 8004968:	b580      	push	{r7, lr}
 800496a:	b090      	sub	sp, #64	; 0x40
 800496c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800496e:	f107 0318 	add.w	r3, r7, #24
 8004972:	2228      	movs	r2, #40	; 0x28
 8004974:	2100      	movs	r1, #0
 8004976:	4618      	mov	r0, r3
 8004978:	f003 fcec 	bl	8008354 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800497c:	1d3b      	adds	r3, r7, #4
 800497e:	2200      	movs	r2, #0
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	605a      	str	r2, [r3, #4]
 8004984:	609a      	str	r2, [r3, #8]
 8004986:	60da      	str	r2, [r3, #12]
 8004988:	611a      	str	r2, [r3, #16]

    // Initializes the CPU, AHB and APB busses clocks
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800498a:	2302      	movs	r3, #2
 800498c:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800498e:	2301      	movs	r3, #1
 8004990:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004992:	2310      	movs	r3, #16
 8004994:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004996:	2302      	movs	r3, #2
 8004998:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800499a:	2300      	movs	r3, #0
 800499c:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800499e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80049a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80049a4:	f107 0318 	add.w	r3, r7, #24
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7ff f86b 	bl	8003a84 <HAL_RCC_OscConfig>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <SystemClock_Config+0x50>
        Error_Handler();
 80049b4:	f000 f938 	bl	8004c28 <Error_Handler>

    // Initializes the CPU, AHB and APB busses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049b8:	230f      	movs	r3, #15
 80049ba:	607b      	str	r3, [r7, #4]
        |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80049bc:	2302      	movs	r3, #2
 80049be:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049c0:	2300      	movs	r3, #0
 80049c2:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80049c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049c8:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80049ca:	2300      	movs	r3, #0
 80049cc:	617b      	str	r3, [r7, #20]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80049ce:	1d3b      	adds	r3, r7, #4
 80049d0:	2102      	movs	r1, #2
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff fad6 	bl	8003f84 <HAL_RCC_ClockConfig>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <SystemClock_Config+0x7a>
        Error_Handler();
 80049de:	f000 f923 	bl	8004c28 <Error_Handler>

}
 80049e2:	bf00      	nop
 80049e4:	3740      	adds	r7, #64	; 0x40
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
	...

080049ec <MX_I2C1_Init>:


// I2C1 Initialization
void MX_I2C1_Init(void) {
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0

    // Exit if already done
    if (i2c1Initialized)
 80049f0:	4b16      	ldr	r3, [pc, #88]	; (8004a4c <MX_I2C1_Init+0x60>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d127      	bne.n	8004a48 <MX_I2C1_Init+0x5c>
        return;
    i2c1Initialized = true;
 80049f8:	4b14      	ldr	r3, [pc, #80]	; (8004a4c <MX_I2C1_Init+0x60>)
 80049fa:	2201      	movs	r2, #1
 80049fc:	701a      	strb	r2, [r3, #0]

// Primary initialization
    hi2c1.Instance = I2C1;
 80049fe:	4b14      	ldr	r3, [pc, #80]	; (8004a50 <MX_I2C1_Init+0x64>)
 8004a00:	4a14      	ldr	r2, [pc, #80]	; (8004a54 <MX_I2C1_Init+0x68>)
 8004a02:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 8004a04:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <MX_I2C1_Init+0x64>)
 8004a06:	4a14      	ldr	r2, [pc, #80]	; (8004a58 <MX_I2C1_Init+0x6c>)
 8004a08:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004a0a:	4b11      	ldr	r3, [pc, #68]	; (8004a50 <MX_I2C1_Init+0x64>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8004a10:	4b0f      	ldr	r3, [pc, #60]	; (8004a50 <MX_I2C1_Init+0x64>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004a16:	4b0e      	ldr	r3, [pc, #56]	; (8004a50 <MX_I2C1_Init+0x64>)
 8004a18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a1c:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004a1e:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <MX_I2C1_Init+0x64>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8004a24:	4b0a      	ldr	r3, [pc, #40]	; (8004a50 <MX_I2C1_Init+0x64>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004a2a:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <MX_I2C1_Init+0x64>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004a30:	4b07      	ldr	r3, [pc, #28]	; (8004a50 <MX_I2C1_Init+0x64>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004a36:	4806      	ldr	r0, [pc, #24]	; (8004a50 <MX_I2C1_Init+0x64>)
 8004a38:	f7fc fcc4 	bl	80013c4 <HAL_I2C_Init>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <MX_I2C1_Init+0x5e>
        Error_Handler();
 8004a42:	f000 f8f1 	bl	8004c28 <Error_Handler>
 8004a46:	e000      	b.n	8004a4a <MX_I2C1_Init+0x5e>
        return;
 8004a48:	bf00      	nop

}
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	20000258 	.word	0x20000258
 8004a50:	200004c8 	.word	0x200004c8
 8004a54:	40005400 	.word	0x40005400
 8004a58:	000186a0 	.word	0x000186a0

08004a5c <MX_I2C1_DeInit>:

// I2C1 De-initialization
void MX_I2C1_DeInit(void) {
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0

    // Exit if already done
    if (!i2c1Initialized)
 8004a60:	4b07      	ldr	r3, [pc, #28]	; (8004a80 <MX_I2C1_DeInit+0x24>)
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	f083 0301 	eor.w	r3, r3, #1
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d106      	bne.n	8004a7c <MX_I2C1_DeInit+0x20>
        return;
    i2c1Initialized = false;
 8004a6e:	4b04      	ldr	r3, [pc, #16]	; (8004a80 <MX_I2C1_DeInit+0x24>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	701a      	strb	r2, [r3, #0]

    // Deinitialize
    HAL_I2C_DeInit(&hi2c1);
 8004a74:	4803      	ldr	r0, [pc, #12]	; (8004a84 <MX_I2C1_DeInit+0x28>)
 8004a76:	f7fc fdcd 	bl	8001614 <HAL_I2C_DeInit>
 8004a7a:	e000      	b.n	8004a7e <MX_I2C1_DeInit+0x22>
        return;
 8004a7c:	bf00      	nop

}
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	20000258 	.word	0x20000258
 8004a84:	200004c8 	.word	0x200004c8

08004a88 <MY_UART_IRQHandler>:
    HAL_UART_Receive_IT(&huart1, (uint8_t *) &serialInterruptBuffer, sizeof(serialInterruptBuffer));

}

// USART1 IRQ handler
void MY_UART_IRQHandler(UART_HandleTypeDef *huart) {
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]

    // See if the transfer is completed
    if (huart->RxXferCount == 0) {
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d12c      	bne.n	8004af4 <MY_UART_IRQHandler+0x6c>
        if (serialFillIndex < sizeof(serialBuffer)) {
 8004a9a:	4b1b      	ldr	r3, [pc, #108]	; (8004b08 <MY_UART_IRQHandler+0x80>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aa2:	d216      	bcs.n	8004ad2 <MY_UART_IRQHandler+0x4a>
            if (serialFillIndex+1 == serialDrainIndex)
 8004aa4:	4b18      	ldr	r3, [pc, #96]	; (8004b08 <MY_UART_IRQHandler+0x80>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	4b18      	ldr	r3, [pc, #96]	; (8004b0c <MY_UART_IRQHandler+0x84>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d105      	bne.n	8004abe <MY_UART_IRQHandler+0x36>
                serialOverruns++;
 8004ab2:	4b17      	ldr	r3, [pc, #92]	; (8004b10 <MY_UART_IRQHandler+0x88>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	4a15      	ldr	r2, [pc, #84]	; (8004b10 <MY_UART_IRQHandler+0x88>)
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	e01a      	b.n	8004af4 <MY_UART_IRQHandler+0x6c>
            else
                serialBuffer[serialFillIndex++] = serialInterruptBuffer[0];
 8004abe:	4b12      	ldr	r3, [pc, #72]	; (8004b08 <MY_UART_IRQHandler+0x80>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	4910      	ldr	r1, [pc, #64]	; (8004b08 <MY_UART_IRQHandler+0x80>)
 8004ac6:	600a      	str	r2, [r1, #0]
 8004ac8:	4a12      	ldr	r2, [pc, #72]	; (8004b14 <MY_UART_IRQHandler+0x8c>)
 8004aca:	7811      	ldrb	r1, [r2, #0]
 8004acc:	4a12      	ldr	r2, [pc, #72]	; (8004b18 <MY_UART_IRQHandler+0x90>)
 8004ace:	54d1      	strb	r1, [r2, r3]
 8004ad0:	e010      	b.n	8004af4 <MY_UART_IRQHandler+0x6c>
        } else {
            if (serialDrainIndex == 1)
 8004ad2:	4b0e      	ldr	r3, [pc, #56]	; (8004b0c <MY_UART_IRQHandler+0x84>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d105      	bne.n	8004ae6 <MY_UART_IRQHandler+0x5e>
                serialOverruns++;
 8004ada:	4b0d      	ldr	r3, [pc, #52]	; (8004b10 <MY_UART_IRQHandler+0x88>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	4a0b      	ldr	r2, [pc, #44]	; (8004b10 <MY_UART_IRQHandler+0x88>)
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	e006      	b.n	8004af4 <MY_UART_IRQHandler+0x6c>
            else {
                serialBuffer[0] = serialInterruptBuffer[0];
 8004ae6:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <MY_UART_IRQHandler+0x8c>)
 8004ae8:	781a      	ldrb	r2, [r3, #0]
 8004aea:	4b0b      	ldr	r3, [pc, #44]	; (8004b18 <MY_UART_IRQHandler+0x90>)
 8004aec:	701a      	strb	r2, [r3, #0]
                serialFillIndex = 1;
 8004aee:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <MY_UART_IRQHandler+0x80>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // Start another receive
    HAL_UART_Receive_IT(&huart1, (uint8_t *) &serialInterruptBuffer, sizeof(serialInterruptBuffer));
 8004af4:	2201      	movs	r2, #1
 8004af6:	4907      	ldr	r1, [pc, #28]	; (8004b14 <MY_UART_IRQHandler+0x8c>)
 8004af8:	4808      	ldr	r0, [pc, #32]	; (8004b1c <MY_UART_IRQHandler+0x94>)
 8004afa:	f7ff fbcb 	bl	8004294 <HAL_UART_Receive_IT>

}
 8004afe:	bf00      	nop
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20000260 	.word	0x20000260
 8004b0c:	20000264 	.word	0x20000264
 8004b10:	20000268 	.word	0x20000268
 8004b14:	2000025c 	.word	0x2000025c
 8004b18:	2000026c 	.word	0x2000026c
 8004b1c:	2000051c 	.word	0x2000051c

08004b20 <MX_GPIO_Init>:
    HAL_UART_DeInit(&huart1);

}

// GPIO initialization
void MX_GPIO_Init(void) {
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b26:	f107 0310 	add.w	r3, r7, #16
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	605a      	str	r2, [r3, #4]
 8004b30:	609a      	str	r2, [r3, #8]
 8004b32:	60da      	str	r2, [r3, #12]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b34:	4b33      	ldr	r3, [pc, #204]	; (8004c04 <MX_GPIO_Init+0xe4>)
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	4a32      	ldr	r2, [pc, #200]	; (8004c04 <MX_GPIO_Init+0xe4>)
 8004b3a:	f043 0310 	orr.w	r3, r3, #16
 8004b3e:	6193      	str	r3, [r2, #24]
 8004b40:	4b30      	ldr	r3, [pc, #192]	; (8004c04 <MX_GPIO_Init+0xe4>)
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	f003 0310 	and.w	r3, r3, #16
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b4c:	4b2d      	ldr	r3, [pc, #180]	; (8004c04 <MX_GPIO_Init+0xe4>)
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	4a2c      	ldr	r2, [pc, #176]	; (8004c04 <MX_GPIO_Init+0xe4>)
 8004b52:	f043 0320 	orr.w	r3, r3, #32
 8004b56:	6193      	str	r3, [r2, #24]
 8004b58:	4b2a      	ldr	r3, [pc, #168]	; (8004c04 <MX_GPIO_Init+0xe4>)
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	f003 0320 	and.w	r3, r3, #32
 8004b60:	60bb      	str	r3, [r7, #8]
 8004b62:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b64:	4b27      	ldr	r3, [pc, #156]	; (8004c04 <MX_GPIO_Init+0xe4>)
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	4a26      	ldr	r2, [pc, #152]	; (8004c04 <MX_GPIO_Init+0xe4>)
 8004b6a:	f043 0304 	orr.w	r3, r3, #4
 8004b6e:	6193      	str	r3, [r2, #24]
 8004b70:	4b24      	ldr	r3, [pc, #144]	; (8004c04 <MX_GPIO_Init+0xe4>)
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	607b      	str	r3, [r7, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b7c:	4b21      	ldr	r3, [pc, #132]	; (8004c04 <MX_GPIO_Init+0xe4>)
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	4a20      	ldr	r2, [pc, #128]	; (8004c04 <MX_GPIO_Init+0xe4>)
 8004b82:	f043 0308 	orr.w	r3, r3, #8
 8004b86:	6193      	str	r3, [r2, #24]
 8004b88:	4b1e      	ldr	r3, [pc, #120]	; (8004c04 <MX_GPIO_Init+0xe4>)
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	f003 0308 	and.w	r3, r3, #8
 8004b90:	603b      	str	r3, [r7, #0]
 8004b92:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004b94:	2200      	movs	r2, #0
 8004b96:	2120      	movs	r1, #32
 8004b98:	481b      	ldr	r0, [pc, #108]	; (8004c08 <MX_GPIO_Init+0xe8>)
 8004b9a:	f7fc fbe3 	bl	8001364 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 8004b9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ba2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004ba4:	4b19      	ldr	r3, [pc, #100]	; (8004c0c <MX_GPIO_Init+0xec>)
 8004ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004bac:	f107 0310 	add.w	r3, r7, #16
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4817      	ldr	r0, [pc, #92]	; (8004c10 <MX_GPIO_Init+0xf0>)
 8004bb4:	f7fc f9c0 	bl	8000f38 <HAL_GPIO_Init>

    /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004bb8:	230c      	movs	r3, #12
 8004bba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bc4:	f107 0310 	add.w	r3, r7, #16
 8004bc8:	4619      	mov	r1, r3
 8004bca:	480f      	ldr	r0, [pc, #60]	; (8004c08 <MX_GPIO_Init+0xe8>)
 8004bcc:	f7fc f9b4 	bl	8000f38 <HAL_GPIO_Init>

    /*Configure GPIO pin : LD2_Pin */
    GPIO_InitStruct.Pin = LD2_Pin;
 8004bd0:	2320      	movs	r3, #32
 8004bd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bdc:	2302      	movs	r3, #2
 8004bde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004be0:	f107 0310 	add.w	r3, r7, #16
 8004be4:	4619      	mov	r1, r3
 8004be6:	4808      	ldr	r0, [pc, #32]	; (8004c08 <MX_GPIO_Init+0xe8>)
 8004be8:	f7fc f9a6 	bl	8000f38 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004bec:	2200      	movs	r2, #0
 8004bee:	2100      	movs	r1, #0
 8004bf0:	2028      	movs	r0, #40	; 0x28
 8004bf2:	f7fc f8da 	bl	8000daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004bf6:	2028      	movs	r0, #40	; 0x28
 8004bf8:	f7fc f8f3 	bl	8000de2 <HAL_NVIC_EnableIRQ>

}
 8004bfc:	bf00      	nop
 8004bfe:	3720      	adds	r7, #32
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40021000 	.word	0x40021000
 8004c08:	40010800 	.word	0x40010800
 8004c0c:	10110000 	.word	0x10110000
 8004c10:	40011000 	.word	0x40011000

08004c14 <HAL_GPIO_EXTI_Callback>:

// Called when a GPIO interrupt occurs
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	80fb      	strh	r3, [r7, #6]
#ifdef EVENT_BUTTON
    if ((GPIO_Pin & GPIO_BUTTON_PIN) != 0)
        event(EVENT_BUTTON);
#endif

}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bc80      	pop	{r7}
 8004c26:	4770      	bx	lr

08004c28 <Error_Handler>:

// Primary HAL error handler
void Error_Handler(void) {
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
}
 8004c2c:	bf00      	nop
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bc80      	pop	{r7}
 8004c32:	4770      	bx	lr

08004c34 <delay>:
void assert_failed(char *file, uint32_t line) {
}
#endif

// Computationally-delay the specified number of milliseconds
void delay(uint32_t ms) {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7fb ff99 	bl	8000b74 <HAL_Delay>
}
 8004c42:	bf00      	nop
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <millis>:

// Get the number of app milliseconds since boot (this will wrap)
long unsigned int millis() {
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	af00      	add	r7, sp, #0
    return (long unsigned int) HAL_GetTick();
 8004c4e:	f7fb ff87 	bl	8000b60 <HAL_GetTick>
 8004c52:	4603      	mov	r3, r0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <noteI2CReset>:
    }
    return data;
}

// I2C reset procedure, called before any I/O and called again upon I/O error
void noteI2CReset() {
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
    MX_I2C1_DeInit();
 8004c5c:	f7ff fefe 	bl	8004a5c <MX_I2C1_DeInit>
    MX_I2C1_Init();
 8004c60:	f7ff fec4 	bl	80049ec <MX_I2C1_Init>
}
 8004c64:	bf00      	nop
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <noteI2CTransmit>:

// Transmits in master mode an amount of data, in blocking mode.     The address
// is the actual address; the caller should have shifted it right so that the
// low bit is NOT the read/write bit. An error message is returned, else NULL if success.
const char *noteI2CTransmit(uint16_t DevAddress, uint8_t* pBuffer, uint16_t Size) {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b088      	sub	sp, #32
 8004c6c:	af02      	add	r7, sp, #8
 8004c6e:	4603      	mov	r3, r0
 8004c70:	6039      	str	r1, [r7, #0]
 8004c72:	80fb      	strh	r3, [r7, #6]
 8004c74:	4613      	mov	r3, r2
 8004c76:	80bb      	strh	r3, [r7, #4]
    char *errstr = NULL;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	617b      	str	r3, [r7, #20]
    int writelen = sizeof(uint8_t) + Size;
 8004c7c:	88bb      	ldrh	r3, [r7, #4]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	613b      	str	r3, [r7, #16]
    uint8_t *writebuf = malloc(writelen);
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f003 fb1f 	bl	80082c8 <malloc>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	60fb      	str	r3, [r7, #12]
    if (writebuf == NULL) {
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d102      	bne.n	8004c9a <noteI2CTransmit+0x32>
        errstr = "i2c: insufficient memory (write)";
 8004c94:	4b14      	ldr	r3, [pc, #80]	; (8004ce8 <noteI2CTransmit+0x80>)
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	e020      	b.n	8004cdc <noteI2CTransmit+0x74>
    } else {
        writebuf[0] = Size;
 8004c9a:	88bb      	ldrh	r3, [r7, #4]
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	701a      	strb	r2, [r3, #0]
        memcpy(&writebuf[1], pBuffer, Size);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	88ba      	ldrh	r2, [r7, #4]
 8004ca8:	6839      	ldr	r1, [r7, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f003 fb2e 	bl	800830c <memcpy>
        HAL_StatusTypeDef err_code = HAL_I2C_Master_Transmit(&hi2c1, DevAddress<<1, writebuf, writelen, 250);
 8004cb0:	88fb      	ldrh	r3, [r7, #6]
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	b299      	uxth	r1, r3
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	23fa      	movs	r3, #250	; 0xfa
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	480a      	ldr	r0, [pc, #40]	; (8004cec <noteI2CTransmit+0x84>)
 8004cc4:	f7fc fcd6 	bl	8001674 <HAL_I2C_Master_Transmit>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	72fb      	strb	r3, [r7, #11]
        free(writebuf);
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f003 fb03 	bl	80082d8 <free>
        if (err_code != HAL_OK) {
 8004cd2:	7afb      	ldrb	r3, [r7, #11]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <noteI2CTransmit+0x74>
            errstr = "i2c: write error";
 8004cd8:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <noteI2CTransmit+0x88>)
 8004cda:	617b      	str	r3, [r7, #20]
        }
    }
    return errstr;
 8004cdc:	697b      	ldr	r3, [r7, #20]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	08008cb8 	.word	0x08008cb8
 8004cec:	200004c8 	.word	0x200004c8
 8004cf0:	08008cdc 	.word	0x08008cdc

08004cf4 <noteI2CReceive>:

// Receives in master mode an amount of data in blocking mode. An error mesage returned, else NULL if success.
const char *noteI2CReceive(uint16_t DevAddress, uint8_t* pBuffer, uint16_t Size, uint32_t *available) {
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b08e      	sub	sp, #56	; 0x38
 8004cf8:	af02      	add	r7, sp, #8
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	607b      	str	r3, [r7, #4]
 8004cfe:	4603      	mov	r3, r0
 8004d00:	81fb      	strh	r3, [r7, #14]
 8004d02:	4613      	mov	r3, r2
 8004d04:	81bb      	strh	r3, [r7, #12]
    const char *errstr = NULL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_StatusTypeDef err_code;

    // Retry transmit errors several times, because it's harmless to do so
    for (int i=0; i<3; i++) {
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d0e:	e01e      	b.n	8004d4e <noteI2CReceive+0x5a>
        uint8_t hdr[2];
        hdr[0] = (uint8_t) 0;
 8004d10:	2300      	movs	r3, #0
 8004d12:	753b      	strb	r3, [r7, #20]
        hdr[1] = (uint8_t) Size;
 8004d14:	89bb      	ldrh	r3, [r7, #12]
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	757b      	strb	r3, [r7, #21]
        HAL_StatusTypeDef err_code = HAL_I2C_Master_Transmit(&hi2c1, DevAddress<<1, hdr, sizeof(hdr), 250);
 8004d1a:	89fb      	ldrh	r3, [r7, #14]
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	b299      	uxth	r1, r3
 8004d20:	f107 0214 	add.w	r2, r7, #20
 8004d24:	23fa      	movs	r3, #250	; 0xfa
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	2302      	movs	r3, #2
 8004d2a:	482d      	ldr	r0, [pc, #180]	; (8004de0 <noteI2CReceive+0xec>)
 8004d2c:	f7fc fca2 	bl	8001674 <HAL_I2C_Master_Transmit>
 8004d30:	4603      	mov	r3, r0
 8004d32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (err_code == HAL_OK) {
 8004d36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d102      	bne.n	8004d44 <noteI2CReceive+0x50>
            errstr = NULL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d42:	e007      	b.n	8004d54 <noteI2CReceive+0x60>
            break;
        }
        errstr = "i2c: write error";
 8004d44:	4b27      	ldr	r3, [pc, #156]	; (8004de4 <noteI2CReceive+0xf0>)
 8004d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int i=0; i<3; i++) {
 8004d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	dddd      	ble.n	8004d10 <noteI2CReceive+0x1c>
    }

    // Only receive if we successfully began transmission
    if (errstr == NULL) {
 8004d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d13d      	bne.n	8004dd6 <noteI2CReceive+0xe2>

        int readlen = Size + (sizeof(uint8_t)*2);
 8004d5a:	89bb      	ldrh	r3, [r7, #12]
 8004d5c:	3302      	adds	r3, #2
 8004d5e:	623b      	str	r3, [r7, #32]
        uint8_t *readbuf = malloc(readlen);
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f003 fab0 	bl	80082c8 <malloc>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	61fb      	str	r3, [r7, #28]
        if (readbuf == NULL) {
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d102      	bne.n	8004d78 <noteI2CReceive+0x84>
            errstr = "i2c: insufficient memory (read)";
 8004d72:	4b1d      	ldr	r3, [pc, #116]	; (8004de8 <noteI2CReceive+0xf4>)
 8004d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d76:	e02e      	b.n	8004dd6 <noteI2CReceive+0xe2>
        } else {
            err_code = HAL_I2C_Master_Receive(&hi2c1, DevAddress<<1, readbuf, readlen, 10);
 8004d78:	89fb      	ldrh	r3, [r7, #14]
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	b299      	uxth	r1, r3
 8004d7e:	6a3b      	ldr	r3, [r7, #32]
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	230a      	movs	r3, #10
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	4613      	mov	r3, r2
 8004d88:	69fa      	ldr	r2, [r7, #28]
 8004d8a:	4815      	ldr	r0, [pc, #84]	; (8004de0 <noteI2CReceive+0xec>)
 8004d8c:	f7fc fd70 	bl	8001870 <HAL_I2C_Master_Receive>
 8004d90:	4603      	mov	r3, r0
 8004d92:	76fb      	strb	r3, [r7, #27]
            if (err_code != HAL_OK) {
 8004d94:	7efb      	ldrb	r3, [r7, #27]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d002      	beq.n	8004da0 <noteI2CReceive+0xac>
                errstr = "i2c: read error";
 8004d9a:	4b14      	ldr	r3, [pc, #80]	; (8004dec <noteI2CReceive+0xf8>)
 8004d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d9e:	e017      	b.n	8004dd0 <noteI2CReceive+0xdc>
            } else {
                uint8_t availbyte = readbuf[0];
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	76bb      	strb	r3, [r7, #26]
                uint8_t goodbyte = readbuf[1];
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	785b      	ldrb	r3, [r3, #1]
 8004daa:	767b      	strb	r3, [r7, #25]
                if (goodbyte != Size) {
 8004dac:	7e7b      	ldrb	r3, [r7, #25]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	89ba      	ldrh	r2, [r7, #12]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d002      	beq.n	8004dbc <noteI2CReceive+0xc8>
                    errstr = "i2c: incorrect amount of data";
 8004db6:	4b0e      	ldr	r3, [pc, #56]	; (8004df0 <noteI2CReceive+0xfc>)
 8004db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dba:	e009      	b.n	8004dd0 <noteI2CReceive+0xdc>
                } else {
                    *available = availbyte;
 8004dbc:	7eba      	ldrb	r2, [r7, #26]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	601a      	str	r2, [r3, #0]
                    memcpy(pBuffer, &readbuf[2], Size);
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	3302      	adds	r3, #2
 8004dc6:	89ba      	ldrh	r2, [r7, #12]
 8004dc8:	4619      	mov	r1, r3
 8004dca:	68b8      	ldr	r0, [r7, #8]
 8004dcc:	f003 fa9e 	bl	800830c <memcpy>
                }
            }
            free(readbuf);
 8004dd0:	69f8      	ldr	r0, [r7, #28]
 8004dd2:	f003 fa81 	bl	80082d8 <free>
        }
    }

    // Done
    return errstr;
 8004dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3730      	adds	r7, #48	; 0x30
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	200004c8 	.word	0x200004c8
 8004de4:	08008cdc 	.word	0x08008cdc
 8004de8:	08008cf0 	.word	0x08008cf0
 8004dec:	08008d10 	.word	0x08008d10
 8004df0:	08008d20 	.word	0x08008d20

08004df4 <HAL_MspInit>:
// copyright holder including that found in the LICENSE file.

#include "main.h"

// Initialize global peripheral init
void HAL_MspInit(void) {
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
    __HAL_RCC_AFIO_CLK_ENABLE();
 8004dfa:	4b15      	ldr	r3, [pc, #84]	; (8004e50 <HAL_MspInit+0x5c>)
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	4a14      	ldr	r2, [pc, #80]	; (8004e50 <HAL_MspInit+0x5c>)
 8004e00:	f043 0301 	orr.w	r3, r3, #1
 8004e04:	6193      	str	r3, [r2, #24]
 8004e06:	4b12      	ldr	r3, [pc, #72]	; (8004e50 <HAL_MspInit+0x5c>)
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	60bb      	str	r3, [r7, #8]
 8004e10:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e12:	4b0f      	ldr	r3, [pc, #60]	; (8004e50 <HAL_MspInit+0x5c>)
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	4a0e      	ldr	r2, [pc, #56]	; (8004e50 <HAL_MspInit+0x5c>)
 8004e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e1c:	61d3      	str	r3, [r2, #28]
 8004e1e:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <HAL_MspInit+0x5c>)
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e26:	607b      	str	r3, [r7, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
    // NOJTAG: JTAG-DP Disabled and SW-DP Enabled
    __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004e2a:	4b0a      	ldr	r3, [pc, #40]	; (8004e54 <HAL_MspInit+0x60>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	4a04      	ldr	r2, [pc, #16]	; (8004e54 <HAL_MspInit+0x60>)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6053      	str	r3, [r2, #4]
}
 8004e46:	bf00      	nop
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bc80      	pop	{r7}
 8004e4e:	4770      	bx	lr
 8004e50:	40021000 	.word	0x40021000
 8004e54:	40010000 	.word	0x40010000

08004e58 <HAL_I2C_MspInit>:

// Initialize all I2C ports
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c) {
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08a      	sub	sp, #40	; 0x28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]

    if (hi2c->Instance==I2C1) {
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a28      	ldr	r2, [pc, #160]	; (8004f08 <HAL_I2C_MspInit+0xb0>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d149      	bne.n	8004efe <HAL_I2C_MspInit+0xa6>
        GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e6a:	f107 0314 	add.w	r3, r7, #20
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	605a      	str	r2, [r3, #4]
 8004e74:	609a      	str	r2, [r3, #8]
 8004e76:	60da      	str	r2, [r3, #12]

        //*I2C1 GPIO Configuration
        // PB8     ------> I2C1_SCL
        // PB9     ------> I2C1_SDA
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e78:	4b24      	ldr	r3, [pc, #144]	; (8004f0c <HAL_I2C_MspInit+0xb4>)
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	4a23      	ldr	r2, [pc, #140]	; (8004f0c <HAL_I2C_MspInit+0xb4>)
 8004e7e:	f043 0308 	orr.w	r3, r3, #8
 8004e82:	6193      	str	r3, [r2, #24]
 8004e84:	4b21      	ldr	r3, [pc, #132]	; (8004f0c <HAL_I2C_MspInit+0xb4>)
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	613b      	str	r3, [r7, #16]
 8004e8e:	693b      	ldr	r3, [r7, #16]
        GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004e90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004e94:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e96:	2312      	movs	r3, #18
 8004e98:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	623b      	str	r3, [r7, #32]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e9e:	f107 0314 	add.w	r3, r7, #20
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	481a      	ldr	r0, [pc, #104]	; (8004f10 <HAL_I2C_MspInit+0xb8>)
 8004ea6:	f7fc f847 	bl	8000f38 <HAL_GPIO_Init>
        __HAL_AFIO_REMAP_I2C1_ENABLE();
 8004eaa:	4b1a      	ldr	r3, [pc, #104]	; (8004f14 <HAL_I2C_MspInit+0xbc>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	f043 0302 	orr.w	r3, r3, #2
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec0:	4a14      	ldr	r2, [pc, #80]	; (8004f14 <HAL_I2C_MspInit+0xbc>)
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	6053      	str	r3, [r2, #4]

        // Peripheral clock enable
        __HAL_RCC_I2C1_CLK_ENABLE();
 8004ec6:	4b11      	ldr	r3, [pc, #68]	; (8004f0c <HAL_I2C_MspInit+0xb4>)
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	4a10      	ldr	r2, [pc, #64]	; (8004f0c <HAL_I2C_MspInit+0xb4>)
 8004ecc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ed0:	61d3      	str	r3, [r2, #28]
 8004ed2:	4b0e      	ldr	r3, [pc, #56]	; (8004f0c <HAL_I2C_MspInit+0xb4>)
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	68fb      	ldr	r3, [r7, #12]

        // I2C1 interrupt Init
        HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004ede:	2200      	movs	r2, #0
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	201f      	movs	r0, #31
 8004ee4:	f7fb ff61 	bl	8000daa <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004ee8:	201f      	movs	r0, #31
 8004eea:	f7fb ff7a 	bl	8000de2 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004eee:	2200      	movs	r2, #0
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	2020      	movs	r0, #32
 8004ef4:	f7fb ff59 	bl	8000daa <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004ef8:	2020      	movs	r0, #32
 8004efa:	f7fb ff72 	bl	8000de2 <HAL_NVIC_EnableIRQ>

    }

}
 8004efe:	bf00      	nop
 8004f00:	3728      	adds	r7, #40	; 0x28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	40005400 	.word	0x40005400
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	40010c00 	.word	0x40010c00
 8004f14:	40010000 	.word	0x40010000

08004f18 <HAL_I2C_MspDeInit>:

// Deinitialize all I2C ports
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c) {
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]

    if (hi2c->Instance==I2C1) {
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a0b      	ldr	r2, [pc, #44]	; (8004f54 <HAL_I2C_MspDeInit+0x3c>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d110      	bne.n	8004f4c <HAL_I2C_MspDeInit+0x34>

        // Peripheral clock disable
        __HAL_RCC_I2C1_CLK_DISABLE();
 8004f2a:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <HAL_I2C_MspDeInit+0x40>)
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	4a0a      	ldr	r2, [pc, #40]	; (8004f58 <HAL_I2C_MspDeInit+0x40>)
 8004f30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f34:	61d3      	str	r3, [r2, #28]

        //*I2C1 GPIO Configuration
        // PB8     ------> I2C1_SCL
        // PB9     ------> I2C1_SDA
        HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8004f36:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004f3a:	4808      	ldr	r0, [pc, #32]	; (8004f5c <HAL_I2C_MspDeInit+0x44>)
 8004f3c:	f7fc f956 	bl	80011ec <HAL_GPIO_DeInit>

        // I2C1 interrupt DeInit
        HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8004f40:	201f      	movs	r0, #31
 8004f42:	f7fb ff5c 	bl	8000dfe <HAL_NVIC_DisableIRQ>
        HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8004f46:	2020      	movs	r0, #32
 8004f48:	f7fb ff59 	bl	8000dfe <HAL_NVIC_DisableIRQ>

    }

}
 8004f4c:	bf00      	nop
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	40005400 	.word	0x40005400
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	40010c00 	.word	0x40010c00

08004f60 <NMI_Handler>:
extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart1;
extern void MY_UART_IRQHandler(UART_HandleTypeDef *huart);

// Cortex-M4 non-maskable interrupt
void NMI_Handler(void) {
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
}
 8004f64:	bf00      	nop
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bc80      	pop	{r7}
 8004f6a:	4770      	bx	lr

08004f6c <HardFault_Handler>:

// Cortex-M4 hardware fault interrupt
void HardFault_Handler(void) {
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
    while (1) ;
 8004f70:	e7fe      	b.n	8004f70 <HardFault_Handler+0x4>

08004f72 <MemManage_Handler>:
}

// Memory management fault
void MemManage_Handler(void) {
 8004f72:	b480      	push	{r7}
 8004f74:	af00      	add	r7, sp, #0
    while (1) ;
 8004f76:	e7fe      	b.n	8004f76 <MemManage_Handler+0x4>

08004f78 <BusFault_Handler>:
}

// Prefetch or memory access fault
void BusFault_Handler(void) {
 8004f78:	b480      	push	{r7}
 8004f7a:	af00      	add	r7, sp, #0
    while (1) ;
 8004f7c:	e7fe      	b.n	8004f7c <BusFault_Handler+0x4>

08004f7e <UsageFault_Handler>:
}

// Undefined instruction or illegal state
void UsageFault_Handler(void) {
 8004f7e:	b480      	push	{r7}
 8004f80:	af00      	add	r7, sp, #0
    while (1) ;
 8004f82:	e7fe      	b.n	8004f82 <UsageFault_Handler+0x4>

08004f84 <SVC_Handler>:
}

// System service call via SWI instruction
void SVC_Handler(void) {
 8004f84:	b480      	push	{r7}
 8004f86:	af00      	add	r7, sp, #0
}
 8004f88:	bf00      	nop
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bc80      	pop	{r7}
 8004f8e:	4770      	bx	lr

08004f90 <DebugMon_Handler>:

// Debug monitor
void DebugMon_Handler(void) {
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
}
 8004f94:	bf00      	nop
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	4770      	bx	lr

08004f9c <PendSV_Handler>:

// Pendable request for system service.
void PendSV_Handler(void) {
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
}
 8004fa0:	bf00      	nop
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bc80      	pop	{r7}
 8004fa6:	4770      	bx	lr

08004fa8 <SysTick_Handler>:

// System tick timer
void SysTick_Handler(void) {
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8004fac:	f7fb fdc6 	bl	8000b3c <HAL_IncTick>
}
 8004fb0:	bf00      	nop
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <I2C1_EV_IRQHandler>:

// IC21 event interrupt
void I2C1_EV_IRQHandler(void) {
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8004fb8:	4802      	ldr	r0, [pc, #8]	; (8004fc4 <I2C1_EV_IRQHandler+0x10>)
 8004fba:	f7fc fe87 	bl	8001ccc <HAL_I2C_EV_IRQHandler>
}
 8004fbe:	bf00      	nop
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	200004c8 	.word	0x200004c8

08004fc8 <I2C1_ER_IRQHandler>:

// I2C1 error interrupt
void I2C1_ER_IRQHandler(void) {
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8004fcc:	4802      	ldr	r0, [pc, #8]	; (8004fd8 <I2C1_ER_IRQHandler+0x10>)
 8004fce:	f7fc ffe3 	bl	8001f98 <HAL_I2C_ER_IRQHandler>
}
 8004fd2:	bf00      	nop
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	200004c8 	.word	0x200004c8

08004fdc <USART1_IRQHandler>:

// USART1 global interrupt
void USART1_IRQHandler(void) {
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart1);
 8004fe0:	4803      	ldr	r0, [pc, #12]	; (8004ff0 <USART1_IRQHandler+0x14>)
 8004fe2:	f7ff f9ab 	bl	800433c <HAL_UART_IRQHandler>
    MY_UART_IRQHandler(&huart1);
 8004fe6:	4802      	ldr	r0, [pc, #8]	; (8004ff0 <USART1_IRQHandler+0x14>)
 8004fe8:	f7ff fd4e 	bl	8004a88 <MY_UART_IRQHandler>
}
 8004fec:	bf00      	nop
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	2000051c 	.word	0x2000051c

08004ff4 <EXTI0_IRQHandler>:

// Interrupt handlers
void EXTI0_IRQHandler( void ) {
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004ff8:	2001      	movs	r0, #1
 8004ffa:	f7fc f9cb 	bl	8001394 <HAL_GPIO_EXTI_IRQHandler>
}
 8004ffe:	bf00      	nop
 8005000:	bd80      	pop	{r7, pc}

08005002 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler( void ) {
 8005002:	b580      	push	{r7, lr}
 8005004:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8005006:	2002      	movs	r0, #2
 8005008:	f7fc f9c4 	bl	8001394 <HAL_GPIO_EXTI_IRQHandler>
}
 800500c:	bf00      	nop
 800500e:	bd80      	pop	{r7, pc}

08005010 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler( void ) {
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005014:	2004      	movs	r0, #4
 8005016:	f7fc f9bd 	bl	8001394 <HAL_GPIO_EXTI_IRQHandler>
}
 800501a:	bf00      	nop
 800501c:	bd80      	pop	{r7, pc}

0800501e <EXTI3_IRQHandler>:
void EXTI3_IRQHandler( void ) {
 800501e:	b580      	push	{r7, lr}
 8005020:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005022:	2008      	movs	r0, #8
 8005024:	f7fc f9b6 	bl	8001394 <HAL_GPIO_EXTI_IRQHandler>
}
 8005028:	bf00      	nop
 800502a:	bd80      	pop	{r7, pc}

0800502c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler( void ) {
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005030:	2010      	movs	r0, #16
 8005032:	f7fc f9af 	bl	8001394 <HAL_GPIO_EXTI_IRQHandler>
}
 8005036:	bf00      	nop
 8005038:	bd80      	pop	{r7, pc}
	...

0800503c <MY_GPIO_EXTI_IRQHandler>:
// GPIO handler, enhanced from the base ST handler in a way that enables us to distinguish from the multiple
// pins that sharing the same EXTI.
void MY_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin) {
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	4603      	mov	r3, r0
 8005044:	80fb      	strh	r3, [r7, #6]
    if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) {
 8005046:	4b0b      	ldr	r3, [pc, #44]	; (8005074 <MY_GPIO_EXTI_IRQHandler+0x38>)
 8005048:	695a      	ldr	r2, [r3, #20]
 800504a:	88fb      	ldrh	r3, [r7, #6]
 800504c:	4013      	ands	r3, r2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00c      	beq.n	800506c <MY_GPIO_EXTI_IRQHandler+0x30>
        uint16_t GPIO_Line = GPIO_Pin & EXTI->PR;
 8005052:	4b08      	ldr	r3, [pc, #32]	; (8005074 <MY_GPIO_EXTI_IRQHandler+0x38>)
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	b29a      	uxth	r2, r3
 8005058:	88fb      	ldrh	r3, [r7, #6]
 800505a:	4013      	ands	r3, r2
 800505c:	81fb      	strh	r3, [r7, #14]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800505e:	4a05      	ldr	r2, [pc, #20]	; (8005074 <MY_GPIO_EXTI_IRQHandler+0x38>)
 8005060:	88fb      	ldrh	r3, [r7, #6]
 8005062:	6153      	str	r3, [r2, #20]
        HAL_GPIO_EXTI_Callback(GPIO_Line);
 8005064:	89fb      	ldrh	r3, [r7, #14]
 8005066:	4618      	mov	r0, r3
 8005068:	f7ff fdd4 	bl	8004c14 <HAL_GPIO_EXTI_Callback>
    }
}
 800506c:	bf00      	nop
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40010400 	.word	0x40010400

08005078 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler( void ) {
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
  MY_GPIO_EXTI_IRQHandler(GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5);
 800507c:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 8005080:	f7ff ffdc 	bl	800503c <MY_GPIO_EXTI_IRQHandler>
}
 8005084:	bf00      	nop
 8005086:	bd80      	pop	{r7, pc}

08005088 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler( void ) {
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
  MY_GPIO_EXTI_IRQHandler(GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10);
 800508c:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
 8005090:	f7ff ffd4 	bl	800503c <MY_GPIO_EXTI_IRQHandler>
}
 8005094:	bf00      	nop
 8005096:	bd80      	pop	{r7, pc}

08005098 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80050a0:	4b11      	ldr	r3, [pc, #68]	; (80050e8 <_sbrk+0x50>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d102      	bne.n	80050ae <_sbrk+0x16>
		heap_end = &end;
 80050a8:	4b0f      	ldr	r3, [pc, #60]	; (80050e8 <_sbrk+0x50>)
 80050aa:	4a10      	ldr	r2, [pc, #64]	; (80050ec <_sbrk+0x54>)
 80050ac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80050ae:	4b0e      	ldr	r3, [pc, #56]	; (80050e8 <_sbrk+0x50>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80050b4:	4b0c      	ldr	r3, [pc, #48]	; (80050e8 <_sbrk+0x50>)
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4413      	add	r3, r2
 80050bc:	466a      	mov	r2, sp
 80050be:	4293      	cmp	r3, r2
 80050c0:	d907      	bls.n	80050d2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80050c2:	f003 f8c9 	bl	8008258 <__errno>
 80050c6:	4602      	mov	r2, r0
 80050c8:	230c      	movs	r3, #12
 80050ca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80050cc:	f04f 33ff 	mov.w	r3, #4294967295
 80050d0:	e006      	b.n	80050e0 <_sbrk+0x48>
	}

	heap_end += incr;
 80050d2:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <_sbrk+0x50>)
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4413      	add	r3, r2
 80050da:	4a03      	ldr	r2, [pc, #12]	; (80050e8 <_sbrk+0x50>)
 80050dc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80050de:	68fb      	ldr	r3, [r7, #12]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	2000046c 	.word	0x2000046c
 80050ec:	20000560 	.word	0x20000560

080050f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80050f0:	b480      	push	{r7}
 80050f2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80050f4:	4b15      	ldr	r3, [pc, #84]	; (800514c <SystemInit+0x5c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a14      	ldr	r2, [pc, #80]	; (800514c <SystemInit+0x5c>)
 80050fa:	f043 0301 	orr.w	r3, r3, #1
 80050fe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005100:	4b12      	ldr	r3, [pc, #72]	; (800514c <SystemInit+0x5c>)
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	4911      	ldr	r1, [pc, #68]	; (800514c <SystemInit+0x5c>)
 8005106:	4b12      	ldr	r3, [pc, #72]	; (8005150 <SystemInit+0x60>)
 8005108:	4013      	ands	r3, r2
 800510a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800510c:	4b0f      	ldr	r3, [pc, #60]	; (800514c <SystemInit+0x5c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a0e      	ldr	r2, [pc, #56]	; (800514c <SystemInit+0x5c>)
 8005112:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800511a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800511c:	4b0b      	ldr	r3, [pc, #44]	; (800514c <SystemInit+0x5c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a0a      	ldr	r2, [pc, #40]	; (800514c <SystemInit+0x5c>)
 8005122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005126:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005128:	4b08      	ldr	r3, [pc, #32]	; (800514c <SystemInit+0x5c>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	4a07      	ldr	r2, [pc, #28]	; (800514c <SystemInit+0x5c>)
 800512e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005132:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005134:	4b05      	ldr	r3, [pc, #20]	; (800514c <SystemInit+0x5c>)
 8005136:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800513a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800513c:	4b05      	ldr	r3, [pc, #20]	; (8005154 <SystemInit+0x64>)
 800513e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005142:	609a      	str	r2, [r3, #8]
#endif 
}
 8005144:	bf00      	nop
 8005146:	46bd      	mov	sp, r7
 8005148:	bc80      	pop	{r7}
 800514a:	4770      	bx	lr
 800514c:	40021000 	.word	0x40021000
 8005150:	f8ff0000 	.word	0xf8ff0000
 8005154:	e000ed00 	.word	0xe000ed00

08005158 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005158:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800515a:	e003      	b.n	8005164 <LoopCopyDataInit>

0800515c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800515c:	4b0b      	ldr	r3, [pc, #44]	; (800518c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800515e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005160:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005162:	3104      	adds	r1, #4

08005164 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005164:	480a      	ldr	r0, [pc, #40]	; (8005190 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005166:	4b0b      	ldr	r3, [pc, #44]	; (8005194 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005168:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800516a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800516c:	d3f6      	bcc.n	800515c <CopyDataInit>
  ldr r2, =_sbss
 800516e:	4a0a      	ldr	r2, [pc, #40]	; (8005198 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005170:	e002      	b.n	8005178 <LoopFillZerobss>

08005172 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005172:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005174:	f842 3b04 	str.w	r3, [r2], #4

08005178 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005178:	4b08      	ldr	r3, [pc, #32]	; (800519c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800517a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800517c:	d3f9      	bcc.n	8005172 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800517e:	f7ff ffb7 	bl	80050f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005182:	f003 f86f 	bl	8008264 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005186:	f7ff fbc5 	bl	8004914 <main>
  bx lr
 800518a:	4770      	bx	lr
  ldr r3, =_sidata
 800518c:	08009108 	.word	0x08009108
  ldr r0, =_sdata
 8005190:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005194:	20000238 	.word	0x20000238
  ldr r2, =_sbss
 8005198:	20000238 	.word	0x20000238
  ldr r3, = _ebss
 800519c:	20000560 	.word	0x20000560

080051a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80051a0:	e7fe      	b.n	80051a0 <ADC1_2_IRQHandler>
 80051a2:	0000      	movs	r0, r0
 80051a4:	0000      	movs	r0, r0
	...

080051a8 <JAtoN>:
                                 * The "E" may actually be an "e".  E and X
                                 * may both be omitted (but not just one).
                                 */
    char **endPtr;              /* If non-NULL, store terminating character's
                                 * address here. */
{
 80051a8:	b5b0      	push	{r4, r5, r7, lr}
 80051aa:	b092      	sub	sp, #72	; 0x48
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
    int sign, expSign = FALSE;
 80051b2:	2300      	movs	r3, #0
 80051b4:	643b      	str	r3, [r7, #64]	; 0x40
    double fraction, dblExp, *d;
    register const char *p;
    register int c;
    int exp = 0;                /* Exponent read from "EX" field. */
 80051b6:	2300      	movs	r3, #0
 80051b8:	62bb      	str	r3, [r7, #40]	; 0x28
    int fracExp = 0;            /* Exponent that derives from the fractional
 80051ba:	2300      	movs	r3, #0
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24

    /*
     * Strip off leading blanks and check for a sign.
     */

    p = string;
 80051be:	68fc      	ldr	r4, [r7, #12]
    while (*p == ' ') {
 80051c0:	e000      	b.n	80051c4 <JAtoN+0x1c>
        p += 1;
 80051c2:	3401      	adds	r4, #1
    while (*p == ' ') {
 80051c4:	7823      	ldrb	r3, [r4, #0]
 80051c6:	2b20      	cmp	r3, #32
 80051c8:	d0fb      	beq.n	80051c2 <JAtoN+0x1a>
    }
    if (*p == '-') {
 80051ca:	7823      	ldrb	r3, [r4, #0]
 80051cc:	2b2d      	cmp	r3, #45	; 0x2d
 80051ce:	d103      	bne.n	80051d8 <JAtoN+0x30>
        sign = TRUE;
 80051d0:	2301      	movs	r3, #1
 80051d2:	647b      	str	r3, [r7, #68]	; 0x44
        p += 1;
 80051d4:	3401      	adds	r4, #1
 80051d6:	e005      	b.n	80051e4 <JAtoN+0x3c>
    } else {
        if (*p == '+') {
 80051d8:	7823      	ldrb	r3, [r4, #0]
 80051da:	2b2b      	cmp	r3, #43	; 0x2b
 80051dc:	d100      	bne.n	80051e0 <JAtoN+0x38>
            p += 1;
 80051de:	3401      	adds	r4, #1
        }
        sign = FALSE;
 80051e0:	2300      	movs	r3, #0
 80051e2:	647b      	str	r3, [r7, #68]	; 0x44
    /*
     * Count the number of digits in the mantissa (including the decimal
     * point), and also locate the decimal point.
     */

    decPt = -1;
 80051e4:	f04f 33ff 	mov.w	r3, #4294967295
 80051e8:	61fb      	str	r3, [r7, #28]
    for (mantSize = 0; ; mantSize += 1)
 80051ea:	2300      	movs	r3, #0
 80051ec:	623b      	str	r3, [r7, #32]
    {
        c = *p;
 80051ee:	7823      	ldrb	r3, [r4, #0]
 80051f0:	461d      	mov	r5, r3
        if (c < '0' || c > '9') {
 80051f2:	2d2f      	cmp	r5, #47	; 0x2f
 80051f4:	dd01      	ble.n	80051fa <JAtoN+0x52>
 80051f6:	2d39      	cmp	r5, #57	; 0x39
 80051f8:	dd06      	ble.n	8005208 <JAtoN+0x60>
            if ((c != '.') || (decPt >= 0)) {
 80051fa:	2d2e      	cmp	r5, #46	; 0x2e
 80051fc:	d109      	bne.n	8005212 <JAtoN+0x6a>
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	2b00      	cmp	r3, #0
 8005202:	da06      	bge.n	8005212 <JAtoN+0x6a>
                break;
            }
            decPt = mantSize;
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	61fb      	str	r3, [r7, #28]
        }
        p += 1;
 8005208:	3401      	adds	r4, #1
    for (mantSize = 0; ; mantSize += 1)
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	3301      	adds	r3, #1
 800520e:	623b      	str	r3, [r7, #32]
        c = *p;
 8005210:	e7ed      	b.n	80051ee <JAtoN+0x46>
     * collect 9 digits each (this is faster than using floating-point).
     * If the mantissa has more than 18 digits, ignore the extras, since
     * they can't affect the value anyway.
     */
    
    pExp  = p;
 8005212:	613c      	str	r4, [r7, #16]
    p -= mantSize;
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	425b      	negs	r3, r3
 8005218:	441c      	add	r4, r3
    if (decPt < 0) {
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	2b00      	cmp	r3, #0
 800521e:	da02      	bge.n	8005226 <JAtoN+0x7e>
        decPt = mantSize;
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	61fb      	str	r3, [r7, #28]
 8005224:	e002      	b.n	800522c <JAtoN+0x84>
    } else {
        mantSize -= 1;                  /* One of the digits was the point. */
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	3b01      	subs	r3, #1
 800522a:	623b      	str	r3, [r7, #32]
    }
    if (mantSize > 18) {
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	2b12      	cmp	r3, #18
 8005230:	dd05      	ble.n	800523e <JAtoN+0x96>
        fracExp = decPt - 18;
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	3b12      	subs	r3, #18
 8005236:	627b      	str	r3, [r7, #36]	; 0x24
        mantSize = 18;
 8005238:	2312      	movs	r3, #18
 800523a:	623b      	str	r3, [r7, #32]
 800523c:	e003      	b.n	8005246 <JAtoN+0x9e>
    } else {
        fracExp = decPt - mantSize;
 800523e:	69fa      	ldr	r2, [r7, #28]
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (mantSize == 0) {
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d107      	bne.n	800525c <JAtoN+0xb4>
        fraction = 0.0;
 800524c:	f04f 0300 	mov.w	r3, #0
 8005250:	f04f 0400 	mov.w	r4, #0
 8005254:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
        p = string;
 8005258:	68fc      	ldr	r4, [r7, #12]
        goto done;
 800525a:	e0cd      	b.n	80053f8 <JAtoN+0x250>
    } else {
        long frac1, frac2;
        frac1 = 0L;
 800525c:	2300      	movs	r3, #0
 800525e:	61bb      	str	r3, [r7, #24]
        for ( ; mantSize > 9; mantSize -= 1)
 8005260:	e014      	b.n	800528c <JAtoN+0xe4>
        {
            c = *p;
 8005262:	7823      	ldrb	r3, [r4, #0]
 8005264:	461d      	mov	r5, r3
            p += 1;
 8005266:	3401      	adds	r4, #1
            if (c == '.') {
 8005268:	2d2e      	cmp	r5, #46	; 0x2e
 800526a:	d102      	bne.n	8005272 <JAtoN+0xca>
                c = *p;
 800526c:	7823      	ldrb	r3, [r4, #0]
 800526e:	461d      	mov	r5, r3
                p += 1;
 8005270:	3401      	adds	r4, #1
            }
            frac1 = 10*frac1 + (c - '0');
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	4613      	mov	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	461a      	mov	r2, r3
 800527e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8005282:	4413      	add	r3, r2
 8005284:	61bb      	str	r3, [r7, #24]
        for ( ; mantSize > 9; mantSize -= 1)
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	3b01      	subs	r3, #1
 800528a:	623b      	str	r3, [r7, #32]
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	2b09      	cmp	r3, #9
 8005290:	dce7      	bgt.n	8005262 <JAtoN+0xba>
        }
        frac2 = 0L;
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]
        for (; mantSize > 0; mantSize -= 1)
 8005296:	e014      	b.n	80052c2 <JAtoN+0x11a>
        {
            c = *p;
 8005298:	7823      	ldrb	r3, [r4, #0]
 800529a:	461d      	mov	r5, r3
            p += 1;
 800529c:	3401      	adds	r4, #1
            if (c == '.') {
 800529e:	2d2e      	cmp	r5, #46	; 0x2e
 80052a0:	d102      	bne.n	80052a8 <JAtoN+0x100>
                c = *p;
 80052a2:	7823      	ldrb	r3, [r4, #0]
 80052a4:	461d      	mov	r5, r3
                p += 1;
 80052a6:	3401      	adds	r4, #1
            }
            frac2 = 10*frac2 + (c - '0');
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	4613      	mov	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	461a      	mov	r2, r3
 80052b4:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80052b8:	4413      	add	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]
        for (; mantSize > 0; mantSize -= 1)
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	3b01      	subs	r3, #1
 80052c0:	623b      	str	r3, [r7, #32]
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	dce7      	bgt.n	8005298 <JAtoN+0xf0>
        }
        fraction = (1.0e9 * frac1) + frac2;
 80052c8:	69b8      	ldr	r0, [r7, #24]
 80052ca:	f7fb f8a5 	bl	8000418 <__aeabi_i2d>
 80052ce:	a358      	add	r3, pc, #352	; (adr r3, 8005430 <JAtoN+0x288>)
 80052d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d4:	f7fb f90a 	bl	80004ec <__aeabi_dmul>
 80052d8:	4603      	mov	r3, r0
 80052da:	460c      	mov	r4, r1
 80052dc:	4625      	mov	r5, r4
 80052de:	461c      	mov	r4, r3
 80052e0:	6978      	ldr	r0, [r7, #20]
 80052e2:	f7fb f899 	bl	8000418 <__aeabi_i2d>
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	4620      	mov	r0, r4
 80052ec:	4629      	mov	r1, r5
 80052ee:	f7fa ff47 	bl	8000180 <__adddf3>
 80052f2:	4603      	mov	r3, r0
 80052f4:	460c      	mov	r4, r1
 80052f6:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

    /*
     * Skim off the exponent.
     */

    p = pExp;
 80052fa:	693c      	ldr	r4, [r7, #16]
    if ((*p == 'E') || (*p == 'e')) {
 80052fc:	7823      	ldrb	r3, [r4, #0]
 80052fe:	2b45      	cmp	r3, #69	; 0x45
 8005300:	d002      	beq.n	8005308 <JAtoN+0x160>
 8005302:	7823      	ldrb	r3, [r4, #0]
 8005304:	2b65      	cmp	r3, #101	; 0x65
 8005306:	d11f      	bne.n	8005348 <JAtoN+0x1a0>
        p += 1;
 8005308:	3401      	adds	r4, #1
        if (*p == '-') {
 800530a:	7823      	ldrb	r3, [r4, #0]
 800530c:	2b2d      	cmp	r3, #45	; 0x2d
 800530e:	d103      	bne.n	8005318 <JAtoN+0x170>
            expSign = TRUE;
 8005310:	2301      	movs	r3, #1
 8005312:	643b      	str	r3, [r7, #64]	; 0x40
            p += 1;
 8005314:	3401      	adds	r4, #1
 8005316:	e011      	b.n	800533c <JAtoN+0x194>
        } else {
            if (*p == '+') {
 8005318:	7823      	ldrb	r3, [r4, #0]
 800531a:	2b2b      	cmp	r3, #43	; 0x2b
 800531c:	d100      	bne.n	8005320 <JAtoN+0x178>
                p += 1;
 800531e:	3401      	adds	r4, #1
            }
            expSign = FALSE;
 8005320:	2300      	movs	r3, #0
 8005322:	643b      	str	r3, [r7, #64]	; 0x40
        }
        while (*p >= '0' && *p <= '9') {
 8005324:	e00a      	b.n	800533c <JAtoN+0x194>
            exp = exp * 10 + (*p - '0');
 8005326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005328:	4613      	mov	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	461a      	mov	r2, r3
 8005332:	7823      	ldrb	r3, [r4, #0]
 8005334:	3b30      	subs	r3, #48	; 0x30
 8005336:	4413      	add	r3, r2
 8005338:	62bb      	str	r3, [r7, #40]	; 0x28
            p += 1;
 800533a:	3401      	adds	r4, #1
        while (*p >= '0' && *p <= '9') {
 800533c:	7823      	ldrb	r3, [r4, #0]
 800533e:	2b2f      	cmp	r3, #47	; 0x2f
 8005340:	d902      	bls.n	8005348 <JAtoN+0x1a0>
 8005342:	7823      	ldrb	r3, [r4, #0]
 8005344:	2b39      	cmp	r3, #57	; 0x39
 8005346:	d9ee      	bls.n	8005326 <JAtoN+0x17e>
        }
    }
    if (expSign) {
 8005348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800534a:	2b00      	cmp	r3, #0
 800534c:	d004      	beq.n	8005358 <JAtoN+0x1b0>
        exp = fracExp - exp;
 800534e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	62bb      	str	r3, [r7, #40]	; 0x28
 8005356:	e003      	b.n	8005360 <JAtoN+0x1b8>
    } else {
        exp = fracExp + exp;
 8005358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	4413      	add	r3, r2
 800535e:	62bb      	str	r3, [r7, #40]	; 0x28
     * Do this by processing the exponent one bit at a time to combine
     * many powers of 2 of 10. Then combine the exponent with the
     * fraction.
     */
    
    if (exp < 0) {
 8005360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005362:	2b00      	cmp	r3, #0
 8005364:	da05      	bge.n	8005372 <JAtoN+0x1ca>
        expSign = TRUE;
 8005366:	2301      	movs	r3, #1
 8005368:	643b      	str	r3, [r7, #64]	; 0x40
        exp = -exp;
 800536a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536c:	425b      	negs	r3, r3
 800536e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005370:	e001      	b.n	8005376 <JAtoN+0x1ce>
    } else {
        expSign = FALSE;
 8005372:	2300      	movs	r3, #0
 8005374:	643b      	str	r3, [r7, #64]	; 0x40
    }
    if (exp > maxExponent) {
 8005376:	4b30      	ldr	r3, [pc, #192]	; (8005438 <JAtoN+0x290>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800537c:	429a      	cmp	r2, r3
 800537e:	dd02      	ble.n	8005386 <JAtoN+0x1de>
        exp = maxExponent;
 8005380:	4b2d      	ldr	r3, [pc, #180]	; (8005438 <JAtoN+0x290>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    dblExp = 1.0;
 8005386:	f04f 0200 	mov.w	r2, #0
 800538a:	4b2c      	ldr	r3, [pc, #176]	; (800543c <JAtoN+0x294>)
 800538c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    for (d = powersOf10; exp != 0; exp >>= 1, d += 1) {
 8005390:	4b2b      	ldr	r3, [pc, #172]	; (8005440 <JAtoN+0x298>)
 8005392:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005394:	e015      	b.n	80053c2 <JAtoN+0x21a>
        if (exp & 01) {
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00a      	beq.n	80053b6 <JAtoN+0x20e>
            dblExp *= *d;
 80053a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80053aa:	f7fb f89f 	bl	80004ec <__aeabi_dmul>
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    for (d = powersOf10; exp != 0; exp >>= 1, d += 1) {
 80053b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b8:	105b      	asrs	r3, r3, #1
 80053ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80053bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053be:	3308      	adds	r3, #8
 80053c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1e6      	bne.n	8005396 <JAtoN+0x1ee>
        }
    }
    if (expSign) {
 80053c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <JAtoN+0x23c>
        fraction /= dblExp;
 80053ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80053d2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80053d6:	f7fb f9b3 	bl	8000740 <__aeabi_ddiv>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80053e2:	e009      	b.n	80053f8 <JAtoN+0x250>
    } else {
        fraction *= dblExp;
 80053e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80053e8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80053ec:	f7fb f87e 	bl	80004ec <__aeabi_dmul>
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }

done:
    if (endPtr != NULL) {
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <JAtoN+0x25a>
        *endPtr = (char *) p;
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	601c      	str	r4, [r3, #0]
    }

    if (sign) {
 8005402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005404:	2b00      	cmp	r3, #0
 8005406:	d006      	beq.n	8005416 <JAtoN+0x26e>
        return -fraction;
 8005408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540a:	603b      	str	r3, [r7, #0]
 800540c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800540e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005412:	607b      	str	r3, [r7, #4]
 8005414:	e003      	b.n	800541e <JAtoN+0x276>
    }
    return fraction;
 8005416:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800541a:	e9c7 3400 	strd	r3, r4, [r7]
 800541e:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8005422:	4618      	mov	r0, r3
 8005424:	4621      	mov	r1, r4
 8005426:	3748      	adds	r7, #72	; 0x48
 8005428:	46bd      	mov	sp, r7
 800542a:	bdb0      	pop	{r4, r5, r7, pc}
 800542c:	f3af 8000 	nop.w
 8005430:	00000000 	.word	0x00000000
 8005434:	41cdcd65 	.word	0x41cdcd65
 8005438:	2000000c 	.word	0x2000000c
 800543c:	3ff00000 	.word	0x3ff00000
 8005440:	20000010 	.word	0x20000010

08005444 <case_insensitive_strcmp>:
    return STRINGIFY(N_CJSON_VERSION_MAJOR) "." STRINGIFY(N_CJSON_VERSION_MINOR) "." STRINGIFY(N_CJSON_VERSION_PATCH);
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8005444:	b590      	push	{r4, r7, lr}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <case_insensitive_strcmp+0x16>
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800545a:	2301      	movs	r3, #1
 800545c:	e05e      	b.n	800551c <case_insensitive_strcmp+0xd8>
    }

    if (string1 == string2)
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	429a      	cmp	r2, r3
 8005464:	d10d      	bne.n	8005482 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8005466:	2300      	movs	r3, #0
 8005468:	e058      	b.n	800551c <case_insensitive_strcmp+0xd8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <case_insensitive_strcmp+0x32>
        {
            return 0;
 8005472:	2300      	movs	r3, #0
 8005474:	e052      	b.n	800551c <case_insensitive_strcmp+0xd8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	3301      	adds	r3, #1
 800547a:	607b      	str	r3, [r7, #4]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	3301      	adds	r3, #1
 8005480:	603b      	str	r3, [r7, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	73fb      	strb	r3, [r7, #15]
 8005488:	f002 ff10 	bl	80082ac <__locale_ctype_ptr>
 800548c:	4602      	mov	r2, r0
 800548e:	7bfb      	ldrb	r3, [r7, #15]
 8005490:	3301      	adds	r3, #1
 8005492:	4413      	add	r3, r2
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	f003 0303 	and.w	r3, r3, #3
 800549a:	2b01      	cmp	r3, #1
 800549c:	d103      	bne.n	80054a6 <case_insensitive_strcmp+0x62>
 800549e:	7bfb      	ldrb	r3, [r7, #15]
 80054a0:	f103 0420 	add.w	r4, r3, #32
 80054a4:	e000      	b.n	80054a8 <case_insensitive_strcmp+0x64>
 80054a6:	7bfc      	ldrb	r4, [r7, #15]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	73bb      	strb	r3, [r7, #14]
 80054ae:	f002 fefd 	bl	80082ac <__locale_ctype_ptr>
 80054b2:	4602      	mov	r2, r0
 80054b4:	7bbb      	ldrb	r3, [r7, #14]
 80054b6:	3301      	adds	r3, #1
 80054b8:	4413      	add	r3, r2
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	f003 0303 	and.w	r3, r3, #3
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d102      	bne.n	80054ca <case_insensitive_strcmp+0x86>
 80054c4:	7bbb      	ldrb	r3, [r7, #14]
 80054c6:	3320      	adds	r3, #32
 80054c8:	e000      	b.n	80054cc <case_insensitive_strcmp+0x88>
 80054ca:	7bbb      	ldrb	r3, [r7, #14]
 80054cc:	429c      	cmp	r4, r3
 80054ce:	d0cc      	beq.n	800546a <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	737b      	strb	r3, [r7, #13]
 80054d6:	f002 fee9 	bl	80082ac <__locale_ctype_ptr>
 80054da:	4602      	mov	r2, r0
 80054dc:	7b7b      	ldrb	r3, [r7, #13]
 80054de:	3301      	adds	r3, #1
 80054e0:	4413      	add	r3, r2
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	f003 0303 	and.w	r3, r3, #3
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d103      	bne.n	80054f4 <case_insensitive_strcmp+0xb0>
 80054ec:	7b7b      	ldrb	r3, [r7, #13]
 80054ee:	f103 0420 	add.w	r4, r3, #32
 80054f2:	e000      	b.n	80054f6 <case_insensitive_strcmp+0xb2>
 80054f4:	7b7c      	ldrb	r4, [r7, #13]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	733b      	strb	r3, [r7, #12]
 80054fc:	f002 fed6 	bl	80082ac <__locale_ctype_ptr>
 8005500:	4602      	mov	r2, r0
 8005502:	7b3b      	ldrb	r3, [r7, #12]
 8005504:	3301      	adds	r3, #1
 8005506:	4413      	add	r3, r2
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	2b01      	cmp	r3, #1
 8005510:	d102      	bne.n	8005518 <case_insensitive_strcmp+0xd4>
 8005512:	7b3b      	ldrb	r3, [r7, #12]
 8005514:	3320      	adds	r3, #32
 8005516:	e000      	b.n	800551a <case_insensitive_strcmp+0xd6>
 8005518:	7b3b      	ldrb	r3, [r7, #12]
 800551a:	1ae3      	subs	r3, r4, r3
}
 800551c:	4618      	mov	r0, r3
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	bd90      	pop	{r4, r7, pc}

08005524 <Jstrdup>:

static internal_hooks default_hooks = { internal_malloc, internal_free, internal_realloc };
static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* Jstrdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 800552e:	2300      	movs	r3, #0
 8005530:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8005532:	2300      	movs	r3, #0
 8005534:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <Jstrdup+0x1c>
    {
        return NULL;
 800553c:	2300      	movs	r3, #0
 800553e:	e015      	b.n	800556c <Jstrdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7fa fe0f 	bl	8000164 <strlen>
 8005546:	4603      	mov	r3, r0
 8005548:	3301      	adds	r3, #1
 800554a:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	4798      	blx	r3
 8005554:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <Jstrdup+0x3c>
    {
        return NULL;
 800555c:	2300      	movs	r3, #0
 800555e:	e005      	b.n	800556c <Jstrdup+0x48>
    }
    memcpy(copy, string, length);
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	6879      	ldr	r1, [r7, #4]
 8005564:	68b8      	ldr	r0, [r7, #8]
 8005566:	f002 fed1 	bl	800830c <memcpy>

    return copy;
 800556a:	68bb      	ldr	r3, [r7, #8]
}
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <JFree>:
}

N_CJSON_PUBLIC(void *) JMalloc(size_t size) {
    return global_hooks.allocate(size);
}
N_CJSON_PUBLIC(void) JFree(void *p) {
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
    global_hooks.deallocate(p);
 800557c:	4b03      	ldr	r3, [pc, #12]	; (800558c <JFree+0x18>)
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	4798      	blx	r3
}
 8005584:	bf00      	nop
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	20000058 	.word	0x20000058

08005590 <JNew_Item>:

/* Internal constructor. */
static J *JNew_Item(const internal_hooks * const hooks)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
    J* node = (J*)hooks->allocate(sizeof(J));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2028      	movs	r0, #40	; 0x28
 800559e:	4798      	blx	r3
 80055a0:	60f8      	str	r0, [r7, #12]
    if (node)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d004      	beq.n	80055b2 <JNew_Item+0x22>
    {
        memset(node, '\0', sizeof(J));
 80055a8:	2228      	movs	r2, #40	; 0x28
 80055aa:	2100      	movs	r1, #0
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f002 fed1 	bl	8008354 <memset>
    }

    return node;
 80055b2:	68fb      	ldr	r3, [r7, #12]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <JDelete>:

/* Delete a J structure. */
N_CJSON_PUBLIC(void) JDelete(J *item)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
    J *next = NULL;
 80055c4:	2300      	movs	r3, #0
 80055c6:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 80055c8:	e037      	b.n	800563a <JDelete+0x7e>
    {
        next = item->next;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	60fb      	str	r3, [r7, #12]
        if (!(item->type & JIsReference) && (item->child != NULL))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d108      	bne.n	80055ee <JDelete+0x32>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d004      	beq.n	80055ee <JDelete+0x32>
        {
            JDelete(item->child);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7ff ffe7 	bl	80055bc <JDelete>
        }
        if (!(item->type & JIsReference) && (item->valuestring != NULL))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d109      	bne.n	800560e <JDelete+0x52>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d005      	beq.n	800560e <JDelete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8005602:	4b11      	ldr	r3, [pc, #68]	; (8005648 <JDelete+0x8c>)
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6912      	ldr	r2, [r2, #16]
 800560a:	4610      	mov	r0, r2
 800560c:	4798      	blx	r3
        }
        if (!(item->type & JStringIsConst) && (item->string != NULL))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005616:	2b00      	cmp	r3, #0
 8005618:	d109      	bne.n	800562e <JDelete+0x72>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d005      	beq.n	800562e <JDelete+0x72>
        {
            global_hooks.deallocate(item->string);
 8005622:	4b09      	ldr	r3, [pc, #36]	; (8005648 <JDelete+0x8c>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6a12      	ldr	r2, [r2, #32]
 800562a:	4610      	mov	r0, r2
 800562c:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 800562e:	4b06      	ldr	r3, [pc, #24]	; (8005648 <JDelete+0x8c>)
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	4798      	blx	r3
        item = next;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1c4      	bne.n	80055ca <JDelete+0xe>
    }
}
 8005640:	bf00      	nop
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	20000058 	.word	0x20000058

0800564c <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8005650:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8005652:	4618      	mov	r0, r3
 8005654:	46bd      	mov	sp, r7
 8005656:	bc80      	pop	{r7}
 8005658:	4770      	bx	lr
 800565a:	0000      	movs	r0, r0
 800565c:	0000      	movs	r0, r0
	...

08005660 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static Jbool parse_number(J * const item, parse_buffer * const input_buffer)
{
 8005660:	b590      	push	{r4, r7, lr}
 8005662:	b099      	sub	sp, #100	; 0x64
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
    double number = 0;
 800566a:	f04f 0300 	mov.w	r3, #0
 800566e:	f04f 0400 	mov.w	r4, #0
 8005672:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8005676:	2300      	movs	r3, #0
 8005678:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800567a:	f7ff ffe7 	bl	800564c <get_decimal_point>
 800567e:	4603      	mov	r3, r0
 8005680:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 8005684:	2300      	movs	r3, #0
 8005686:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <parse_number+0x36>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <parse_number+0x3a>
    {
        return false;
 8005696:	2300      	movs	r3, #0
 8005698:	e104      	b.n	80058a4 <parse_number+0x244>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800569a:	2300      	movs	r3, #0
 800569c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800569e:	e09f      	b.n	80057e0 <parse_number+0x180>
    {
        switch (buffer_at_offset(input_buffer)[i])
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	6899      	ldr	r1, [r3, #8]
 80056a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056aa:	440b      	add	r3, r1
 80056ac:	4413      	add	r3, r2
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	3b2b      	subs	r3, #43	; 0x2b
 80056b2:	2b3a      	cmp	r3, #58	; 0x3a
 80056b4:	f200 80a4 	bhi.w	8005800 <parse_number+0x1a0>
 80056b8:	a201      	add	r2, pc, #4	; (adr r2, 80056c0 <parse_number+0x60>)
 80056ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056be:	bf00      	nop
 80056c0:	080057ad 	.word	0x080057ad
 80056c4:	08005801 	.word	0x08005801
 80056c8:	080057ad 	.word	0x080057ad
 80056cc:	080057cb 	.word	0x080057cb
 80056d0:	08005801 	.word	0x08005801
 80056d4:	080057ad 	.word	0x080057ad
 80056d8:	080057ad 	.word	0x080057ad
 80056dc:	080057ad 	.word	0x080057ad
 80056e0:	080057ad 	.word	0x080057ad
 80056e4:	080057ad 	.word	0x080057ad
 80056e8:	080057ad 	.word	0x080057ad
 80056ec:	080057ad 	.word	0x080057ad
 80056f0:	080057ad 	.word	0x080057ad
 80056f4:	080057ad 	.word	0x080057ad
 80056f8:	080057ad 	.word	0x080057ad
 80056fc:	08005801 	.word	0x08005801
 8005700:	08005801 	.word	0x08005801
 8005704:	08005801 	.word	0x08005801
 8005708:	08005801 	.word	0x08005801
 800570c:	08005801 	.word	0x08005801
 8005710:	08005801 	.word	0x08005801
 8005714:	08005801 	.word	0x08005801
 8005718:	08005801 	.word	0x08005801
 800571c:	08005801 	.word	0x08005801
 8005720:	08005801 	.word	0x08005801
 8005724:	08005801 	.word	0x08005801
 8005728:	080057ad 	.word	0x080057ad
 800572c:	08005801 	.word	0x08005801
 8005730:	08005801 	.word	0x08005801
 8005734:	08005801 	.word	0x08005801
 8005738:	08005801 	.word	0x08005801
 800573c:	08005801 	.word	0x08005801
 8005740:	08005801 	.word	0x08005801
 8005744:	08005801 	.word	0x08005801
 8005748:	08005801 	.word	0x08005801
 800574c:	08005801 	.word	0x08005801
 8005750:	08005801 	.word	0x08005801
 8005754:	08005801 	.word	0x08005801
 8005758:	08005801 	.word	0x08005801
 800575c:	08005801 	.word	0x08005801
 8005760:	08005801 	.word	0x08005801
 8005764:	08005801 	.word	0x08005801
 8005768:	08005801 	.word	0x08005801
 800576c:	08005801 	.word	0x08005801
 8005770:	08005801 	.word	0x08005801
 8005774:	08005801 	.word	0x08005801
 8005778:	08005801 	.word	0x08005801
 800577c:	08005801 	.word	0x08005801
 8005780:	08005801 	.word	0x08005801
 8005784:	08005801 	.word	0x08005801
 8005788:	08005801 	.word	0x08005801
 800578c:	08005801 	.word	0x08005801
 8005790:	08005801 	.word	0x08005801
 8005794:	08005801 	.word	0x08005801
 8005798:	08005801 	.word	0x08005801
 800579c:	08005801 	.word	0x08005801
 80057a0:	08005801 	.word	0x08005801
 80057a4:	08005801 	.word	0x08005801
 80057a8:	080057ad 	.word	0x080057ad
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	6899      	ldr	r1, [r3, #8]
 80057b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057b6:	440b      	add	r3, r1
 80057b8:	4413      	add	r3, r2
 80057ba:	7819      	ldrb	r1, [r3, #0]
 80057bc:	f107 0208 	add.w	r2, r7, #8
 80057c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057c2:	4413      	add	r3, r2
 80057c4:	460a      	mov	r2, r1
 80057c6:	701a      	strb	r2, [r3, #0]
                break;
 80057c8:	e007      	b.n	80057da <parse_number+0x17a>

            case '.':
                number_c_string[i] = decimal_point;
 80057ca:	f107 0208 	add.w	r2, r7, #8
 80057ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057d0:	4413      	add	r3, r2
 80057d2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80057d6:	701a      	strb	r2, [r3, #0]
                break;
 80057d8:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80057da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057dc:	3301      	adds	r3, #1
 80057de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057e2:	2b3e      	cmp	r3, #62	; 0x3e
 80057e4:	d80e      	bhi.n	8005804 <parse_number+0x1a4>
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00b      	beq.n	8005804 <parse_number+0x1a4>
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057f2:	441a      	add	r2, r3
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	f4ff af51 	bcc.w	80056a0 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 80057fe:	e001      	b.n	8005804 <parse_number+0x1a4>
                goto loop_end;
 8005800:	bf00      	nop
 8005802:	e000      	b.n	8005806 <parse_number+0x1a6>
loop_end:
 8005804:	bf00      	nop
    number_c_string[i] = '\0';
 8005806:	f107 0208 	add.w	r2, r7, #8
 800580a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800580c:	4413      	add	r3, r2
 800580e:	2200      	movs	r2, #0
 8005810:	701a      	strb	r2, [r3, #0]

    /* some platforms may not have locale support */
#if !MINIMIZE_CLIB_DEPENDENCIES
    number = strtod((const char*)number_c_string, (char**)&after_end);
#else
    number = JAtoN((const char*)number_c_string, (char**)&after_end);
 8005812:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005816:	f107 0308 	add.w	r3, r7, #8
 800581a:	4611      	mov	r1, r2
 800581c:	4618      	mov	r0, r3
 800581e:	f7ff fcc3 	bl	80051a8 <JAtoN>
 8005822:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
#endif
    if (number_c_string == after_end)
 8005826:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005828:	f107 0308 	add.w	r3, r7, #8
 800582c:	429a      	cmp	r2, r3
 800582e:	d101      	bne.n	8005834 <parse_number+0x1d4>
    {
        return false; /* parse_error */
 8005830:	2300      	movs	r3, #0
 8005832:	e037      	b.n	80058a4 <parse_number+0x244>
    }

    item->valuedouble = number;
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800583a:	e9c2 3406 	strd	r3, r4, [r2, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800583e:	a31c      	add	r3, pc, #112	; (adr r3, 80058b0 <parse_number+0x250>)
 8005840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005844:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005848:	f7fb f8d6 	bl	80009f8 <__aeabi_dcmpge>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d004      	beq.n	800585c <parse_number+0x1fc>
    {
        item->valueint = INT_MAX;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005858:	615a      	str	r2, [r3, #20]
 800585a:	e015      	b.n	8005888 <parse_number+0x228>
    }
    else if (number <= INT_MIN)
 800585c:	f04f 0200 	mov.w	r2, #0
 8005860:	4b15      	ldr	r3, [pc, #84]	; (80058b8 <parse_number+0x258>)
 8005862:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005866:	f7fb f8bd 	bl	80009e4 <__aeabi_dcmple>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d004      	beq.n	800587a <parse_number+0x21a>
    {
        item->valueint = INT_MIN;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005876:	615a      	str	r2, [r3, #20]
 8005878:	e006      	b.n	8005888 <parse_number+0x228>
    }
    else
    {
        item->valueint = (int)number;
 800587a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800587e:	f7fb f8cf 	bl	8000a20 <__aeabi_d2iz>
 8005882:	4602      	mov	r2, r0
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	615a      	str	r2, [r3, #20]
    }

    item->type = JNumber;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2208      	movs	r2, #8
 800588c:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005894:	4611      	mov	r1, r2
 8005896:	f107 0208 	add.w	r2, r7, #8
 800589a:	1a8a      	subs	r2, r1, r2
 800589c:	441a      	add	r2, r3
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	609a      	str	r2, [r3, #8]
    return true;
 80058a2:	2301      	movs	r3, #1
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3764      	adds	r7, #100	; 0x64
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd90      	pop	{r4, r7, pc}
 80058ac:	f3af 8000 	nop.w
 80058b0:	ffc00000 	.word	0xffc00000
 80058b4:	41dfffff 	.word	0x41dfffff
 80058b8:	c1e00000 	.word	0xc1e00000

080058bc <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 80058ca:	2300      	movs	r3, #0
 80058cc:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d003      	beq.n	80058dc <ensure+0x20>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <ensure+0x24>
    {
        return NULL;
 80058dc:	2300      	movs	r3, #0
 80058de:	e086      	b.n	80059ee <ensure+0x132>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d007      	beq.n	80058f8 <ensure+0x3c>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689a      	ldr	r2, [r3, #8]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d301      	bcc.n	80058f8 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 80058f4:	2300      	movs	r3, #0
 80058f6:	e07a      	b.n	80059ee <ensure+0x132>
    }

    if (needed > INT_MAX)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	da01      	bge.n	8005902 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 80058fe:	2300      	movs	r3, #0
 8005900:	e075      	b.n	80059ee <ensure+0x132>
    }

    needed += p->offset + 1;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	4413      	add	r3, r2
 800590a:	3301      	adds	r3, #1
 800590c:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	429a      	cmp	r2, r3
 8005916:	d805      	bhi.n	8005924 <ensure+0x68>
    {
        return p->buffer + p->offset;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	4413      	add	r3, r2
 8005922:	e064      	b.n	80059ee <ensure+0x132>
    }

    if (p->noalloc) {
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <ensure+0x74>
        return NULL;
 800592c:	2300      	movs	r3, #0
 800592e:	e05e      	b.n	80059ee <ensure+0x132>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005936:	d308      	bcc.n	800594a <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	db03      	blt.n	8005946 <ensure+0x8a>
        {
            newsize = INT_MAX;
 800593e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005942:	60bb      	str	r3, [r7, #8]
 8005944:	e004      	b.n	8005950 <ensure+0x94>
        }
        else
        {
            return NULL;
 8005946:	2300      	movs	r3, #0
 8005948:	e051      	b.n	80059ee <ensure+0x132>
        }
    }
    else
    {
        newsize = needed * 2;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d018      	beq.n	800598a <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6812      	ldr	r2, [r2, #0]
 8005960:	68b9      	ldr	r1, [r7, #8]
 8005962:	4610      	mov	r0, r2
 8005964:	4798      	blx	r3
 8005966:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d135      	bne.n	80059da <ensure+0x11e>
        {
            p->hooks.deallocate(p->buffer);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	69db      	ldr	r3, [r3, #28]
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	6812      	ldr	r2, [r2, #0]
 8005976:	4610      	mov	r0, r2
 8005978:	4798      	blx	r3
            p->length = 0;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	601a      	str	r2, [r3, #0]

            return NULL;
 8005986:	2300      	movs	r3, #0
 8005988:	e031      	b.n	80059ee <ensure+0x132>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	68b8      	ldr	r0, [r7, #8]
 8005990:	4798      	blx	r3
 8005992:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10d      	bne.n	80059b6 <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	6812      	ldr	r2, [r2, #0]
 80059a2:	4610      	mov	r0, r2
 80059a4:	4798      	blx	r3
            p->length = 0;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	601a      	str	r2, [r3, #0]

            return NULL;
 80059b2:	2300      	movs	r3, #0
 80059b4:	e01b      	b.n	80059ee <ensure+0x132>
        }
        if (newbuffer)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d008      	beq.n	80059ce <ensure+0x112>
        {
            memcpy(newbuffer, p->buffer, p->offset + 1);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6819      	ldr	r1, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	3301      	adds	r3, #1
 80059c6:	461a      	mov	r2, r3
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f002 fc9f 	bl	800830c <memcpy>
        }
        p->hooks.deallocate(p->buffer);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	6812      	ldr	r2, [r2, #0]
 80059d6:	4610      	mov	r0, r2
 80059d8:	4798      	blx	r3
    }
    p->length = newsize;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	4413      	add	r3, r2
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 80059f6:	b590      	push	{r4, r7, lr}
 80059f8:	b085      	sub	sp, #20
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 80059fe:	2300      	movs	r3, #0
 8005a00:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d013      	beq.n	8005a30 <update_offset+0x3a>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00f      	beq.n	8005a30 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	4413      	add	r3, r2
 8005a1a:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689c      	ldr	r4, [r3, #8]
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f7fa fb9f 	bl	8000164 <strlen>
 8005a26:	4603      	mov	r3, r0
 8005a28:	18e2      	adds	r2, r4, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	609a      	str	r2, [r3, #8]
 8005a2e:	e000      	b.n	8005a32 <update_offset+0x3c>
        return;
 8005a30:	bf00      	nop
}
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd90      	pop	{r4, r7, pc}

08005a38 <print_number>:

/* Render the number nicely from the given item into a string. */
static Jbool print_number(const J * const item, printbuffer * const output_buffer)
{
 8005a38:	b590      	push	{r4, r7, lr}
 8005a3a:	b093      	sub	sp, #76	; 0x4c
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8005a42:	2300      	movs	r3, #0
 8005a44:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f103 0418 	add.w	r4, r3, #24
 8005a4c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005a50:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    int length = 0;
 8005a54:	2300      	movs	r3, #0
 8005a56:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26]; /* temporary buffer to print the number into */
    unsigned char decimal_point = get_decimal_point();
 8005a5c:	f7ff fdf6 	bl	800564c <get_decimal_point>
 8005a60:	4603      	mov	r3, r0
 8005a62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (output_buffer == NULL)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <print_number+0x38>
    {
        return false;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	e074      	b.n	8005b5a <print_number+0x122>
    }

    /* This checks for NaN and Infinity */
    if ((d * 0) != 0)
 8005a70:	f04f 0200 	mov.w	r2, #0
 8005a74:	f04f 0300 	mov.w	r3, #0
 8005a78:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005a7c:	f7fa fd36 	bl	80004ec <__aeabi_dmul>
 8005a80:	4603      	mov	r3, r0
 8005a82:	460c      	mov	r4, r1
 8005a84:	4618      	mov	r0, r3
 8005a86:	4621      	mov	r1, r4
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	f04f 0300 	mov.w	r3, #0
 8005a90:	f7fa ff94 	bl	80009bc <__aeabi_dcmpeq>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10e      	bne.n	8005ab8 <print_number+0x80>
    {
        char *nbuf = (char *) number_buffer;
 8005a9a:	f107 0308 	add.w	r3, r7, #8
 8005a9e:	627b      	str	r3, [r7, #36]	; 0x24
        strcpy(nbuf, "null");
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	4a30      	ldr	r2, [pc, #192]	; (8005b64 <print_number+0x12c>)
 8005aa4:	6810      	ldr	r0, [r2, #0]
 8005aa6:	6018      	str	r0, [r3, #0]
 8005aa8:	7912      	ldrb	r2, [r2, #4]
 8005aaa:	711a      	strb	r2, [r3, #4]
        length = strlen(nbuf);
 8005aac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005aae:	f7fa fb59 	bl	8000164 <strlen>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ab6:	e00e      	b.n	8005ad6 <print_number+0x9e>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
        }
#else
        char *nbuf = (char *) number_buffer;
 8005ab8:	f107 0308 	add.w	r3, r7, #8
 8005abc:	62bb      	str	r3, [r7, #40]	; 0x28
        JNtoA(d, nbuf, -1);
 8005abe:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ac4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005ac8:	f001 fd8e 	bl	80075e8 <JNtoA>
        length = strlen(nbuf);
 8005acc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ace:	f7fa fb49 	bl	8000164 <strlen>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	647b      	str	r3, [r7, #68]	; 0x44
#endif
    }

    /* conversion failed or buffer overrun occured */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8005ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	db02      	blt.n	8005ae2 <print_number+0xaa>
 8005adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ade:	2b19      	cmp	r3, #25
 8005ae0:	dd01      	ble.n	8005ae6 <print_number+0xae>
    {
        return false;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	e039      	b.n	8005b5a <print_number+0x122>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8005ae6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ae8:	3301      	adds	r3, #1
 8005aea:	4619      	mov	r1, r3
 8005aec:	6838      	ldr	r0, [r7, #0]
 8005aee:	f7ff fee5 	bl	80058bc <ensure>
 8005af2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 8005af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <print_number+0xc6>
    {
        return false;
 8005afa:	2300      	movs	r3, #0
 8005afc:	e02d      	b.n	8005b5a <print_number+0x122>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8005afe:	2300      	movs	r3, #0
 8005b00:	643b      	str	r3, [r7, #64]	; 0x40
 8005b02:	e01a      	b.n	8005b3a <print_number+0x102>
    {
        if (number_buffer[i] == decimal_point)
 8005b04:	f107 0208 	add.w	r2, r7, #8
 8005b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b0a:	4413      	add	r3, r2
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d105      	bne.n	8005b22 <print_number+0xea>
        {
            output_pointer[i] = '.';
 8005b16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b1a:	4413      	add	r3, r2
 8005b1c:	222e      	movs	r2, #46	; 0x2e
 8005b1e:	701a      	strb	r2, [r3, #0]
            continue;
 8005b20:	e008      	b.n	8005b34 <print_number+0xfc>
        }

        output_pointer[i] = number_buffer[i];
 8005b22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b26:	4413      	add	r3, r2
 8005b28:	f107 0108 	add.w	r1, r7, #8
 8005b2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b2e:	440a      	add	r2, r1
 8005b30:	7812      	ldrb	r2, [r2, #0]
 8005b32:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8005b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b36:	3301      	adds	r3, #1
 8005b38:	643b      	str	r3, [r7, #64]	; 0x40
 8005b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d3e0      	bcc.n	8005b04 <print_number+0xcc>
    }
    output_pointer[i] = '\0';
 8005b42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b46:	4413      	add	r3, r2
 8005b48:	2200      	movs	r2, #0
 8005b4a:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b52:	441a      	add	r2, r3
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	609a      	str	r2, [r3, #8]

    return true;
 8005b58:	2301      	movs	r3, #1
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	374c      	adds	r7, #76	; 0x4c
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd90      	pop	{r4, r7, pc}
 8005b62:	bf00      	nop
 8005b64:	08008d48 	.word	0x08008d48

08005b68 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8005b70:	2300      	movs	r3, #0
 8005b72:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8005b74:	2300      	movs	r3, #0
 8005b76:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8005b78:	2300      	movs	r3, #0
 8005b7a:	60bb      	str	r3, [r7, #8]
 8005b7c:	e04c      	b.n	8005c18 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	4413      	add	r3, r2
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b2f      	cmp	r3, #47	; 0x2f
 8005b88:	d90f      	bls.n	8005baa <parse_hex4+0x42>
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	4413      	add	r3, r2
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b39      	cmp	r3, #57	; 0x39
 8005b94:	d809      	bhi.n	8005baa <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	3b30      	subs	r3, #48	; 0x30
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	e02d      	b.n	8005c06 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	4413      	add	r3, r2
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	2b40      	cmp	r3, #64	; 0x40
 8005bb4:	d90f      	bls.n	8005bd6 <parse_hex4+0x6e>
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	4413      	add	r3, r2
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	2b46      	cmp	r3, #70	; 0x46
 8005bc0:	d809      	bhi.n	8005bd6 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4413      	add	r3, r2
 8005bd0:	3b37      	subs	r3, #55	; 0x37
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	e017      	b.n	8005c06 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	4413      	add	r3, r2
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b60      	cmp	r3, #96	; 0x60
 8005be0:	d90f      	bls.n	8005c02 <parse_hex4+0x9a>
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	4413      	add	r3, r2
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	2b66      	cmp	r3, #102	; 0x66
 8005bec:	d809      	bhi.n	8005c02 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	3b57      	subs	r3, #87	; 0x57
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	e001      	b.n	8005c06 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8005c02:	2300      	movs	r3, #0
 8005c04:	e00c      	b.n	8005c20 <parse_hex4+0xb8>
        }

        if (i < 3)
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d802      	bhi.n	8005c12 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	011b      	lsls	r3, r3, #4
 8005c10:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	3301      	adds	r3, #1
 8005c16:	60bb      	str	r3, [r7, #8]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d9af      	bls.n	8005b7e <parse_hex4+0x16>
        }
    }

    return h;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bc80      	pop	{r7}
 8005c28:	4770      	bx	lr
	...

08005c2c <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b08a      	sub	sp, #40	; 0x28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8005c44:	2300      	movs	r3, #0
 8005c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 8005c50:	2300      	movs	r3, #0
 8005c52:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 8005c56:	2300      	movs	r3, #0
 8005c58:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b05      	cmp	r3, #5
 8005c64:	f340 80b7 	ble.w	8005dd6 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	3302      	adds	r3, #2
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff ff7b 	bl	8005b68 <parse_hex4>
 8005c72:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8005c7a:	d304      	bcc.n	8005c86 <utf16_literal_to_utf8+0x5a>
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8005c82:	f0c0 80aa 	bcc.w	8005dda <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8005c8c:	d337      	bcc.n	8005cfe <utf16_literal_to_utf8+0xd2>
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8005c94:	d233      	bcs.n	8005cfe <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	3306      	adds	r3, #6
 8005c9a:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8005ca0:	230c      	movs	r3, #12
 8005ca2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b05      	cmp	r3, #5
 8005cae:	f340 8096 	ble.w	8005dde <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	2b5c      	cmp	r3, #92	; 0x5c
 8005cb8:	f040 8093 	bne.w	8005de2 <utf16_literal_to_utf8+0x1b6>
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	2b75      	cmp	r3, #117	; 0x75
 8005cc4:	f040 808d 	bne.w	8005de2 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	3302      	adds	r3, #2
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7ff ff4b 	bl	8005b68 <parse_hex4>
 8005cd2:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8005cda:	f0c0 8082 	bcc.w	8005de2 <utf16_literal_to_utf8+0x1b6>
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8005ce4:	d27d      	bcs.n	8005de2 <utf16_literal_to_utf8+0x1b6>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	029a      	lsls	r2, r3, #10
 8005cea:	4b42      	ldr	r3, [pc, #264]	; (8005df4 <utf16_literal_to_utf8+0x1c8>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005cfa:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8005cfc:	e004      	b.n	8005d08 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8005cfe:	2306      	movs	r3, #6
 8005d00:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8005d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d0c:	d803      	bhi.n	8005d16 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d14:	e01f      	b.n	8005d56 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d1c:	d206      	bcs.n	8005d2c <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8005d1e:	2302      	movs	r3, #2
 8005d20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8005d24:	23c0      	movs	r3, #192	; 0xc0
 8005d26:	f887 3020 	strb.w	r3, [r7, #32]
 8005d2a:	e014      	b.n	8005d56 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d32:	d206      	bcs.n	8005d42 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8005d34:	2303      	movs	r3, #3
 8005d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8005d3a:	23e0      	movs	r3, #224	; 0xe0
 8005d3c:	f887 3020 	strb.w	r3, [r7, #32]
 8005d40:	e009      	b.n	8005d56 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8005d48:	d24d      	bcs.n	8005de6 <utf16_literal_to_utf8+0x1ba>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8005d4a:	2304      	movs	r3, #4
 8005d4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8005d50:	23f0      	movs	r3, #240	; 0xf0
 8005d52:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8005d56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005d60:	e015      	b.n	8005d8e <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d6a:	b2da      	uxtb	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6819      	ldr	r1, [r3, #0]
 8005d70:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005d74:	440b      	add	r3, r1
 8005d76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	099b      	lsrs	r3, r3, #6
 8005d82:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8005d84:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005d8e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1e5      	bne.n	8005d62 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8005d96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d909      	bls.n	8005db2 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	b2d9      	uxtb	r1, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	b2d2      	uxtb	r2, r2
 8005dae:	701a      	strb	r2, [r3, #0]
 8005db0:	e007      	b.n	8005dc2 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005dbe:	b2d2      	uxtb	r2, r2
 8005dc0:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005dca:	441a      	add	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8005dd0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005dd4:	e009      	b.n	8005dea <utf16_literal_to_utf8+0x1be>
        goto fail;
 8005dd6:	bf00      	nop
 8005dd8:	e006      	b.n	8005de8 <utf16_literal_to_utf8+0x1bc>
        goto fail;
 8005dda:	bf00      	nop
 8005ddc:	e004      	b.n	8005de8 <utf16_literal_to_utf8+0x1bc>
            goto fail;
 8005dde:	bf00      	nop
 8005de0:	e002      	b.n	8005de8 <utf16_literal_to_utf8+0x1bc>

fail:
 8005de2:	bf00      	nop
 8005de4:	e000      	b.n	8005de8 <utf16_literal_to_utf8+0x1bc>
        goto fail;
 8005de6:	bf00      	nop
    return 0;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3728      	adds	r7, #40	; 0x28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	000ffc00 	.word	0x000ffc00

08005df8 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static Jbool parse_string(J * const item, parse_buffer * const input_buffer)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08a      	sub	sp, #40	; 0x28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	4413      	add	r3, r2
 8005e0e:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	4413      	add	r3, r2
 8005e1c:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8005e22:	2300      	movs	r3, #0
 8005e24:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	4413      	add	r3, r2
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b22      	cmp	r3, #34	; 0x22
 8005e34:	f040 816c 	bne.w	8006110 <parse_string+0x318>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8005e40:	e018      	b.n	8005e74 <parse_string+0x7c>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8005e42:	6a3b      	ldr	r3, [r7, #32]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	2b5c      	cmp	r3, #92	; 0x5c
 8005e48:	d111      	bne.n	8005e6e <parse_string+0x76>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	461a      	mov	r2, r3
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	461a      	mov	r2, r3
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	f080 8159 	bcs.w	8006114 <parse_string+0x31c>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	3301      	adds	r3, #1
 8005e66:	61bb      	str	r3, [r7, #24]
                input_end++;
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	3301      	adds	r3, #1
 8005e72:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8005e74:	6a3b      	ldr	r3, [r7, #32]
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	6812      	ldr	r2, [r2, #0]
 8005e7a:	1a9b      	subs	r3, r3, r2
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d203      	bcs.n	8005e8e <parse_string+0x96>
 8005e86:	6a3b      	ldr	r3, [r7, #32]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	2b22      	cmp	r3, #34	; 0x22
 8005e8c:	d1d9      	bne.n	8005e42 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	6812      	ldr	r2, [r2, #0]
 8005e94:	1a9b      	subs	r3, r3, r2
 8005e96:	461a      	mov	r2, r3
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	f080 813b 	bcs.w	8006118 <parse_string+0x320>
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	2b22      	cmp	r3, #34	; 0x22
 8005ea8:	f040 8136 	bne.w	8006118 <parse_string+0x320>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	6811      	ldr	r1, [r2, #0]
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	6892      	ldr	r2, [r2, #8]
 8005eb6:	440a      	add	r2, r1
 8005eb8:	1a9b      	subs	r3, r3, r2
 8005eba:	461a      	mov	r2, r3
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	3201      	adds	r2, #1
 8005eca:	4610      	mov	r0, r2
 8005ecc:	4798      	blx	r3
 8005ece:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 8122 	beq.w	800611c <parse_string+0x324>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8005edc:	e0fc      	b.n	80060d8 <parse_string+0x2e0>
    {
        if (*input_pointer != '\\')
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	2b5c      	cmp	r3, #92	; 0x5c
 8005ee4:	d008      	beq.n	8005ef8 <parse_string+0x100>
        {
            *output_pointer++ = *input_pointer++;
 8005ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ee8:	1c53      	adds	r3, r2, #1
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	1c59      	adds	r1, r3, #1
 8005ef0:	60f9      	str	r1, [r7, #12]
 8005ef2:	7812      	ldrb	r2, [r2, #0]
 8005ef4:	701a      	strb	r2, [r3, #0]
 8005ef6:	e0ef      	b.n	80060d8 <parse_string+0x2e0>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8005ef8:	2302      	movs	r3, #2
 8005efa:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8005efc:	6a3a      	ldr	r2, [r7, #32]
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f340 810c 	ble.w	8006120 <parse_string+0x328>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	3b22      	subs	r3, #34	; 0x22
 8005f10:	2b53      	cmp	r3, #83	; 0x53
 8005f12:	f200 8107 	bhi.w	8006124 <parse_string+0x32c>
 8005f16:	a201      	add	r2, pc, #4	; (adr r2, 8005f1c <parse_string+0x124>)
 8005f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1c:	080060a9 	.word	0x080060a9
 8005f20:	08006125 	.word	0x08006125
 8005f24:	08006125 	.word	0x08006125
 8005f28:	08006125 	.word	0x08006125
 8005f2c:	08006125 	.word	0x08006125
 8005f30:	08006125 	.word	0x08006125
 8005f34:	08006125 	.word	0x08006125
 8005f38:	08006125 	.word	0x08006125
 8005f3c:	08006125 	.word	0x08006125
 8005f40:	08006125 	.word	0x08006125
 8005f44:	08006125 	.word	0x08006125
 8005f48:	08006125 	.word	0x08006125
 8005f4c:	08006125 	.word	0x08006125
 8005f50:	080060a9 	.word	0x080060a9
 8005f54:	08006125 	.word	0x08006125
 8005f58:	08006125 	.word	0x08006125
 8005f5c:	08006125 	.word	0x08006125
 8005f60:	08006125 	.word	0x08006125
 8005f64:	08006125 	.word	0x08006125
 8005f68:	08006125 	.word	0x08006125
 8005f6c:	08006125 	.word	0x08006125
 8005f70:	08006125 	.word	0x08006125
 8005f74:	08006125 	.word	0x08006125
 8005f78:	08006125 	.word	0x08006125
 8005f7c:	08006125 	.word	0x08006125
 8005f80:	08006125 	.word	0x08006125
 8005f84:	08006125 	.word	0x08006125
 8005f88:	08006125 	.word	0x08006125
 8005f8c:	08006125 	.word	0x08006125
 8005f90:	08006125 	.word	0x08006125
 8005f94:	08006125 	.word	0x08006125
 8005f98:	08006125 	.word	0x08006125
 8005f9c:	08006125 	.word	0x08006125
 8005fa0:	08006125 	.word	0x08006125
 8005fa4:	08006125 	.word	0x08006125
 8005fa8:	08006125 	.word	0x08006125
 8005fac:	08006125 	.word	0x08006125
 8005fb0:	08006125 	.word	0x08006125
 8005fb4:	08006125 	.word	0x08006125
 8005fb8:	08006125 	.word	0x08006125
 8005fbc:	08006125 	.word	0x08006125
 8005fc0:	08006125 	.word	0x08006125
 8005fc4:	08006125 	.word	0x08006125
 8005fc8:	08006125 	.word	0x08006125
 8005fcc:	08006125 	.word	0x08006125
 8005fd0:	08006125 	.word	0x08006125
 8005fd4:	08006125 	.word	0x08006125
 8005fd8:	08006125 	.word	0x08006125
 8005fdc:	08006125 	.word	0x08006125
 8005fe0:	08006125 	.word	0x08006125
 8005fe4:	08006125 	.word	0x08006125
 8005fe8:	08006125 	.word	0x08006125
 8005fec:	08006125 	.word	0x08006125
 8005ff0:	08006125 	.word	0x08006125
 8005ff4:	08006125 	.word	0x08006125
 8005ff8:	08006125 	.word	0x08006125
 8005ffc:	08006125 	.word	0x08006125
 8006000:	08006125 	.word	0x08006125
 8006004:	080060a9 	.word	0x080060a9
 8006008:	08006125 	.word	0x08006125
 800600c:	08006125 	.word	0x08006125
 8006010:	08006125 	.word	0x08006125
 8006014:	08006125 	.word	0x08006125
 8006018:	08006125 	.word	0x08006125
 800601c:	0800606d 	.word	0x0800606d
 8006020:	08006125 	.word	0x08006125
 8006024:	08006125 	.word	0x08006125
 8006028:	08006125 	.word	0x08006125
 800602c:	08006079 	.word	0x08006079
 8006030:	08006125 	.word	0x08006125
 8006034:	08006125 	.word	0x08006125
 8006038:	08006125 	.word	0x08006125
 800603c:	08006125 	.word	0x08006125
 8006040:	08006125 	.word	0x08006125
 8006044:	08006125 	.word	0x08006125
 8006048:	08006125 	.word	0x08006125
 800604c:	08006085 	.word	0x08006085
 8006050:	08006125 	.word	0x08006125
 8006054:	08006125 	.word	0x08006125
 8006058:	08006125 	.word	0x08006125
 800605c:	08006091 	.word	0x08006091
 8006060:	08006125 	.word	0x08006125
 8006064:	0800609d 	.word	0x0800609d
 8006068:	080060b7 	.word	0x080060b7
            {
                case 'b':
                    *output_pointer++ = '\b';
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	60fa      	str	r2, [r7, #12]
 8006072:	2208      	movs	r2, #8
 8006074:	701a      	strb	r2, [r3, #0]
                    break;
 8006076:	e02b      	b.n	80060d0 <parse_string+0x2d8>
                case 'f':
                    *output_pointer++ = '\f';
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	60fa      	str	r2, [r7, #12]
 800607e:	220c      	movs	r2, #12
 8006080:	701a      	strb	r2, [r3, #0]
                    break;
 8006082:	e025      	b.n	80060d0 <parse_string+0x2d8>
                case 'n':
                    *output_pointer++ = '\n';
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	60fa      	str	r2, [r7, #12]
 800608a:	220a      	movs	r2, #10
 800608c:	701a      	strb	r2, [r3, #0]
                    break;
 800608e:	e01f      	b.n	80060d0 <parse_string+0x2d8>
                case 'r':
                    *output_pointer++ = '\r';
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	60fa      	str	r2, [r7, #12]
 8006096:	220d      	movs	r2, #13
 8006098:	701a      	strb	r2, [r3, #0]
                    break;
 800609a:	e019      	b.n	80060d0 <parse_string+0x2d8>
                case 't':
                    *output_pointer++ = '\t';
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	1c5a      	adds	r2, r3, #1
 80060a0:	60fa      	str	r2, [r7, #12]
 80060a2:	2209      	movs	r2, #9
 80060a4:	701a      	strb	r2, [r3, #0]
                    break;
 80060a6:	e013      	b.n	80060d0 <parse_string+0x2d8>
                case '\"':
                case '\\':
                case '/':
                    *output_pointer++ = input_pointer[1];
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	60fa      	str	r2, [r7, #12]
 80060ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b0:	7852      	ldrb	r2, [r2, #1]
 80060b2:	701a      	strb	r2, [r3, #0]
                    break;
 80060b4:	e00c      	b.n	80060d0 <parse_string+0x2d8>

                /* UTF-16 literal */
                case 'u':
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 80060b6:	f107 030c 	add.w	r3, r7, #12
 80060ba:	461a      	mov	r2, r3
 80060bc:	6a39      	ldr	r1, [r7, #32]
 80060be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060c0:	f7ff fdb4 	bl	8005c2c <utf16_literal_to_utf8>
 80060c4:	4603      	mov	r3, r0
 80060c6:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 80060c8:	7dfb      	ldrb	r3, [r7, #23]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d02c      	beq.n	8006128 <parse_string+0x330>
                    {
                        /* failed to convert UTF16-literal to UTF-8 */
                        goto fail;
                    }
                    break;
 80060ce:	bf00      	nop

                default:
                    goto fail;
            }
            input_pointer += sequence_length;
 80060d0:	7dfb      	ldrb	r3, [r7, #23]
 80060d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060d4:	4413      	add	r3, r2
 80060d6:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 80060d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	429a      	cmp	r2, r3
 80060de:	f4ff aefe 	bcc.w	8005ede <parse_string+0xe6>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	701a      	strb	r2, [r3, #0]

    item->type = JString;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2210      	movs	r2, #16
 80060ec:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	69fa      	ldr	r2, [r7, #28]
 80060f2:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 80060f4:	6a3b      	ldr	r3, [r7, #32]
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	6812      	ldr	r2, [r2, #0]
 80060fa:	1a9b      	subs	r3, r3, r2
 80060fc:	461a      	mov	r2, r3
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	609a      	str	r2, [r3, #8]

    return true;
 800610c:	2301      	movs	r3, #1
 800610e:	e01e      	b.n	800614e <parse_string+0x356>
        goto fail;
 8006110:	bf00      	nop
 8006112:	e00a      	b.n	800612a <parse_string+0x332>
                    goto fail;
 8006114:	bf00      	nop
 8006116:	e008      	b.n	800612a <parse_string+0x332>

fail:
 8006118:	bf00      	nop
 800611a:	e006      	b.n	800612a <parse_string+0x332>
            goto fail; /* allocation failure */
 800611c:	bf00      	nop
 800611e:	e004      	b.n	800612a <parse_string+0x332>
                goto fail;
 8006120:	bf00      	nop
 8006122:	e002      	b.n	800612a <parse_string+0x332>
                    goto fail;
 8006124:	bf00      	nop
 8006126:	e000      	b.n	800612a <parse_string+0x332>
                        goto fail;
 8006128:	bf00      	nop
    if (output != NULL)
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d003      	beq.n	8006138 <parse_string+0x340>
    {
        input_buffer->hooks.deallocate(output);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	69f8      	ldr	r0, [r7, #28]
 8006136:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	2b00      	cmp	r3, #0
 800613c:	d006      	beq.n	800614c <parse_string+0x354>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	6812      	ldr	r2, [r2, #0]
 8006144:	1a9b      	subs	r3, r3, r2
 8006146:	461a      	mov	r2, r3
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	609a      	str	r2, [r3, #8]
    }

    return false;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3728      	adds	r7, #40	; 0x28
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop

08006158 <htoa16>:

/* Convert a 16-bit number to 4 hex digits, null-terminating it */
void htoa16(uint16_t n, unsigned char *p)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	4603      	mov	r3, r0
 8006160:	6039      	str	r1, [r7, #0]
 8006162:	80fb      	strh	r3, [r7, #6]
    int i;
    for (i=0; i<4; i++)
 8006164:	2300      	movs	r3, #0
 8006166:	60fb      	str	r3, [r7, #12]
 8006168:	e01c      	b.n	80061a4 <htoa16+0x4c>
    {
        uint16_t nibble = (n >> 12) & 0xff;
 800616a:	88fb      	ldrh	r3, [r7, #6]
 800616c:	0b1b      	lsrs	r3, r3, #12
 800616e:	817b      	strh	r3, [r7, #10]
        n = n << 4;
 8006170:	88fb      	ldrh	r3, [r7, #6]
 8006172:	011b      	lsls	r3, r3, #4
 8006174:	80fb      	strh	r3, [r7, #6]
        if (nibble >= 10)
 8006176:	897b      	ldrh	r3, [r7, #10]
 8006178:	2b09      	cmp	r3, #9
 800617a:	d908      	bls.n	800618e <htoa16+0x36>
            *p++ = 'A' + (nibble-10);
 800617c:	897b      	ldrh	r3, [r7, #10]
 800617e:	b2da      	uxtb	r2, r3
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	1c59      	adds	r1, r3, #1
 8006184:	6039      	str	r1, [r7, #0]
 8006186:	3237      	adds	r2, #55	; 0x37
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	701a      	strb	r2, [r3, #0]
 800618c:	e007      	b.n	800619e <htoa16+0x46>
        else
            *p++ = '0' + nibble;
 800618e:	897b      	ldrh	r3, [r7, #10]
 8006190:	b2da      	uxtb	r2, r3
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	1c59      	adds	r1, r3, #1
 8006196:	6039      	str	r1, [r7, #0]
 8006198:	3230      	adds	r2, #48	; 0x30
 800619a:	b2d2      	uxtb	r2, r2
 800619c:	701a      	strb	r2, [r3, #0]
    for (i=0; i<4; i++)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	3301      	adds	r3, #1
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	dddf      	ble.n	800616a <htoa16+0x12>
    }
    *p = '\0';
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2200      	movs	r2, #0
 80061ae:	701a      	strb	r2, [r3, #0]
}
 80061b0:	bf00      	nop
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bc80      	pop	{r7}
 80061b8:	4770      	bx	lr
	...

080061bc <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static Jbool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b088      	sub	sp, #32
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 80061c6:	2300      	movs	r3, #0
 80061c8:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 80061ca:	2300      	movs	r3, #0
 80061cc:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 80061ce:	2300      	movs	r3, #0
 80061d0:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 80061d2:	2300      	movs	r3, #0
 80061d4:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 80061d6:	2300      	movs	r3, #0
 80061d8:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <print_string_ptr+0x28>
    {
        return false;
 80061e0:	2300      	movs	r3, #0
 80061e2:	e0dc      	b.n	800639e <print_string_ptr+0x1e2>
    }

    /* empty string */
    if (input == NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d111      	bne.n	800620e <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 80061ea:	2103      	movs	r1, #3
 80061ec:	6838      	ldr	r0, [r7, #0]
 80061ee:	f7ff fb65 	bl	80058bc <ensure>
 80061f2:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <print_string_ptr+0x42>
        {
            return false;
 80061fa:	2300      	movs	r3, #0
 80061fc:	e0cf      	b.n	800639e <print_string_ptr+0x1e2>
        }
        strcpy((char*)output, "\"\"");
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	4a69      	ldr	r2, [pc, #420]	; (80063a8 <print_string_ptr+0x1ec>)
 8006202:	8811      	ldrh	r1, [r2, #0]
 8006204:	7892      	ldrb	r2, [r2, #2]
 8006206:	8019      	strh	r1, [r3, #0]
 8006208:	709a      	strb	r2, [r3, #2]

        return true;
 800620a:	2301      	movs	r3, #1
 800620c:	e0c7      	b.n	800639e <print_string_ptr+0x1e2>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	61fb      	str	r3, [r7, #28]
 8006212:	e01c      	b.n	800624e <print_string_ptr+0x92>
    {
        switch (*input_pointer)
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	2b0d      	cmp	r3, #13
 800621a:	dc05      	bgt.n	8006228 <print_string_ptr+0x6c>
 800621c:	2b0c      	cmp	r3, #12
 800621e:	da07      	bge.n	8006230 <print_string_ptr+0x74>
 8006220:	3b08      	subs	r3, #8
 8006222:	2b02      	cmp	r3, #2
 8006224:	d808      	bhi.n	8006238 <print_string_ptr+0x7c>
 8006226:	e003      	b.n	8006230 <print_string_ptr+0x74>
 8006228:	2b22      	cmp	r3, #34	; 0x22
 800622a:	d001      	beq.n	8006230 <print_string_ptr+0x74>
 800622c:	2b5c      	cmp	r3, #92	; 0x5c
 800622e:	d103      	bne.n	8006238 <print_string_ptr+0x7c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	3301      	adds	r3, #1
 8006234:	617b      	str	r3, [r7, #20]
                break;
 8006236:	e007      	b.n	8006248 <print_string_ptr+0x8c>
            default:
                if (*input_pointer < 32)
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b1f      	cmp	r3, #31
 800623e:	d802      	bhi.n	8006246 <print_string_ptr+0x8a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	3305      	adds	r3, #5
 8006244:	617b      	str	r3, [r7, #20]
                }
                break;
 8006246:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	3301      	adds	r3, #1
 800624c:	61fb      	str	r3, [r7, #28]
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1de      	bne.n	8006214 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8006256:	69fa      	ldr	r2, [r7, #28]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	461a      	mov	r2, r3
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	4413      	add	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	3303      	adds	r3, #3
 8006268:	4619      	mov	r1, r3
 800626a:	6838      	ldr	r0, [r7, #0]
 800626c:	f7ff fb26 	bl	80058bc <ensure>
 8006270:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <print_string_ptr+0xc0>
    {
        return false;
 8006278:	2300      	movs	r3, #0
 800627a:	e090      	b.n	800639e <print_string_ptr+0x1e2>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d117      	bne.n	80062b2 <print_string_ptr+0xf6>
    {
        output[0] = '\"';
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	2222      	movs	r2, #34	; 0x22
 8006286:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	3301      	adds	r3, #1
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	6879      	ldr	r1, [r7, #4]
 8006290:	4618      	mov	r0, r3
 8006292:	f002 f83b 	bl	800830c <memcpy>
        output[output_length + 1] = '\"';
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	3301      	adds	r3, #1
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	4413      	add	r3, r2
 800629e:	2222      	movs	r2, #34	; 0x22
 80062a0:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	3302      	adds	r3, #2
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	4413      	add	r3, r2
 80062aa:	2200      	movs	r2, #0
 80062ac:	701a      	strb	r2, [r3, #0]

        return true;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e075      	b.n	800639e <print_string_ptr+0x1e2>
    }

    output[0] = '\"';
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	2222      	movs	r2, #34	; 0x22
 80062b6:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	3301      	adds	r3, #1
 80062bc:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	61fb      	str	r3, [r7, #28]
 80062c2:	e05b      	b.n	800637c <print_string_ptr+0x1c0>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	2b1f      	cmp	r3, #31
 80062ca:	d90c      	bls.n	80062e6 <print_string_ptr+0x12a>
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	2b22      	cmp	r3, #34	; 0x22
 80062d2:	d008      	beq.n	80062e6 <print_string_ptr+0x12a>
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	2b5c      	cmp	r3, #92	; 0x5c
 80062da:	d004      	beq.n	80062e6 <print_string_ptr+0x12a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	781a      	ldrb	r2, [r3, #0]
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	701a      	strb	r2, [r3, #0]
 80062e4:	e044      	b.n	8006370 <print_string_ptr+0x1b4>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	61ba      	str	r2, [r7, #24]
 80062ec:	225c      	movs	r2, #92	; 0x5c
 80062ee:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b0c      	cmp	r3, #12
 80062f6:	d01b      	beq.n	8006330 <print_string_ptr+0x174>
 80062f8:	2b0c      	cmp	r3, #12
 80062fa:	dc06      	bgt.n	800630a <print_string_ptr+0x14e>
 80062fc:	2b09      	cmp	r3, #9
 80062fe:	d023      	beq.n	8006348 <print_string_ptr+0x18c>
 8006300:	2b0a      	cmp	r3, #10
 8006302:	d019      	beq.n	8006338 <print_string_ptr+0x17c>
 8006304:	2b08      	cmp	r3, #8
 8006306:	d00f      	beq.n	8006328 <print_string_ptr+0x16c>
 8006308:	e022      	b.n	8006350 <print_string_ptr+0x194>
 800630a:	2b22      	cmp	r3, #34	; 0x22
 800630c:	d008      	beq.n	8006320 <print_string_ptr+0x164>
 800630e:	2b5c      	cmp	r3, #92	; 0x5c
 8006310:	d002      	beq.n	8006318 <print_string_ptr+0x15c>
 8006312:	2b0d      	cmp	r3, #13
 8006314:	d014      	beq.n	8006340 <print_string_ptr+0x184>
 8006316:	e01b      	b.n	8006350 <print_string_ptr+0x194>
            {
                case '\\':
                    *output_pointer = '\\';
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	225c      	movs	r2, #92	; 0x5c
 800631c:	701a      	strb	r2, [r3, #0]
                    break;
 800631e:	e027      	b.n	8006370 <print_string_ptr+0x1b4>
                case '\"':
                    *output_pointer = '\"';
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	2222      	movs	r2, #34	; 0x22
 8006324:	701a      	strb	r2, [r3, #0]
                    break;
 8006326:	e023      	b.n	8006370 <print_string_ptr+0x1b4>
                case '\b':
                    *output_pointer = 'b';
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	2262      	movs	r2, #98	; 0x62
 800632c:	701a      	strb	r2, [r3, #0]
                    break;
 800632e:	e01f      	b.n	8006370 <print_string_ptr+0x1b4>
                case '\f':
                    *output_pointer = 'f';
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	2266      	movs	r2, #102	; 0x66
 8006334:	701a      	strb	r2, [r3, #0]
                    break;
 8006336:	e01b      	b.n	8006370 <print_string_ptr+0x1b4>
                case '\n':
                    *output_pointer = 'n';
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	226e      	movs	r2, #110	; 0x6e
 800633c:	701a      	strb	r2, [r3, #0]
                    break;
 800633e:	e017      	b.n	8006370 <print_string_ptr+0x1b4>
                case '\r':
                    *output_pointer = 'r';
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	2272      	movs	r2, #114	; 0x72
 8006344:	701a      	strb	r2, [r3, #0]
                    break;
 8006346:	e013      	b.n	8006370 <print_string_ptr+0x1b4>
                case '\t':
                    *output_pointer = 't';
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	2274      	movs	r2, #116	; 0x74
 800634c:	701a      	strb	r2, [r3, #0]
                    break;
 800634e:	e00f      	b.n	8006370 <print_string_ptr+0x1b4>
                default:
                    /* escape and print as unicode codepoint */
                    *output_pointer++ = 'u';
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	1c5a      	adds	r2, r3, #1
 8006354:	61ba      	str	r2, [r7, #24]
 8006356:	2275      	movs	r2, #117	; 0x75
 8006358:	701a      	strb	r2, [r3, #0]
                    htoa16(*input_pointer, output_pointer);
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	b29b      	uxth	r3, r3
 8006360:	69b9      	ldr	r1, [r7, #24]
 8006362:	4618      	mov	r0, r3
 8006364:	f7ff fef8 	bl	8006158 <htoa16>
                    output_pointer += 4;
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	3304      	adds	r3, #4
 800636c:	61bb      	str	r3, [r7, #24]
                    break;
 800636e:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	3301      	adds	r3, #1
 8006374:	61fb      	str	r3, [r7, #28]
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	3301      	adds	r3, #1
 800637a:	61bb      	str	r3, [r7, #24]
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d19f      	bne.n	80062c4 <print_string_ptr+0x108>
            }
        }
    }
    output[output_length + 1] = '\"';
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	3301      	adds	r3, #1
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	4413      	add	r3, r2
 800638c:	2222      	movs	r2, #34	; 0x22
 800638e:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	3302      	adds	r3, #2
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	4413      	add	r3, r2
 8006398:	2200      	movs	r2, #0
 800639a:	701a      	strb	r2, [r3, #0]

    return true;
 800639c:	2301      	movs	r3, #1
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3720      	adds	r7, #32
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	08008d50 	.word	0x08008d50

080063ac <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static Jbool print_string(const J * const item, printbuffer * const p)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	6839      	ldr	r1, [r7, #0]
 80063bc:	4618      	mov	r0, r3
 80063be:	f7ff fefd 	bl	80061bc <print_string_ptr>
 80063c2:	4603      	mov	r3, r0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <buffer_skip_whitespace>:
static Jbool parse_object(J * const item, parse_buffer * const input_buffer);
static Jbool print_object(const J * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d003      	beq.n	80063e2 <buffer_skip_whitespace+0x16>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d106      	bne.n	80063f0 <buffer_skip_whitespace+0x24>
    {
        return NULL;
 80063e2:	2300      	movs	r3, #0
 80063e4:	e021      	b.n	800642a <buffer_skip_whitespace+0x5e>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	1c5a      	adds	r2, r3, #1
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00d      	beq.n	8006412 <buffer_skip_whitespace+0x46>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d207      	bcs.n	8006412 <buffer_skip_whitespace+0x46>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	4413      	add	r3, r2
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	2b20      	cmp	r3, #32
 8006410:	d9e9      	bls.n	80063e6 <buffer_skip_whitespace+0x1a>
    }

    if (buffer->offset == buffer->length)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	689a      	ldr	r2, [r3, #8]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	429a      	cmp	r2, r3
 800641c:	d104      	bne.n	8006428 <buffer_skip_whitespace+0x5c>
    {
        buffer->offset--;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	1e5a      	subs	r2, r3, #1
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8006428:	687b      	ldr	r3, [r7, #4]
}
 800642a:	4618      	mov	r0, r3
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	bc80      	pop	{r7}
 8006432:	4770      	bx	lr

08006434 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d007      	beq.n	8006452 <skip_utf8_bom+0x1e>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <skip_utf8_bom+0x1e>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <skip_utf8_bom+0x22>
    {
        return NULL;
 8006452:	2300      	movs	r3, #0
 8006454:	e01c      	b.n	8006490 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d018      	beq.n	800648e <skip_utf8_bom+0x5a>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	1d1a      	adds	r2, r3, #4
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	429a      	cmp	r2, r3
 8006468:	d211      	bcs.n	800648e <skip_utf8_bom+0x5a>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	4413      	add	r3, r2
 8006474:	2203      	movs	r2, #3
 8006476:	4908      	ldr	r1, [pc, #32]	; (8006498 <skip_utf8_bom+0x64>)
 8006478:	4618      	mov	r0, r3
 800647a:	f002 f836 	bl	80084ea <strncmp>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d104      	bne.n	800648e <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	1cda      	adds	r2, r3, #3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800648e:	687b      	ldr	r3, [r7, #4]
}
 8006490:	4618      	mov	r0, r3
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	08008d54 	.word	0x08008d54

0800649c <JParseWithOpts>:

/* Parse an object - create a new root, and populate. */
N_CJSON_PUBLIC(J *) JParseWithOpts(const char *value, const char **return_parse_end, Jbool require_null_terminated)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08e      	sub	sp, #56	; 0x38
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 80064a8:	f107 0318 	add.w	r3, r7, #24
 80064ac:	2200      	movs	r2, #0
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	605a      	str	r2, [r3, #4]
 80064b2:	609a      	str	r2, [r3, #8]
 80064b4:	60da      	str	r2, [r3, #12]
 80064b6:	611a      	str	r2, [r3, #16]
 80064b8:	615a      	str	r2, [r3, #20]
 80064ba:	619a      	str	r2, [r3, #24]
    J *item = NULL;
 80064bc:	2300      	movs	r3, #0
 80064be:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 80064c0:	4b41      	ldr	r3, [pc, #260]	; (80065c8 <JParseWithOpts+0x12c>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 80064c6:	4b40      	ldr	r3, [pc, #256]	; (80065c8 <JParseWithOpts+0x12c>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	605a      	str	r2, [r3, #4]

    if (value == NULL)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d043      	beq.n	800655a <JParseWithOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	61bb      	str	r3, [r7, #24]
    buffer.length = strlen((const char*)value) + sizeof("");
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f7f9 fe44 	bl	8000164 <strlen>
 80064dc:	4603      	mov	r3, r0
 80064de:	3301      	adds	r3, #1
 80064e0:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 80064e2:	2300      	movs	r3, #0
 80064e4:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 80064e6:	4a39      	ldr	r2, [pc, #228]	; (80065cc <JParseWithOpts+0x130>)
 80064e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80064ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80064ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = JNew_Item(&global_hooks);
 80064f2:	4836      	ldr	r0, [pc, #216]	; (80065cc <JParseWithOpts+0x130>)
 80064f4:	f7ff f84c 	bl	8005590 <JNew_Item>
 80064f8:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 80064fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d02e      	beq.n	800655e <JParseWithOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8006500:	f107 0318 	add.w	r3, r7, #24
 8006504:	4618      	mov	r0, r3
 8006506:	f7ff ff95 	bl	8006434 <skip_utf8_bom>
 800650a:	4603      	mov	r3, r0
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff ff5d 	bl	80063cc <buffer_skip_whitespace>
 8006512:	4603      	mov	r3, r0
 8006514:	4619      	mov	r1, r3
 8006516:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006518:	f000 f8fc 	bl	8006714 <parse_value>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d01f      	beq.n	8006562 <JParseWithOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00e      	beq.n	8006546 <JParseWithOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8006528:	f107 0318 	add.w	r3, r7, #24
 800652c:	4618      	mov	r0, r3
 800652e:	f7ff ff4d 	bl	80063cc <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8006532:	6a3a      	ldr	r2, [r7, #32]
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	429a      	cmp	r2, r3
 8006538:	d215      	bcs.n	8006566 <JParseWithOpts+0xca>
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	4413      	add	r3, r2
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10f      	bne.n	8006566 <JParseWithOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d004      	beq.n	8006556 <JParseWithOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	441a      	add	r2, r3
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	601a      	str	r2, [r3, #0]
    }

    return item;
 8006556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006558:	e031      	b.n	80065be <JParseWithOpts+0x122>
        goto fail;
 800655a:	bf00      	nop
 800655c:	e004      	b.n	8006568 <JParseWithOpts+0xcc>
        goto fail;
 800655e:	bf00      	nop
 8006560:	e002      	b.n	8006568 <JParseWithOpts+0xcc>
        goto fail;
 8006562:	bf00      	nop
 8006564:	e000      	b.n	8006568 <JParseWithOpts+0xcc>

fail:
 8006566:	bf00      	nop
    if (item != NULL)
 8006568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800656a:	2b00      	cmp	r3, #0
 800656c:	d002      	beq.n	8006574 <JParseWithOpts+0xd8>
    {
        JDelete(item);
 800656e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006570:	f7ff f824 	bl	80055bc <JDelete>
    }

    if (value != NULL)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d020      	beq.n	80065bc <JParseWithOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800657e:	2300      	movs	r3, #0
 8006580:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8006582:	6a3a      	ldr	r2, [r7, #32]
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	429a      	cmp	r2, r3
 8006588:	d202      	bcs.n	8006590 <JParseWithOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	617b      	str	r3, [r7, #20]
 800658e:	e005      	b.n	800659c <JParseWithOpts+0x100>
        }
        else if (buffer.length > 0)
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <JParseWithOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	3b01      	subs	r3, #1
 800659a:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d004      	beq.n	80065ac <JParseWithOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	441a      	add	r2, r3
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 80065ac:	4b06      	ldr	r3, [pc, #24]	; (80065c8 <JParseWithOpts+0x12c>)
 80065ae:	461a      	mov	r2, r3
 80065b0:	f107 0310 	add.w	r3, r7, #16
 80065b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80065b8:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3738      	adds	r7, #56	; 0x38
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	20000470 	.word	0x20000470
 80065cc:	20000058 	.word	0x20000058

080065d0 <JParse>:

/* Default options for JParse */
N_CJSON_PUBLIC(J *) JParse(const char *value)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
    return JParseWithOpts(value, 0, 0);
 80065d8:	2200      	movs	r2, #0
 80065da:	2100      	movs	r1, #0
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f7ff ff5d 	bl	800649c <JParseWithOpts>
 80065e2:	4603      	mov	r3, r0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <print>:

#define cjson_min(a, b) ((a < b) ? a : b)

static unsigned char *print(const J * const item, Jbool format, const internal_hooks * const hooks)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b08e      	sub	sp, #56	; 0x38
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 80065f8:	2300      	movs	r3, #0
 80065fa:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 80065fc:	f107 0310 	add.w	r3, r7, #16
 8006600:	2224      	movs	r2, #36	; 0x24
 8006602:	2100      	movs	r1, #0
 8006604:	4618      	mov	r0, r3
 8006606:	f001 fea5 	bl	8008354 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a38      	ldr	r2, [pc, #224]	; (80066f0 <print+0x104>)
 8006610:	6812      	ldr	r2, [r2, #0]
 8006612:	4610      	mov	r0, r2
 8006614:	4798      	blx	r3
 8006616:	4603      	mov	r3, r0
 8006618:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 800661a:	4b35      	ldr	r3, [pc, #212]	; (80066f0 <print+0x104>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	627b      	str	r3, [r7, #36]	; 0x24
    buffer->hooks = *hooks;
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800662a:	ca07      	ldmia	r2, {r0, r1, r2}
 800662c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d040      	beq.n	80066b8 <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8006636:	f107 0310 	add.w	r3, r7, #16
 800663a:	4619      	mov	r1, r3
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f000 f955 	bl	80068ec <print_value>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d039      	beq.n	80066bc <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 8006648:	f107 0310 	add.w	r3, r7, #16
 800664c:	4618      	mov	r0, r3
 800664e:	f7ff f9d2 	bl	80059f6 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00d      	beq.n	8006676 <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	6938      	ldr	r0, [r7, #16]
 8006660:	69ba      	ldr	r2, [r7, #24]
 8006662:	3201      	adds	r2, #1
 8006664:	4611      	mov	r1, r2
 8006666:	4798      	blx	r3
 8006668:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL) {
 800666a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666c:	2b00      	cmp	r3, #0
 800666e:	d027      	beq.n	80066c0 <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 8006670:	2300      	movs	r3, #0
 8006672:	613b      	str	r3, [r7, #16]
 8006674:	e01e      	b.n	80066b4 <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	69ba      	ldr	r2, [r7, #24]
 800667c:	3201      	adds	r2, #1
 800667e:	4610      	mov	r0, r2
 8006680:	4798      	blx	r3
 8006682:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL)
 8006684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006686:	2b00      	cmp	r3, #0
 8006688:	d01c      	beq.n	80066c4 <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 800668a:	6939      	ldr	r1, [r7, #16]
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	1c5a      	adds	r2, r3, #1
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	4293      	cmp	r3, r2
 8006694:	bf28      	it	cs
 8006696:	4613      	movcs	r3, r2
 8006698:	461a      	mov	r2, r3
 800669a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800669c:	f001 fe36 	bl	800830c <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066a4:	4413      	add	r3, r2
 80066a6:	2200      	movs	r2, #0
 80066a8:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	4610      	mov	r0, r2
 80066b2:	4798      	blx	r3
    }

    return printed;
 80066b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b6:	e016      	b.n	80066e6 <print+0xfa>
        goto fail;
 80066b8:	bf00      	nop
 80066ba:	e004      	b.n	80066c6 <print+0xda>
        goto fail;
 80066bc:	bf00      	nop
 80066be:	e002      	b.n	80066c6 <print+0xda>
            goto fail;
 80066c0:	bf00      	nop
 80066c2:	e000      	b.n	80066c6 <print+0xda>
            goto fail;
 80066c4:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d004      	beq.n	80066d6 <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	4610      	mov	r0, r2
 80066d4:	4798      	blx	r3
    }

    if (printed != NULL)
 80066d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d003      	beq.n	80066e4 <print+0xf8>
    {
        hooks->deallocate(printed);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80066e2:	4798      	blx	r3
    }

    return NULL;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3738      	adds	r7, #56	; 0x38
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	08008f60 	.word	0x08008f60

080066f4 <JPrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

N_CJSON_PUBLIC(char *) JPrintUnformatted(const J *item)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 80066fc:	4a04      	ldr	r2, [pc, #16]	; (8006710 <JPrintUnformatted+0x1c>)
 80066fe:	2100      	movs	r1, #0
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f7ff ff73 	bl	80065ec <print>
 8006706:	4603      	mov	r3, r0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	20000058 	.word	0x20000058

08006714 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static Jbool parse_value(J * const item, parse_buffer * const input_buffer)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d003      	beq.n	800672c <parse_value+0x18>
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <parse_value+0x1c>
    {
        return false; /* no input */
 800672c:	2300      	movs	r3, #0
 800672e:	e0d2      	b.n	80068d6 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d01d      	beq.n	8006772 <parse_value+0x5e>
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	1d1a      	adds	r2, r3, #4
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	429a      	cmp	r2, r3
 8006742:	d816      	bhi.n	8006772 <parse_value+0x5e>
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	4413      	add	r3, r2
 800674e:	2204      	movs	r2, #4
 8006750:	4963      	ldr	r1, [pc, #396]	; (80068e0 <parse_value+0x1cc>)
 8006752:	4618      	mov	r0, r3
 8006754:	f001 fec9 	bl	80084ea <strncmp>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d109      	bne.n	8006772 <parse_value+0x5e>
    {
        item->type = JNULL;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2204      	movs	r2, #4
 8006762:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	1d1a      	adds	r2, r3, #4
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	609a      	str	r2, [r3, #8]
        return true;
 800676e:	2301      	movs	r3, #1
 8006770:	e0b1      	b.n	80068d6 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d01d      	beq.n	80067b4 <parse_value+0xa0>
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	1d5a      	adds	r2, r3, #5
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	429a      	cmp	r2, r3
 8006784:	d816      	bhi.n	80067b4 <parse_value+0xa0>
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	4413      	add	r3, r2
 8006790:	2205      	movs	r2, #5
 8006792:	4954      	ldr	r1, [pc, #336]	; (80068e4 <parse_value+0x1d0>)
 8006794:	4618      	mov	r0, r3
 8006796:	f001 fea8 	bl	80084ea <strncmp>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d109      	bne.n	80067b4 <parse_value+0xa0>
    {
        item->type = JFalse;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	1d5a      	adds	r2, r3, #5
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	609a      	str	r2, [r3, #8]
        return true;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e090      	b.n	80068d6 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d020      	beq.n	80067fc <parse_value+0xe8>
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	1d1a      	adds	r2, r3, #4
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d819      	bhi.n	80067fc <parse_value+0xe8>
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	4413      	add	r3, r2
 80067d2:	2204      	movs	r2, #4
 80067d4:	4944      	ldr	r1, [pc, #272]	; (80068e8 <parse_value+0x1d4>)
 80067d6:	4618      	mov	r0, r3
 80067d8:	f001 fe87 	bl	80084ea <strncmp>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10c      	bne.n	80067fc <parse_value+0xe8>
    {
        item->type = JTrue;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2202      	movs	r2, #2
 80067e6:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	1d1a      	adds	r2, r3, #4
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	609a      	str	r2, [r3, #8]
        return true;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e06c      	b.n	80068d6 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d013      	beq.n	800682a <parse_value+0x116>
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	689a      	ldr	r2, [r3, #8]
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	429a      	cmp	r2, r3
 800680c:	d20d      	bcs.n	800682a <parse_value+0x116>
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	4413      	add	r3, r2
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	2b22      	cmp	r3, #34	; 0x22
 800681c:	d105      	bne.n	800682a <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f7ff fae9 	bl	8005df8 <parse_string>
 8006826:	4603      	mov	r3, r0
 8006828:	e055      	b.n	80068d6 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d023      	beq.n	8006878 <parse_value+0x164>
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	689a      	ldr	r2, [r3, #8]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	429a      	cmp	r2, r3
 800683a:	d21d      	bcs.n	8006878 <parse_value+0x164>
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	4413      	add	r3, r2
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b2d      	cmp	r3, #45	; 0x2d
 800684a:	d00f      	beq.n	800686c <parse_value+0x158>
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	4413      	add	r3, r2
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	2b2f      	cmp	r3, #47	; 0x2f
 800685a:	d90d      	bls.n	8006878 <parse_value+0x164>
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	4413      	add	r3, r2
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	2b39      	cmp	r3, #57	; 0x39
 800686a:	d805      	bhi.n	8006878 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 800686c:	6839      	ldr	r1, [r7, #0]
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7fe fef6 	bl	8005660 <parse_number>
 8006874:	4603      	mov	r3, r0
 8006876:	e02e      	b.n	80068d6 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d013      	beq.n	80068a6 <parse_value+0x192>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	689a      	ldr	r2, [r3, #8]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	429a      	cmp	r2, r3
 8006888:	d20d      	bcs.n	80068a6 <parse_value+0x192>
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	4413      	add	r3, r2
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	2b5b      	cmp	r3, #91	; 0x5b
 8006898:	d105      	bne.n	80068a6 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800689a:	6839      	ldr	r1, [r7, #0]
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f8cb 	bl	8006a38 <parse_array>
 80068a2:	4603      	mov	r3, r0
 80068a4:	e017      	b.n	80068d6 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d013      	beq.n	80068d4 <parse_value+0x1c0>
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d20d      	bcs.n	80068d4 <parse_value+0x1c0>
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	4413      	add	r3, r2
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	2b7b      	cmp	r3, #123	; 0x7b
 80068c6:	d105      	bne.n	80068d4 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 80068c8:	6839      	ldr	r1, [r7, #0]
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f9f8 	bl	8006cc0 <parse_object>
 80068d0:	4603      	mov	r3, r0
 80068d2:	e000      	b.n	80068d6 <parse_value+0x1c2>
    }

    return false;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3708      	adds	r7, #8
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	08008d48 	.word	0x08008d48
 80068e4:	08008d58 	.word	0x08008d58
 80068e8:	08008d60 	.word	0x08008d60

080068ec <print_value>:

/* Render a value to text. */
static Jbool print_value(const J * const item, printbuffer * const output_buffer)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 80068f6:	2300      	movs	r3, #0
 80068f8:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d002      	beq.n	8006906 <print_value+0x1a>
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <print_value+0x1e>
    {
        return false;
 8006906:	2300      	movs	r3, #0
 8006908:	e08b      	b.n	8006a22 <print_value+0x136>
    }

    switch ((item->type) & 0xFF)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b08      	cmp	r3, #8
 8006912:	d04a      	beq.n	80069aa <print_value+0xbe>
 8006914:	2b08      	cmp	r3, #8
 8006916:	dc06      	bgt.n	8006926 <print_value+0x3a>
 8006918:	2b02      	cmp	r3, #2
 800691a:	d034      	beq.n	8006986 <print_value+0x9a>
 800691c:	2b04      	cmp	r3, #4
 800691e:	d00e      	beq.n	800693e <print_value+0x52>
 8006920:	2b01      	cmp	r3, #1
 8006922:	d01e      	beq.n	8006962 <print_value+0x76>
 8006924:	e07c      	b.n	8006a20 <print_value+0x134>
 8006926:	2b20      	cmp	r3, #32
 8006928:	d06e      	beq.n	8006a08 <print_value+0x11c>
 800692a:	2b20      	cmp	r3, #32
 800692c:	dc02      	bgt.n	8006934 <print_value+0x48>
 800692e:	2b10      	cmp	r3, #16
 8006930:	d064      	beq.n	80069fc <print_value+0x110>
 8006932:	e075      	b.n	8006a20 <print_value+0x134>
 8006934:	2b40      	cmp	r3, #64	; 0x40
 8006936:	d06d      	beq.n	8006a14 <print_value+0x128>
 8006938:	2b80      	cmp	r3, #128	; 0x80
 800693a:	d03c      	beq.n	80069b6 <print_value+0xca>
 800693c:	e070      	b.n	8006a20 <print_value+0x134>
    {
        case JNULL:
            output = ensure(output_buffer, 5);
 800693e:	2105      	movs	r1, #5
 8006940:	6838      	ldr	r0, [r7, #0]
 8006942:	f7fe ffbb 	bl	80058bc <ensure>
 8006946:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <print_value+0x66>
            {
                return false;
 800694e:	2300      	movs	r3, #0
 8006950:	e067      	b.n	8006a22 <print_value+0x136>
            }
            strcpy((char*)output, "null");
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	4a35      	ldr	r2, [pc, #212]	; (8006a2c <print_value+0x140>)
 8006956:	6810      	ldr	r0, [r2, #0]
 8006958:	6018      	str	r0, [r3, #0]
 800695a:	7912      	ldrb	r2, [r2, #4]
 800695c:	711a      	strb	r2, [r3, #4]
            return true;
 800695e:	2301      	movs	r3, #1
 8006960:	e05f      	b.n	8006a22 <print_value+0x136>

        case JFalse:
            output = ensure(output_buffer, 6);
 8006962:	2106      	movs	r1, #6
 8006964:	6838      	ldr	r0, [r7, #0]
 8006966:	f7fe ffa9 	bl	80058bc <ensure>
 800696a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <print_value+0x8a>
            {
                return false;
 8006972:	2300      	movs	r3, #0
 8006974:	e055      	b.n	8006a22 <print_value+0x136>
            }
            strcpy((char*)output, "false");
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	4a2d      	ldr	r2, [pc, #180]	; (8006a30 <print_value+0x144>)
 800697a:	6810      	ldr	r0, [r2, #0]
 800697c:	6018      	str	r0, [r3, #0]
 800697e:	8892      	ldrh	r2, [r2, #4]
 8006980:	809a      	strh	r2, [r3, #4]
            return true;
 8006982:	2301      	movs	r3, #1
 8006984:	e04d      	b.n	8006a22 <print_value+0x136>

        case JTrue:
            output = ensure(output_buffer, 5);
 8006986:	2105      	movs	r1, #5
 8006988:	6838      	ldr	r0, [r7, #0]
 800698a:	f7fe ff97 	bl	80058bc <ensure>
 800698e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <print_value+0xae>
            {
                return false;
 8006996:	2300      	movs	r3, #0
 8006998:	e043      	b.n	8006a22 <print_value+0x136>
            }
            strcpy((char*)output, "true");
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	4a25      	ldr	r2, [pc, #148]	; (8006a34 <print_value+0x148>)
 800699e:	6810      	ldr	r0, [r2, #0]
 80069a0:	6018      	str	r0, [r3, #0]
 80069a2:	7912      	ldrb	r2, [r2, #4]
 80069a4:	711a      	strb	r2, [r3, #4]
            return true;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e03b      	b.n	8006a22 <print_value+0x136>

        case JNumber:
            return print_number(item, output_buffer);
 80069aa:	6839      	ldr	r1, [r7, #0]
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7ff f843 	bl	8005a38 <print_number>
 80069b2:	4603      	mov	r3, r0
 80069b4:	e035      	b.n	8006a22 <print_value+0x136>

        case JRaw:
        {
            size_t raw_length = 0;
 80069b6:	2300      	movs	r3, #0
 80069b8:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <print_value+0xda>
            {
                return false;
 80069c2:	2300      	movs	r3, #0
 80069c4:	e02d      	b.n	8006a22 <print_value+0x136>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7f9 fbca 	bl	8000164 <strlen>
 80069d0:	4603      	mov	r3, r0
 80069d2:	3301      	adds	r3, #1
 80069d4:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 80069d6:	68b9      	ldr	r1, [r7, #8]
 80069d8:	6838      	ldr	r0, [r7, #0]
 80069da:	f7fe ff6f 	bl	80058bc <ensure>
 80069de:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <print_value+0xfe>
            {
                return false;
 80069e6:	2300      	movs	r3, #0
 80069e8:	e01b      	b.n	8006a22 <print_value+0x136>
            }
            memcpy(output, item->valuestring, raw_length);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	4619      	mov	r1, r3
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f001 fc8a 	bl	800830c <memcpy>
            return true;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e012      	b.n	8006a22 <print_value+0x136>
        }

        case JString:
            return print_string(item, output_buffer);
 80069fc:	6839      	ldr	r1, [r7, #0]
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7ff fcd4 	bl	80063ac <print_string>
 8006a04:	4603      	mov	r3, r0
 8006a06:	e00c      	b.n	8006a22 <print_value+0x136>

        case JArray:
            return print_array(item, output_buffer);
 8006a08:	6839      	ldr	r1, [r7, #0]
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f8d2 	bl	8006bb4 <print_array>
 8006a10:	4603      	mov	r3, r0
 8006a12:	e006      	b.n	8006a22 <print_value+0x136>

        case JObject:
            return print_object(item, output_buffer);
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fa47 	bl	8006eaa <print_object>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	e000      	b.n	8006a22 <print_value+0x136>

        default:
            return false;
 8006a20:	2300      	movs	r3, #0
    }
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	08008d48 	.word	0x08008d48
 8006a30:	08008d58 	.word	0x08008d58
 8006a34:	08008d60 	.word	0x08008d60

08006a38 <parse_array>:

/* Build an array from input text. */
static Jbool parse_array(J * const item, parse_buffer * const input_buffer)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
    J *head = NULL; /* head of the linked list */
 8006a42:	2300      	movs	r3, #0
 8006a44:	617b      	str	r3, [r7, #20]
    J *current_item = NULL;
 8006a46:	2300      	movs	r3, #0
 8006a48:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= N_CJSON_NESTING_LIMIT)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a52:	d301      	bcc.n	8006a58 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8006a54:	2300      	movs	r3, #0
 8006a56:	e0a9      	b.n	8006bac <parse_array+0x174>
    }
    input_buffer->depth++;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	1c5a      	adds	r2, r3, #1
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	2b5b      	cmp	r3, #91	; 0x5b
 8006a70:	f040 808e 	bne.w	8006b90 <parse_array+0x158>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	1c5a      	adds	r2, r3, #1
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8006a7e:	6838      	ldr	r0, [r7, #0]
 8006a80:	f7ff fca4 	bl	80063cc <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00d      	beq.n	8006aa6 <parse_array+0x6e>
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	689a      	ldr	r2, [r3, #8]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d207      	bcs.n	8006aa6 <parse_array+0x6e>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	2b5d      	cmp	r3, #93	; 0x5d
 8006aa4:	d061      	beq.n	8006b6a <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d005      	beq.n	8006ab8 <parse_array+0x80>
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	689a      	ldr	r2, [r3, #8]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d305      	bcc.n	8006ac4 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	1e5a      	subs	r2, r3, #1
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	609a      	str	r2, [r3, #8]
        goto fail;
 8006ac2:	e06c      	b.n	8006b9e <parse_array+0x166>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	1e5a      	subs	r2, r3, #1
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        J *new_item = JNew_Item(&(input_buffer->hooks));
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	3310      	adds	r3, #16
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fe fd5c 	bl	8005590 <JNew_Item>
 8006ad8:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d059      	beq.n	8006b94 <parse_array+0x15c>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d104      	bne.n	8006af0 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	617b      	str	r3, [r7, #20]
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	613b      	str	r3, [r7, #16]
 8006aee:	e007      	b.n	8006b00 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	1c5a      	adds	r2, r3, #1
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8006b0a:	6838      	ldr	r0, [r7, #0]
 8006b0c:	f7ff fc5e 	bl	80063cc <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	6938      	ldr	r0, [r7, #16]
 8006b14:	f7ff fdfe 	bl	8006714 <parse_value>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d03c      	beq.n	8006b98 <parse_array+0x160>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8006b1e:	6838      	ldr	r0, [r7, #0]
 8006b20:	f7ff fc54 	bl	80063cc <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00d      	beq.n	8006b46 <parse_array+0x10e>
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	689a      	ldr	r2, [r3, #8]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d207      	bcs.n	8006b46 <parse_array+0x10e>
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	4413      	add	r3, r2
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	2b2c      	cmp	r3, #44	; 0x2c
 8006b44:	d0c3      	beq.n	8006ace <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d027      	beq.n	8006b9c <parse_array+0x164>
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	689a      	ldr	r2, [r3, #8]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d221      	bcs.n	8006b9c <parse_array+0x164>
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	4413      	add	r3, r2
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	2b5d      	cmp	r3, #93	; 0x5d
 8006b66:	d119      	bne.n	8006b9c <parse_array+0x164>
    {
        goto fail; /* expected end of array */
    }

success:
 8006b68:	e000      	b.n	8006b6c <parse_array+0x134>
        goto success;
 8006b6a:	bf00      	nop
    input_buffer->depth--;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	1e5a      	subs	r2, r3, #1
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	60da      	str	r2, [r3, #12]

    item->type = JArray;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2220      	movs	r2, #32
 8006b7a:	60da      	str	r2, [r3, #12]
    item->child = head;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	1c5a      	adds	r2, r3, #1
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	609a      	str	r2, [r3, #8]

    return true;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e00d      	b.n	8006bac <parse_array+0x174>
        goto fail;
 8006b90:	bf00      	nop
 8006b92:	e004      	b.n	8006b9e <parse_array+0x166>
            goto fail; /* allocation failure */
 8006b94:	bf00      	nop
 8006b96:	e002      	b.n	8006b9e <parse_array+0x166>
            goto fail; /* failed to parse value */
 8006b98:	bf00      	nop
 8006b9a:	e000      	b.n	8006b9e <parse_array+0x166>

fail:
 8006b9c:	bf00      	nop
    if (head != NULL)
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d002      	beq.n	8006baa <parse_array+0x172>
    {
        JDelete(head);
 8006ba4:	6978      	ldr	r0, [r7, #20]
 8006ba6:	f7fe fd09 	bl	80055bc <JDelete>
    }

    return false;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3718      	adds	r7, #24
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <print_array>:

/* Render an array to text */
static Jbool print_array(const J * const item, printbuffer * const output_buffer)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60fb      	str	r3, [r7, #12]
    J *current_element = item->child;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d101      	bne.n	8006bd6 <print_array+0x22>
    {
        return false;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	e070      	b.n	8006cb8 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 8006bd6:	2101      	movs	r1, #1
 8006bd8:	6838      	ldr	r0, [r7, #0]
 8006bda:	f7fe fe6f 	bl	80058bc <ensure>
 8006bde:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d101      	bne.n	8006bea <print_array+0x36>
    {
        return false;
 8006be6:	2300      	movs	r3, #0
 8006be8:	e066      	b.n	8006cb8 <print_array+0x104>
    }

    *output_pointer = '[';
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	225b      	movs	r2, #91	; 0x5b
 8006bee:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	1c5a      	adds	r2, r3, #1
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	1c5a      	adds	r2, r3, #1
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8006c04:	e03d      	b.n	8006c82 <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 8006c06:	6839      	ldr	r1, [r7, #0]
 8006c08:	6938      	ldr	r0, [r7, #16]
 8006c0a:	f7ff fe6f 	bl	80068ec <print_value>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <print_array+0x64>
        {
            return false;
 8006c14:	2300      	movs	r3, #0
 8006c16:	e04f      	b.n	8006cb8 <print_array+0x104>
        }
        update_offset(output_buffer);
 8006c18:	6838      	ldr	r0, [r7, #0]
 8006c1a:	f7fe feec 	bl	80059f6 <update_offset>
        if (current_element->next)
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d02a      	beq.n	8006c7c <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <print_array+0x7e>
 8006c2e:	2302      	movs	r3, #2
 8006c30:	e000      	b.n	8006c34 <print_array+0x80>
 8006c32:	2301      	movs	r3, #1
 8006c34:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	6838      	ldr	r0, [r7, #0]
 8006c3e:	f7fe fe3d 	bl	80058bc <ensure>
 8006c42:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <print_array+0x9a>
            {
                return false;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	e034      	b.n	8006cb8 <print_array+0x104>
            }
            *output_pointer++ = ',';
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	1c5a      	adds	r2, r3, #1
 8006c52:	617a      	str	r2, [r7, #20]
 8006c54:	222c      	movs	r2, #44	; 0x2c
 8006c56:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d004      	beq.n	8006c6a <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	1c5a      	adds	r2, r3, #1
 8006c64:	617a      	str	r2, [r7, #20]
 8006c66:	2220      	movs	r2, #32
 8006c68:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	689a      	ldr	r2, [r3, #8]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	441a      	add	r2, r3
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1be      	bne.n	8006c06 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8006c88:	2102      	movs	r1, #2
 8006c8a:	6838      	ldr	r0, [r7, #0]
 8006c8c:	f7fe fe16 	bl	80058bc <ensure>
 8006c90:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <print_array+0xe8>
    {
        return false;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	e00d      	b.n	8006cb8 <print_array+0x104>
    }
    *output_pointer++ = ']';
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	1c5a      	adds	r2, r3, #1
 8006ca0:	617a      	str	r2, [r7, #20]
 8006ca2:	225d      	movs	r2, #93	; 0x5d
 8006ca4:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	1e5a      	subs	r2, r3, #1
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	60da      	str	r2, [r3, #12]

    return true;
 8006cb6:	2301      	movs	r3, #1
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <parse_object>:

/* Build an object from the text. */
static Jbool parse_object(J * const item, parse_buffer * const input_buffer)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
    J *head = NULL; /* linked list head */
 8006cca:	2300      	movs	r3, #0
 8006ccc:	617b      	str	r3, [r7, #20]
    J *current_item = NULL;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= N_CJSON_NESTING_LIMIT)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cda:	d301      	bcc.n	8006ce0 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8006cdc:	2300      	movs	r3, #0
 8006cde:	e0e0      	b.n	8006ea2 <parse_object+0x1e2>
    }
    input_buffer->depth++;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	1c5a      	adds	r2, r3, #1
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f000 80ca 	beq.w	8006e86 <parse_object+0x1c6>
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	689a      	ldr	r2, [r3, #8]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	f080 80c3 	bcs.w	8006e86 <parse_object+0x1c6>
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	4413      	add	r3, r2
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	2b7b      	cmp	r3, #123	; 0x7b
 8006d0e:	f040 80ba 	bne.w	8006e86 <parse_object+0x1c6>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	1c5a      	adds	r2, r3, #1
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8006d1c:	6838      	ldr	r0, [r7, #0]
 8006d1e:	f7ff fb55 	bl	80063cc <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00e      	beq.n	8006d46 <parse_object+0x86>
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	689a      	ldr	r2, [r3, #8]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d208      	bcs.n	8006d46 <parse_object+0x86>
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	2b7d      	cmp	r3, #125	; 0x7d
 8006d42:	f000 808d 	beq.w	8006e60 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d005      	beq.n	8006d58 <parse_object+0x98>
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d305      	bcc.n	8006d64 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	1e5a      	subs	r2, r3, #1
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	609a      	str	r2, [r3, #8]
        goto fail;
 8006d62:	e097      	b.n	8006e94 <parse_object+0x1d4>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	1e5a      	subs	r2, r3, #1
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        J *new_item = JNew_Item(&(input_buffer->hooks));
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	3310      	adds	r3, #16
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fe fc0c 	bl	8005590 <JNew_Item>
 8006d78:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 8084 	beq.w	8006e8a <parse_object+0x1ca>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d104      	bne.n	8006d92 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	617b      	str	r3, [r7, #20]
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	613b      	str	r3, [r7, #16]
 8006d90:	e007      	b.n	8006da2 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	1c5a      	adds	r2, r3, #1
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8006dac:	6838      	ldr	r0, [r7, #0]
 8006dae:	f7ff fb0d 	bl	80063cc <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8006db2:	6839      	ldr	r1, [r7, #0]
 8006db4:	6938      	ldr	r0, [r7, #16]
 8006db6:	f7ff f81f 	bl	8005df8 <parse_string>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d066      	beq.n	8006e8e <parse_object+0x1ce>
        {
            goto fail; /* faile to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8006dc0:	6838      	ldr	r0, [r7, #0]
 8006dc2:	f7ff fb03 	bl	80063cc <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	691a      	ldr	r2, [r3, #16]
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d055      	beq.n	8006e86 <parse_object+0x1c6>
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	689a      	ldr	r2, [r3, #8]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d24f      	bcs.n	8006e86 <parse_object+0x1c6>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	4413      	add	r3, r2
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	2b3a      	cmp	r3, #58	; 0x3a
 8006df4:	d147      	bne.n	8006e86 <parse_object+0x1c6>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	1c5a      	adds	r2, r3, #1
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8006e00:	6838      	ldr	r0, [r7, #0]
 8006e02:	f7ff fae3 	bl	80063cc <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	6938      	ldr	r0, [r7, #16]
 8006e0a:	f7ff fc83 	bl	8006714 <parse_value>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d03e      	beq.n	8006e92 <parse_object+0x1d2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8006e14:	6838      	ldr	r0, [r7, #0]
 8006e16:	f7ff fad9 	bl	80063cc <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00d      	beq.n	8006e3c <parse_object+0x17c>
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	689a      	ldr	r2, [r3, #8]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d207      	bcs.n	8006e3c <parse_object+0x17c>
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	4413      	add	r3, r2
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	2b2c      	cmp	r3, #44	; 0x2c
 8006e3a:	d098      	beq.n	8006d6e <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d021      	beq.n	8006e86 <parse_object+0x1c6>
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	689a      	ldr	r2, [r3, #8]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d21b      	bcs.n	8006e86 <parse_object+0x1c6>
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	4413      	add	r3, r2
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	2b7d      	cmp	r3, #125	; 0x7d
 8006e5c:	d113      	bne.n	8006e86 <parse_object+0x1c6>
    {
        goto fail; /* expected end of object */
    }

success:
 8006e5e:	e000      	b.n	8006e62 <parse_object+0x1a2>
        goto success; /* empty object */
 8006e60:	bf00      	nop
    input_buffer->depth--;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	1e5a      	subs	r2, r3, #1
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	60da      	str	r2, [r3, #12]

    item->type = JObject;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2240      	movs	r2, #64	; 0x40
 8006e70:	60da      	str	r2, [r3, #12]
    item->child = head;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	1c5a      	adds	r2, r3, #1
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	609a      	str	r2, [r3, #8]
    return true;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e00d      	b.n	8006ea2 <parse_object+0x1e2>

fail:
 8006e86:	bf00      	nop
 8006e88:	e004      	b.n	8006e94 <parse_object+0x1d4>
            goto fail; /* allocation failure */
 8006e8a:	bf00      	nop
 8006e8c:	e002      	b.n	8006e94 <parse_object+0x1d4>
            goto fail; /* faile to parse name */
 8006e8e:	bf00      	nop
 8006e90:	e000      	b.n	8006e94 <parse_object+0x1d4>
            goto fail; /* failed to parse value */
 8006e92:	bf00      	nop
    if (head != NULL)
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d002      	beq.n	8006ea0 <parse_object+0x1e0>
    {
        JDelete(head);
 8006e9a:	6978      	ldr	r0, [r7, #20]
 8006e9c:	f7fe fb8e 	bl	80055bc <JDelete>
    }

    return false;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3718      	adds	r7, #24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <print_object>:

/* Render an object to text. */
static Jbool print_object(const J * const item, printbuffer * const output_buffer)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b088      	sub	sp, #32
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	60fb      	str	r3, [r7, #12]
    J *current_item = item->child;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <print_object+0x22>
    {
        return false;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	e109      	b.n	80070e0 <print_object+0x236>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d001      	beq.n	8006ed8 <print_object+0x2e>
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	e000      	b.n	8006eda <print_object+0x30>
 8006ed8:	2301      	movs	r3, #1
 8006eda:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	6838      	ldr	r0, [r7, #0]
 8006ee4:	f7fe fcea 	bl	80058bc <ensure>
 8006ee8:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d101      	bne.n	8006ef4 <print_object+0x4a>
    {
        return false;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	e0f5      	b.n	80070e0 <print_object+0x236>
    }

    *output_pointer++ = '{';
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	1c5a      	adds	r2, r3, #1
 8006ef8:	61fa      	str	r2, [r7, #28]
 8006efa:	227b      	movs	r2, #123	; 0x7b
 8006efc:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	695b      	ldr	r3, [r3, #20]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d004      	beq.n	8006f1a <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	1c5a      	adds	r2, r3, #1
 8006f14:	61fa      	str	r2, [r7, #28]
 8006f16:	220a      	movs	r2, #10
 8006f18:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	689a      	ldr	r2, [r3, #8]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	441a      	add	r2, r3
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	609a      	str	r2, [r3, #8]

    while (current_item)
 8006f26:	e0a1      	b.n	800706c <print_object+0x1c2>
    {
        if (output_buffer->format)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d022      	beq.n	8006f76 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	4619      	mov	r1, r3
 8006f36:	6838      	ldr	r0, [r7, #0]
 8006f38:	f7fe fcc0 	bl	80058bc <ensure>
 8006f3c:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <print_object+0x9e>
            {
                return false;
 8006f44:	2300      	movs	r3, #0
 8006f46:	e0cb      	b.n	80070e0 <print_object+0x236>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8006f48:	2300      	movs	r3, #0
 8006f4a:	617b      	str	r3, [r7, #20]
 8006f4c:	e007      	b.n	8006f5e <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	1c5a      	adds	r2, r3, #1
 8006f52:	61fa      	str	r2, [r7, #28]
 8006f54:	2209      	movs	r2, #9
 8006f56:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	617b      	str	r3, [r7, #20]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d3f2      	bcc.n	8006f4e <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	689a      	ldr	r2, [r3, #8]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	441a      	add	r2, r3
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7ff f91d 	bl	80061bc <print_string_ptr>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <print_object+0xe2>
        {
            return false;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	e0a9      	b.n	80070e0 <print_object+0x236>
        }
        update_offset(output_buffer);
 8006f8c:	6838      	ldr	r0, [r7, #0]
 8006f8e:	f7fe fd32 	bl	80059f6 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <print_object+0xf4>
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	e000      	b.n	8006fa0 <print_object+0xf6>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8006fa2:	68f9      	ldr	r1, [r7, #12]
 8006fa4:	6838      	ldr	r0, [r7, #0]
 8006fa6:	f7fe fc89 	bl	80058bc <ensure>
 8006faa:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d101      	bne.n	8006fb6 <print_object+0x10c>
        {
            return false;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	e094      	b.n	80070e0 <print_object+0x236>
        }
        *output_pointer++ = ':';
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	1c5a      	adds	r2, r3, #1
 8006fba:	61fa      	str	r2, [r7, #28]
 8006fbc:	223a      	movs	r2, #58	; 0x3a
 8006fbe:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d004      	beq.n	8006fd2 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	1c5a      	adds	r2, r3, #1
 8006fcc:	61fa      	str	r2, [r7, #28]
 8006fce:	2209      	movs	r2, #9
 8006fd0:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	689a      	ldr	r2, [r3, #8]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	441a      	add	r2, r3
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	69b8      	ldr	r0, [r7, #24]
 8006fe2:	f7ff fc83 	bl	80068ec <print_value>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <print_object+0x146>
        {
            return false;
 8006fec:	2300      	movs	r3, #0
 8006fee:	e077      	b.n	80070e0 <print_object+0x236>
        }
        update_offset(output_buffer);
 8006ff0:	6838      	ldr	r0, [r7, #0]
 8006ff2:	f7fe fd00 	bl	80059f6 <update_offset>

        /* print comma if not last */
        length = (size_t) ((output_buffer->format ? 1 : 0) + (current_item->next ? 1 : 0));
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	bf14      	ite	ne
 8006ffe:	2301      	movne	r3, #1
 8007000:	2300      	moveq	r3, #0
 8007002:	b2db      	uxtb	r3, r3
 8007004:	461a      	mov	r2, r3
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	bf14      	ite	ne
 800700e:	2301      	movne	r3, #1
 8007010:	2300      	moveq	r3, #0
 8007012:	b2db      	uxtb	r3, r3
 8007014:	4413      	add	r3, r2
 8007016:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	3301      	adds	r3, #1
 800701c:	4619      	mov	r1, r3
 800701e:	6838      	ldr	r0, [r7, #0]
 8007020:	f7fe fc4c 	bl	80058bc <ensure>
 8007024:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <print_object+0x186>
        {
            return false;
 800702c:	2300      	movs	r3, #0
 800702e:	e057      	b.n	80070e0 <print_object+0x236>
        }
        if (current_item->next)
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d004      	beq.n	8007042 <print_object+0x198>
        {
            *output_pointer++ = ',';
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	61fa      	str	r2, [r7, #28]
 800703e:	222c      	movs	r2, #44	; 0x2c
 8007040:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d004      	beq.n	8007054 <print_object+0x1aa>
        {
            *output_pointer++ = '\n';
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	1c5a      	adds	r2, r3, #1
 800704e:	61fa      	str	r2, [r7, #28]
 8007050:	220a      	movs	r2, #10
 8007052:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	2200      	movs	r2, #0
 8007058:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	689a      	ldr	r2, [r3, #8]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	441a      	add	r2, r3
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	61bb      	str	r3, [r7, #24]
    while (current_item)
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	2b00      	cmp	r3, #0
 8007070:	f47f af5a 	bne.w	8006f28 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d003      	beq.n	8007084 <print_object+0x1da>
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	3301      	adds	r3, #1
 8007082:	e000      	b.n	8007086 <print_object+0x1dc>
 8007084:	2302      	movs	r3, #2
 8007086:	4619      	mov	r1, r3
 8007088:	6838      	ldr	r0, [r7, #0]
 800708a:	f7fe fc17 	bl	80058bc <ensure>
 800708e:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <print_object+0x1f0>
    {
        return false;
 8007096:	2300      	movs	r3, #0
 8007098:	e022      	b.n	80070e0 <print_object+0x236>
    }
    if (output_buffer->format)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d010      	beq.n	80070c4 <print_object+0x21a>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 80070a2:	2300      	movs	r3, #0
 80070a4:	613b      	str	r3, [r7, #16]
 80070a6:	e007      	b.n	80070b8 <print_object+0x20e>
        {
            *output_pointer++ = '\t';
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	1c5a      	adds	r2, r3, #1
 80070ac:	61fa      	str	r2, [r7, #28]
 80070ae:	2209      	movs	r2, #9
 80070b0:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	3301      	adds	r3, #1
 80070b6:	613b      	str	r3, [r7, #16]
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	3b01      	subs	r3, #1
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d3f1      	bcc.n	80070a8 <print_object+0x1fe>
        }
    }
    *output_pointer++ = '}';
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	61fa      	str	r2, [r7, #28]
 80070ca:	227d      	movs	r2, #125	; 0x7d
 80070cc:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	2200      	movs	r2, #0
 80070d2:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	1e5a      	subs	r2, r3, #1
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	60da      	str	r2, [r3, #12]

    return true;
 80070de:	2301      	movs	r3, #1
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3720      	adds	r7, #32
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static J *get_object_item(const J * const object, const char * const name, const Jbool case_sensitive)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
    J *current_element = NULL;
 80070f4:	2300      	movs	r3, #0
 80070f6:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d002      	beq.n	8007104 <get_object_item+0x1c>
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <get_object_item+0x20>
    {
        return NULL;
 8007104:	2300      	movs	r3, #0
 8007106:	e026      	b.n	8007156 <get_object_item+0x6e>
    }

    current_element = object->child;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d013      	beq.n	800713c <get_object_item+0x54>
    {
        while ((current_element != NULL) && (strcmp(name, current_element->string) != 0))
 8007114:	e002      	b.n	800711c <get_object_item+0x34>
        {
            current_element = current_element->next;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (strcmp(name, current_element->string) != 0))
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d018      	beq.n	8007154 <get_object_item+0x6c>
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	4619      	mov	r1, r3
 8007128:	68b8      	ldr	r0, [r7, #8]
 800712a:	f7f9 f811 	bl	8000150 <strcmp>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1f0      	bne.n	8007116 <get_object_item+0x2e>
 8007134:	e00e      	b.n	8007154 <get_object_item+0x6c>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d008      	beq.n	8007154 <get_object_item+0x6c>
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	4619      	mov	r1, r3
 8007148:	68b8      	ldr	r0, [r7, #8]
 800714a:	f7fe f97b 	bl	8005444 <case_insensitive_strcmp>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1f0      	bne.n	8007136 <get_object_item+0x4e>
        }
    }

    return current_element;
 8007154:	697b      	ldr	r3, [r7, #20]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3718      	adds	r7, #24
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <JGetObjectItem>:

N_CJSON_PUBLIC(J *) JGetObjectItem(const J * const object, const char * const string)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b082      	sub	sp, #8
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8007168:	2200      	movs	r2, #0
 800716a:	6839      	ldr	r1, [r7, #0]
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f7ff ffbb 	bl	80070e8 <get_object_item>
 8007172:	4603      	mov	r3, r0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <suffix_object>:
    return JGetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(J *prev, J *item)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	683a      	ldr	r2, [r7, #0]
 800718a:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	605a      	str	r2, [r3, #4]
}
 8007192:	bf00      	nop
 8007194:	370c      	adds	r7, #12
 8007196:	46bd      	mov	sp, r7
 8007198:	bc80      	pop	{r7}
 800719a:	4770      	bx	lr

0800719c <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static Jbool add_item_to_array(J *array, J *item)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
    J *child = NULL;
 80071a6:	2300      	movs	r3, #0
 80071a8:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL))
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d002      	beq.n	80071b6 <add_item_to_array+0x1a>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d101      	bne.n	80071ba <add_item_to_array+0x1e>
    {
        return false;
 80071b6:	2300      	movs	r3, #0
 80071b8:	e015      	b.n	80071e6 <add_item_to_array+0x4a>
    }

    child = array->child;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	60fb      	str	r3, [r7, #12]

    if (child == NULL)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d106      	bne.n	80071d4 <add_item_to_array+0x38>
    {
        /* list is empty, start new one */
        array->child = item;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	683a      	ldr	r2, [r7, #0]
 80071ca:	609a      	str	r2, [r3, #8]
 80071cc:	e00a      	b.n	80071e4 <add_item_to_array+0x48>
    else
    {
        /* append to the end */
        while (child->next)
        {
            child = child->next;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	60fb      	str	r3, [r7, #12]
        while (child->next)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1f8      	bne.n	80071ce <add_item_to_array+0x32>
        }
        suffix_object(child, item);
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f7ff ffcc 	bl	800717c <suffix_object>
    }

    return true;
 80071e4:	2301      	movs	r3, #1
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b083      	sub	sp, #12
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
    return (void*)string;
 80071f6:	687b      	ldr	r3, [r7, #4]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bc80      	pop	{r7}
 8007200:	4770      	bx	lr

08007202 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static Jbool add_item_to_object(J * const object, const char * const string, J * const item, const internal_hooks * const hooks, const Jbool constant_key)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b086      	sub	sp, #24
 8007206:	af00      	add	r7, sp, #0
 8007208:	60f8      	str	r0, [r7, #12]
 800720a:	60b9      	str	r1, [r7, #8]
 800720c:	607a      	str	r2, [r7, #4]
 800720e:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8007210:	2300      	movs	r3, #0
 8007212:	617b      	str	r3, [r7, #20]
    int new_type = JInvalid;
 8007214:	2300      	movs	r3, #0
 8007216:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL))
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d005      	beq.n	800722a <add_item_to_object+0x28>
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <add_item_to_object+0x28>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <add_item_to_object+0x2c>
    {
        return false;
 800722a:	2300      	movs	r3, #0
 800722c:	e036      	b.n	800729c <add_item_to_object+0x9a>
    }

    if (constant_key)
 800722e:	6a3b      	ldr	r3, [r7, #32]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d009      	beq.n	8007248 <add_item_to_object+0x46>
    {
        new_key = (char*)cast_away_const(string);
 8007234:	68b8      	ldr	r0, [r7, #8]
 8007236:	f7ff ffda 	bl	80071ee <cast_away_const>
 800723a:	6178      	str	r0, [r7, #20]
        new_type = item->type | JStringIsConst;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007244:	613b      	str	r3, [r7, #16]
 8007246:	e00e      	b.n	8007266 <add_item_to_object+0x64>
    }
    else
    {
        new_key = (char*)Jstrdup((const unsigned char*)string, hooks);
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	68b8      	ldr	r0, [r7, #8]
 800724c:	f7fe f96a 	bl	8005524 <Jstrdup>
 8007250:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d101      	bne.n	800725c <add_item_to_object+0x5a>
        {
            return false;
 8007258:	2300      	movs	r3, #0
 800725a:	e01f      	b.n	800729c <add_item_to_object+0x9a>
        }

        new_type = item->type & ~JStringIsConst;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007264:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & JStringIsConst) && (item->string != NULL))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800726e:	2b00      	cmp	r3, #0
 8007270:	d109      	bne.n	8007286 <add_item_to_object+0x84>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d005      	beq.n	8007286 <add_item_to_object+0x84>
    {
        hooks->deallocate(item->string);
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	6a12      	ldr	r2, [r2, #32]
 8007282:	4610      	mov	r0, r2
 8007284:	4798      	blx	r3
    }

    item->string = new_key;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8007292:	6879      	ldr	r1, [r7, #4]
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f7ff ff81 	bl	800719c <add_item_to_array>
 800729a:	4603      	mov	r3, r0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3718      	adds	r7, #24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <JAddItemToObject>:

N_CJSON_PUBLIC(void) JAddItemToObject(J *object, const char *string, J *item)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af02      	add	r7, sp, #8
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]
    add_item_to_object(object, string, item, &global_hooks, false);
 80072b0:	2300      	movs	r3, #0
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	4b04      	ldr	r3, [pc, #16]	; (80072c8 <JAddItemToObject+0x24>)
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	68b9      	ldr	r1, [r7, #8]
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f7ff ffa1 	bl	8007202 <add_item_to_object>
}
 80072c0:	bf00      	nop
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	20000058 	.word	0x20000058

080072cc <JAddBoolToObject>:
    JDelete(false_item);
    return NULL;
}

N_CJSON_PUBLIC(J*) JAddBoolToObject(J * const object, const char * const name, const Jbool boolean)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b088      	sub	sp, #32
 80072d0:	af02      	add	r7, sp, #8
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
    J *bool_item = JCreateBool(boolean);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f85f 	bl	800739c <JCreateBool>
 80072de:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, bool_item, &global_hooks, false))
 80072e0:	2300      	movs	r3, #0
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	4b09      	ldr	r3, [pc, #36]	; (800730c <JAddBoolToObject+0x40>)
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	68b9      	ldr	r1, [r7, #8]
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f7ff ff89 	bl	8007202 <add_item_to_object>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <JAddBoolToObject+0x2e>
    {
        return bool_item;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	e003      	b.n	8007302 <JAddBoolToObject+0x36>
    }

    JDelete(bool_item);
 80072fa:	6978      	ldr	r0, [r7, #20]
 80072fc:	f7fe f95e 	bl	80055bc <JDelete>
    return NULL;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	20000058 	.word	0x20000058

08007310 <JAddNumberToObject>:

N_CJSON_PUBLIC(J*) JAddNumberToObject(J * const object, const char * const name, const double number)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b088      	sub	sp, #32
 8007314:	af02      	add	r7, sp, #8
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	e9c7 2300 	strd	r2, r3, [r7]
    J *number_item = JCreateNumber(number);
 800731e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007322:	f000 f855 	bl	80073d0 <JCreateNumber>
 8007326:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 8007328:	2300      	movs	r3, #0
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	4b09      	ldr	r3, [pc, #36]	; (8007354 <JAddNumberToObject+0x44>)
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	68b9      	ldr	r1, [r7, #8]
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f7ff ff65 	bl	8007202 <add_item_to_object>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <JAddNumberToObject+0x32>
    {
        return number_item;
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	e003      	b.n	800734a <JAddNumberToObject+0x3a>
    }

    JDelete(number_item);
 8007342:	6978      	ldr	r0, [r7, #20]
 8007344:	f7fe f93a 	bl	80055bc <JDelete>
    return NULL;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3718      	adds	r7, #24
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	20000058 	.word	0x20000058

08007358 <JAddStringToObject>:

N_CJSON_PUBLIC(J*) JAddStringToObject(J * const object, const char * const name, const char * const string)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b088      	sub	sp, #32
 800735c:	af02      	add	r7, sp, #8
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
    J *string_item = JCreateString(string);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f87b 	bl	8007460 <JCreateString>
 800736a:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
 800736c:	2300      	movs	r3, #0
 800736e:	9300      	str	r3, [sp, #0]
 8007370:	4b09      	ldr	r3, [pc, #36]	; (8007398 <JAddStringToObject+0x40>)
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	68b9      	ldr	r1, [r7, #8]
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f7ff ff43 	bl	8007202 <add_item_to_object>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <JAddStringToObject+0x2e>
    {
        return string_item;
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	e003      	b.n	800738e <JAddStringToObject+0x36>
    }

    JDelete(string_item);
 8007386:	6978      	ldr	r0, [r7, #20]
 8007388:	f7fe f918 	bl	80055bc <JDelete>
    return NULL;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3718      	adds	r7, #24
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	20000058 	.word	0x20000058

0800739c <JCreateBool>:

    return item;
}

N_CJSON_PUBLIC(J *) JCreateBool(Jbool b)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
    J *item = JNew_Item(&global_hooks);
 80073a4:	4809      	ldr	r0, [pc, #36]	; (80073cc <JCreateBool+0x30>)
 80073a6:	f7fe f8f3 	bl	8005590 <JNew_Item>
 80073aa:	60f8      	str	r0, [r7, #12]
    if(item)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d007      	beq.n	80073c2 <JCreateBool+0x26>
    {
        item->type = b ? JTrue : JFalse;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <JCreateBool+0x20>
 80073b8:	2202      	movs	r2, #2
 80073ba:	e000      	b.n	80073be <JCreateBool+0x22>
 80073bc:	2201      	movs	r2, #1
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	60da      	str	r2, [r3, #12]
    }

    return item;
 80073c2:	68fb      	ldr	r3, [r7, #12]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	20000058 	.word	0x20000058

080073d0 <JCreateNumber>:

N_CJSON_PUBLIC(J *) JCreateNumber(double num)
{
 80073d0:	b590      	push	{r4, r7, lr}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	e9c7 0100 	strd	r0, r1, [r7]
    J *item = JNew_Item(&global_hooks);
 80073da:	481f      	ldr	r0, [pc, #124]	; (8007458 <JCreateNumber+0x88>)
 80073dc:	f7fe f8d8 	bl	8005590 <JNew_Item>
 80073e0:	60f8      	str	r0, [r7, #12]
    if(item)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d02c      	beq.n	8007442 <JCreateNumber+0x72>
    {
        item->type = JNumber;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2208      	movs	r2, #8
 80073ec:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80073f4:	e9c2 3406 	strd	r3, r4, [r2, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 80073f8:	a315      	add	r3, pc, #84	; (adr r3, 8007450 <JCreateNumber+0x80>)
 80073fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007402:	f7f9 faf9 	bl	80009f8 <__aeabi_dcmpge>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d004      	beq.n	8007416 <JCreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007412:	615a      	str	r2, [r3, #20]
 8007414:	e015      	b.n	8007442 <JCreateNumber+0x72>
        }
        else if (num <= INT_MIN)
 8007416:	f04f 0200 	mov.w	r2, #0
 800741a:	4b10      	ldr	r3, [pc, #64]	; (800745c <JCreateNumber+0x8c>)
 800741c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007420:	f7f9 fae0 	bl	80009e4 <__aeabi_dcmple>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d004      	beq.n	8007434 <JCreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007430:	615a      	str	r2, [r3, #20]
 8007432:	e006      	b.n	8007442 <JCreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 8007434:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007438:	f7f9 faf2 	bl	8000a20 <__aeabi_d2iz>
 800743c:	4602      	mov	r2, r0
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8007442:	68fb      	ldr	r3, [r7, #12]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	bd90      	pop	{r4, r7, pc}
 800744c:	f3af 8000 	nop.w
 8007450:	ffc00000 	.word	0xffc00000
 8007454:	41dfffff 	.word	0x41dfffff
 8007458:	20000058 	.word	0x20000058
 800745c:	c1e00000 	.word	0xc1e00000

08007460 <JCreateString>:

N_CJSON_PUBLIC(J *) JCreateString(const char *string)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
    J *item = JNew_Item(&global_hooks);
 8007468:	480f      	ldr	r0, [pc, #60]	; (80074a8 <JCreateString+0x48>)
 800746a:	f7fe f891 	bl	8005590 <JNew_Item>
 800746e:	60f8      	str	r0, [r7, #12]
    if(item)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d012      	beq.n	800749c <JCreateString+0x3c>
    {
        item->type = JString;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2210      	movs	r2, #16
 800747a:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)Jstrdup((const unsigned char*)string, &global_hooks);
 800747c:	490a      	ldr	r1, [pc, #40]	; (80074a8 <JCreateString+0x48>)
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f7fe f850 	bl	8005524 <Jstrdup>
 8007484:	4602      	mov	r2, r0
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d104      	bne.n	800749c <JCreateString+0x3c>
        {
            JDelete(item);
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f7fe f892 	bl	80055bc <JDelete>
            return NULL;
 8007498:	2300      	movs	r3, #0
 800749a:	e000      	b.n	800749e <JCreateString+0x3e>
        }
    }

    return item;
 800749c:	68fb      	ldr	r3, [r7, #12]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	20000058 	.word	0x20000058

080074ac <JCreateObject>:

    return item;
}

N_CJSON_PUBLIC(J *) JCreateObject(void)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
    J *item = JNew_Item(&global_hooks);
 80074b2:	4807      	ldr	r0, [pc, #28]	; (80074d0 <JCreateObject+0x24>)
 80074b4:	f7fe f86c 	bl	8005590 <JNew_Item>
 80074b8:	6078      	str	r0, [r7, #4]
    if (item)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d002      	beq.n	80074c6 <JCreateObject+0x1a>
    {
        item->type = JObject;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2240      	movs	r2, #64	; 0x40
 80074c4:	60da      	str	r2, [r3, #12]
    }

    return item;
 80074c6:	687b      	ldr	r3, [r7, #4]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	20000058 	.word	0x20000058

080074d4 <JIsNumber>:

    return (item->type & 0xFF) == JNULL;
}

N_CJSON_PUBLIC(Jbool) JIsNumber(const J * const item)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d101      	bne.n	80074e6 <JIsNumber+0x12>
    {
        return false;
 80074e2:	2300      	movs	r3, #0
 80074e4:	e007      	b.n	80074f6 <JIsNumber+0x22>
    }

    return (item->type & 0xFF) == JNumber;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	2b08      	cmp	r3, #8
 80074ee:	bf0c      	ite	eq
 80074f0:	2301      	moveq	r3, #1
 80074f2:	2300      	movne	r3, #0
 80074f4:	b2db      	uxtb	r3, r3
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bc80      	pop	{r7}
 80074fe:	4770      	bx	lr

08007500 <JIsString>:

N_CJSON_PUBLIC(Jbool) JIsString(const J * const item)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d101      	bne.n	8007512 <JIsString+0x12>
    {
        return false;
 800750e:	2300      	movs	r3, #0
 8007510:	e007      	b.n	8007522 <JIsString+0x22>
    }

    return (item->type & 0xFF) == JString;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b10      	cmp	r3, #16
 800751a:	bf0c      	ite	eq
 800751c:	2301      	moveq	r3, #1
 800751e:	2300      	movne	r3, #0
 8007520:	b2db      	uxtb	r3, r3
}
 8007522:	4618      	mov	r0, r3
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	bc80      	pop	{r7}
 800752a:	4770      	bx	lr

0800752c <JGetNumber>:
        return NULL;
    return item;
}

// Return a number from the specified JSON object, or 0 if it's not present
double JGetNumber(J *rsp, const char *field) {
 800752c:	b590      	push	{r4, r7, lr}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
    if (rsp == NULL)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d104      	bne.n	8007546 <JGetNumber+0x1a>
        return 0.0;
 800753c:	f04f 0300 	mov.w	r3, #0
 8007540:	f04f 0400 	mov.w	r4, #0
 8007544:	e01c      	b.n	8007580 <JGetNumber+0x54>
    J *item = JGetObjectItem(rsp, field);
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f7ff fe08 	bl	800715e <JGetObjectItem>
 800754e:	60f8      	str	r0, [r7, #12]
    if (item == NULL)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d104      	bne.n	8007560 <JGetNumber+0x34>
        return 0.0;
 8007556:	f04f 0300 	mov.w	r3, #0
 800755a:	f04f 0400 	mov.w	r4, #0
 800755e:	e00f      	b.n	8007580 <JGetNumber+0x54>
    if (!JIsNumber(item))
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f7ff ffb7 	bl	80074d4 <JIsNumber>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d104      	bne.n	8007576 <JGetNumber+0x4a>
        return 0.0;
 800756c:	f04f 0300 	mov.w	r3, #0
 8007570:	f04f 0400 	mov.w	r4, #0
 8007574:	e004      	b.n	8007580 <JGetNumber+0x54>
    return item->valuedouble;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f103 0418 	add.w	r4, r3, #24
 800757c:	e9d4 3400 	ldrd	r3, r4, [r4]
}
 8007580:	4618      	mov	r0, r3
 8007582:	4621      	mov	r1, r4
 8007584:	3714      	adds	r7, #20
 8007586:	46bd      	mov	sp, r7
 8007588:	bd90      	pop	{r4, r7, pc}

0800758a <JIsNullString>:
        return 0.0;
    return JIsTrue(item);
}

// Return true if the object is valid and if the field is not present or if it's null
bool JIsNullString(J *rsp, const char *field) {
 800758a:	b580      	push	{r7, lr}
 800758c:	b084      	sub	sp, #16
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	6039      	str	r1, [r7, #0]
    if (rsp == NULL)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d101      	bne.n	800759e <JIsNullString+0x14>
        return false;
 800759a:	2300      	movs	r3, #0
 800759c:	e01f      	b.n	80075de <JIsNullString+0x54>
    J *item = JGetObjectItem(rsp, field);
 800759e:	6839      	ldr	r1, [r7, #0]
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f7ff fddc 	bl	800715e <JGetObjectItem>
 80075a6:	60f8      	str	r0, [r7, #12]
    if (item == NULL)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d101      	bne.n	80075b2 <JIsNullString+0x28>
        return true;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e015      	b.n	80075de <JIsNullString+0x54>
    if (!JIsString(item))
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f7ff ffa4 	bl	8007500 <JIsString>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d101      	bne.n	80075c2 <JIsNullString+0x38>
        return false;
 80075be:	2300      	movs	r3, #0
 80075c0:	e00d      	b.n	80075de <JIsNullString+0x54>
    if (item->valuestring == NULL)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d101      	bne.n	80075ce <JIsNullString+0x44>
        return true;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e007      	b.n	80075de <JIsNullString+0x54>
    if (item->valuestring[0] == '\0')
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <JIsNullString+0x52>
        return true;
 80075d8:	2301      	movs	r3, #1
 80075da:	e000      	b.n	80075de <JIsNullString+0x54>
    return false;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
	...

080075e8 <JNtoA>:
	0.0000000005,		// 9
	0.00000000005		// 10
};

char * JNtoA(double f, char * buf, int original_precision)
{
 80075e8:	b5b0      	push	{r4, r5, r7, lr}
 80075ea:	b08e      	sub	sp, #56	; 0x38
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
 80075f4:	603b      	str	r3, [r7, #0]
	char * ptr = buf;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	637b      	str	r3, [r7, #52]	; 0x34
	char * p = ptr;
 80075fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075fc:	633b      	str	r3, [r7, #48]	; 0x30
	char c;
	long intPart;

	// Check specifically for uncommon but bad floating point numbers that can't be converted
	uint8_t fbytes[8];
	memcpy(&fbytes, &f, sizeof(fbytes));
 80075fe:	f107 0310 	add.w	r3, r7, #16
 8007602:	f107 0208 	add.w	r2, r7, #8
 8007606:	e892 0003 	ldmia.w	r2, {r0, r1}
 800760a:	e883 0003 	stmia.w	r3, {r0, r1}
	bool wasFF = true;
 800760e:	2301      	movs	r3, #1
 8007610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int i;
	for (i=0; i<(int)sizeof(fbytes); i++)
 8007614:	2300      	movs	r3, #0
 8007616:	623b      	str	r3, [r7, #32]
 8007618:	e00c      	b.n	8007634 <JNtoA+0x4c>
		if (fbytes[i] != 0xff) wasFF = false;
 800761a:	f107 0210 	add.w	r2, r7, #16
 800761e:	6a3b      	ldr	r3, [r7, #32]
 8007620:	4413      	add	r3, r2
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	2bff      	cmp	r3, #255	; 0xff
 8007626:	d002      	beq.n	800762e <JNtoA+0x46>
 8007628:	2300      	movs	r3, #0
 800762a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i=0; i<(int)sizeof(fbytes); i++)
 800762e:	6a3b      	ldr	r3, [r7, #32]
 8007630:	3301      	adds	r3, #1
 8007632:	623b      	str	r3, [r7, #32]
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	2b07      	cmp	r3, #7
 8007638:	ddef      	ble.n	800761a <JNtoA+0x32>
	if (wasFF)
 800763a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800763e:	2b00      	cmp	r3, #0
 8007640:	d005      	beq.n	800764e <JNtoA+0x66>
		f = 0.0;
 8007642:	f04f 0200 	mov.w	r2, #0
 8007646:	f04f 0300 	mov.w	r3, #0
 800764a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// check precision bounds
	int precision = original_precision;
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	61fb      	str	r3, [r7, #28]
	if (precision < 0 || precision > JNTOA_PRECISION)
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	2b00      	cmp	r3, #0
 8007656:	db02      	blt.n	800765e <JNtoA+0x76>
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	2b0a      	cmp	r3, #10
 800765c:	dd01      	ble.n	8007662 <JNtoA+0x7a>
		precision = JNTOA_PRECISION;
 800765e:	230a      	movs	r3, #10
 8007660:	61fb      	str	r3, [r7, #28]

	// sign stuff
	if (f < 0)
 8007662:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007666:	f04f 0200 	mov.w	r2, #0
 800766a:	f04f 0300 	mov.w	r3, #0
 800766e:	f7f9 f9af 	bl	80009d0 <__aeabi_dcmplt>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00b      	beq.n	8007690 <JNtoA+0xa8>
	{
		f = -f;
 8007678:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800767c:	4614      	mov	r4, r2
 800767e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8007682:	e9c7 4502 	strd	r4, r5, [r7, #8]
		*ptr++ = '-';
 8007686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007688:	1c5a      	adds	r2, r3, #1
 800768a:	637a      	str	r2, [r7, #52]	; 0x34
 800768c:	222d      	movs	r2, #45	; 0x2d
 800768e:	701a      	strb	r2, [r3, #0]
	}

	if (original_precision < 0)	 // negative precision == automatic precision guess
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	da4f      	bge.n	8007736 <JNtoA+0x14e>
	{
		if (f < 1.0) precision = 6;
 8007696:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800769a:	f04f 0200 	mov.w	r2, #0
 800769e:	4b98      	ldr	r3, [pc, #608]	; (8007900 <JNtoA+0x318>)
 80076a0:	f7f9 f996 	bl	80009d0 <__aeabi_dcmplt>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d002      	beq.n	80076b0 <JNtoA+0xc8>
 80076aa:	2306      	movs	r3, #6
 80076ac:	61fb      	str	r3, [r7, #28]
 80076ae:	e042      	b.n	8007736 <JNtoA+0x14e>
		else if (f < 10.0) precision = 5;
 80076b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076b4:	f04f 0200 	mov.w	r2, #0
 80076b8:	4b92      	ldr	r3, [pc, #584]	; (8007904 <JNtoA+0x31c>)
 80076ba:	f7f9 f989 	bl	80009d0 <__aeabi_dcmplt>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d002      	beq.n	80076ca <JNtoA+0xe2>
 80076c4:	2305      	movs	r3, #5
 80076c6:	61fb      	str	r3, [r7, #28]
 80076c8:	e035      	b.n	8007736 <JNtoA+0x14e>
		else if (f < 100.0) precision = 4;
 80076ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076ce:	f04f 0200 	mov.w	r2, #0
 80076d2:	4b8d      	ldr	r3, [pc, #564]	; (8007908 <JNtoA+0x320>)
 80076d4:	f7f9 f97c 	bl	80009d0 <__aeabi_dcmplt>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d002      	beq.n	80076e4 <JNtoA+0xfc>
 80076de:	2304      	movs	r3, #4
 80076e0:	61fb      	str	r3, [r7, #28]
 80076e2:	e028      	b.n	8007736 <JNtoA+0x14e>
		else if (f < 1000.0) precision = 3;
 80076e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076e8:	f04f 0200 	mov.w	r2, #0
 80076ec:	4b87      	ldr	r3, [pc, #540]	; (800790c <JNtoA+0x324>)
 80076ee:	f7f9 f96f 	bl	80009d0 <__aeabi_dcmplt>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d002      	beq.n	80076fe <JNtoA+0x116>
 80076f8:	2303      	movs	r3, #3
 80076fa:	61fb      	str	r3, [r7, #28]
 80076fc:	e01b      	b.n	8007736 <JNtoA+0x14e>
		else if (f < 10000.0) precision = 2;
 80076fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007702:	a37b      	add	r3, pc, #492	; (adr r3, 80078f0 <JNtoA+0x308>)
 8007704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007708:	f7f9 f962 	bl	80009d0 <__aeabi_dcmplt>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d002      	beq.n	8007718 <JNtoA+0x130>
 8007712:	2302      	movs	r3, #2
 8007714:	61fb      	str	r3, [r7, #28]
 8007716:	e00e      	b.n	8007736 <JNtoA+0x14e>
		else if (f < 100000.0) precision = 1;
 8007718:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800771c:	a376      	add	r3, pc, #472	; (adr r3, 80078f8 <JNtoA+0x310>)
 800771e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007722:	f7f9 f955 	bl	80009d0 <__aeabi_dcmplt>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d002      	beq.n	8007732 <JNtoA+0x14a>
 800772c:	2301      	movs	r3, #1
 800772e:	61fb      	str	r3, [r7, #28]
 8007730:	e001      	b.n	8007736 <JNtoA+0x14e>
		else precision = 0;
 8007732:	2300      	movs	r3, #0
 8007734:	61fb      	str	r3, [r7, #28]
	}

	// round value according the precision
	if (precision)
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00f      	beq.n	800775c <JNtoA+0x174>
		f += rounders[precision];
 800773c:	4a74      	ldr	r2, [pc, #464]	; (8007910 <JNtoA+0x328>)
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	00db      	lsls	r3, r3, #3
 8007742:	4413      	add	r3, r2
 8007744:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007748:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800774c:	461a      	mov	r2, r3
 800774e:	4623      	mov	r3, r4
 8007750:	f7f8 fd16 	bl	8000180 <__adddf3>
 8007754:	4603      	mov	r3, r0
 8007756:	460c      	mov	r4, r1
 8007758:	e9c7 3402 	strd	r3, r4, [r7, #8]

	// integer part...
	intPart = f;
 800775c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8007760:	4618      	mov	r0, r3
 8007762:	4621      	mov	r1, r4
 8007764:	f7f9 f95c 	bl	8000a20 <__aeabi_d2iz>
 8007768:	4603      	mov	r3, r0
 800776a:	62bb      	str	r3, [r7, #40]	; 0x28
	f -= intPart;
 800776c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007772:	f7f8 fe51 	bl	8000418 <__aeabi_i2d>
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	4620      	mov	r0, r4
 800777c:	4629      	mov	r1, r5
 800777e:	f7f8 fcfd 	bl	800017c <__aeabi_dsub>
 8007782:	4603      	mov	r3, r0
 8007784:	460c      	mov	r4, r1
 8007786:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (!intPart)
 800778a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778c:	2b00      	cmp	r3, #0
 800778e:	d105      	bne.n	800779c <JNtoA+0x1b4>
		*ptr++ = '0';
 8007790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007792:	1c5a      	adds	r2, r3, #1
 8007794:	637a      	str	r2, [r7, #52]	; 0x34
 8007796:	2230      	movs	r2, #48	; 0x30
 8007798:	701a      	strb	r2, [r3, #0]
 800779a:	e03a      	b.n	8007812 <JNtoA+0x22a>
	else
	{
		// save start pointer
		p = ptr;
 800779c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800779e:	633b      	str	r3, [r7, #48]	; 0x30

		// convert (reverse order)
		while (intPart)
 80077a0:	e01a      	b.n	80077d8 <JNtoA+0x1f0>
		{
			*p++ = '0' + intPart % 10;
 80077a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077a4:	4b5b      	ldr	r3, [pc, #364]	; (8007914 <JNtoA+0x32c>)
 80077a6:	fb83 1302 	smull	r1, r3, r3, r2
 80077aa:	1099      	asrs	r1, r3, #2
 80077ac:	17d3      	asrs	r3, r2, #31
 80077ae:	1ac9      	subs	r1, r1, r3
 80077b0:	460b      	mov	r3, r1
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	440b      	add	r3, r1
 80077b6:	005b      	lsls	r3, r3, #1
 80077b8:	1ad1      	subs	r1, r2, r3
 80077ba:	b2ca      	uxtb	r2, r1
 80077bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077be:	1c59      	adds	r1, r3, #1
 80077c0:	6339      	str	r1, [r7, #48]	; 0x30
 80077c2:	3230      	adds	r2, #48	; 0x30
 80077c4:	b2d2      	uxtb	r2, r2
 80077c6:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 80077c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ca:	4a52      	ldr	r2, [pc, #328]	; (8007914 <JNtoA+0x32c>)
 80077cc:	fb82 1203 	smull	r1, r2, r2, r3
 80077d0:	1092      	asrs	r2, r2, #2
 80077d2:	17db      	asrs	r3, r3, #31
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	62bb      	str	r3, [r7, #40]	; 0x28
		while (intPart)
 80077d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1e1      	bne.n	80077a2 <JNtoA+0x1ba>
		}

		// save end pos
		p1 = p;
 80077de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e0:	61bb      	str	r3, [r7, #24]

		// reverse result
		while (p > ptr)
 80077e2:	e010      	b.n	8007806 <JNtoA+0x21e>
		{
			c = *--p;
 80077e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e6:	3b01      	subs	r3, #1
 80077e8:	633b      	str	r3, [r7, #48]	; 0x30
 80077ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			*p = *ptr;
 80077f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f4:	781a      	ldrb	r2, [r3, #0]
 80077f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f8:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 80077fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077fc:	1c5a      	adds	r2, r3, #1
 80077fe:	637a      	str	r2, [r7, #52]	; 0x34
 8007800:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007804:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 8007806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800780a:	429a      	cmp	r2, r3
 800780c:	d8ea      	bhi.n	80077e4 <JNtoA+0x1fc>
		}

		// restore end pos
		ptr = p1;
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	637b      	str	r3, [r7, #52]	; 0x34
	}

	// decimal part
	if (precision)
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d03e      	beq.n	8007896 <JNtoA+0x2ae>
	{

		// place decimal point
		*ptr++ = '.';
 8007818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781a:	1c5a      	adds	r2, r3, #1
 800781c:	637a      	str	r2, [r7, #52]	; 0x34
 800781e:	222e      	movs	r2, #46	; 0x2e
 8007820:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 8007822:	e033      	b.n	800788c <JNtoA+0x2a4>
		{
			f *= 10.0;
 8007824:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007828:	f04f 0200 	mov.w	r2, #0
 800782c:	4b35      	ldr	r3, [pc, #212]	; (8007904 <JNtoA+0x31c>)
 800782e:	f7f8 fe5d 	bl	80004ec <__aeabi_dmul>
 8007832:	4603      	mov	r3, r0
 8007834:	460c      	mov	r4, r1
 8007836:	e9c7 3402 	strd	r3, r4, [r7, #8]
			c = f;
 800783a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800783e:	4618      	mov	r0, r3
 8007840:	4621      	mov	r1, r4
 8007842:	f7f9 f915 	bl	8000a70 <__aeabi_d2uiz>
 8007846:	4603      	mov	r3, r0
 8007848:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

			// Invalid floating point numbers (specifically 0xffffff) end up at this point
			// with a c == 255 after the coercion
			if (c > 9) c = 0;
 800784c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007850:	2b09      	cmp	r3, #9
 8007852:	d902      	bls.n	800785a <JNtoA+0x272>
 8007854:	2300      	movs	r3, #0
 8007856:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

			*ptr++ = '0' + c;
 800785a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785c:	1c5a      	adds	r2, r3, #1
 800785e:	637a      	str	r2, [r7, #52]	; 0x34
 8007860:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007864:	3230      	adds	r2, #48	; 0x30
 8007866:	b2d2      	uxtb	r2, r2
 8007868:	701a      	strb	r2, [r3, #0]
			f -= c;
 800786a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800786e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007872:	4618      	mov	r0, r3
 8007874:	f7f8 fdd0 	bl	8000418 <__aeabi_i2d>
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	4620      	mov	r0, r4
 800787e:	4629      	mov	r1, r5
 8007880:	f7f8 fc7c 	bl	800017c <__aeabi_dsub>
 8007884:	4603      	mov	r3, r0
 8007886:	460c      	mov	r4, r1
 8007888:	e9c7 3402 	strd	r3, r4, [r7, #8]
		while (precision--)
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	1e5a      	subs	r2, r3, #1
 8007890:	61fa      	str	r2, [r7, #28]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1c6      	bne.n	8007824 <JNtoA+0x23c>
		}
	}

	// terminating zero
	*ptr = 0;
 8007896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007898:	2200      	movs	r2, #0
 800789a:	701a      	strb	r2, [r3, #0]

	// Remove trailing zero's if automatic precision
	if (NULL != strchr(buf, '.')) {
 800789c:	212e      	movs	r1, #46	; 0x2e
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fe16 	bl	80084d0 <strchr>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d01b      	beq.n	80078e2 <JNtoA+0x2fa>
		if (original_precision < 0) {
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	da18      	bge.n	80078e2 <JNtoA+0x2fa>
			--ptr;
 80078b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b2:	3b01      	subs	r3, #1
 80078b4:	637b      	str	r3, [r7, #52]	; 0x34
			while (ptr > (buf+1) && *ptr == '0')
 80078b6:	e004      	b.n	80078c2 <JNtoA+0x2da>
				*ptr-- = 0;
 80078b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ba:	1e5a      	subs	r2, r3, #1
 80078bc:	637a      	str	r2, [r7, #52]	; 0x34
 80078be:	2200      	movs	r2, #0
 80078c0:	701a      	strb	r2, [r3, #0]
			while (ptr > (buf+1) && *ptr == '0')
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	3301      	adds	r3, #1
 80078c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d903      	bls.n	80078d4 <JNtoA+0x2ec>
 80078cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	2b30      	cmp	r3, #48	; 0x30
 80078d2:	d0f1      	beq.n	80078b8 <JNtoA+0x2d0>
			if (*ptr == '.')
 80078d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	2b2e      	cmp	r3, #46	; 0x2e
 80078da:	d102      	bne.n	80078e2 <JNtoA+0x2fa>
				*ptr = 0;
 80078dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078de:	2200      	movs	r2, #0
 80078e0:	701a      	strb	r2, [r3, #0]
		}
	}

	return buf;
 80078e2:	687b      	ldr	r3, [r7, #4]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3738      	adds	r7, #56	; 0x38
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bdb0      	pop	{r4, r5, r7, pc}
 80078ec:	f3af 8000 	nop.w
 80078f0:	00000000 	.word	0x00000000
 80078f4:	40c38800 	.word	0x40c38800
 80078f8:	00000000 	.word	0x00000000
 80078fc:	40f86a00 	.word	0x40f86a00
 8007900:	3ff00000 	.word	0x3ff00000
 8007904:	40240000 	.word	0x40240000
 8007908:	40590000 	.word	0x40590000
 800790c:	408f4000 	.word	0x408f4000
 8007910:	08008f68 	.word	0x08008f68
 8007914:	66666667 	.word	0x66666667

08007918 <NoteSetFn>:
        hookDelayMs = delayfn;
    if (hookGetMs == NULL)
        hookGetMs = millisfn;
}
// Set the debug output hook
void NoteSetFn(mallocFn mallocfn, freeFn freefn, delayMsFn delayfn, getMsFn millisfn) {
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
 8007924:	603b      	str	r3, [r7, #0]
    hookMalloc = mallocfn;
 8007926:	4a08      	ldr	r2, [pc, #32]	; (8007948 <NoteSetFn+0x30>)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6013      	str	r3, [r2, #0]
    hookFree = freefn;
 800792c:	4a07      	ldr	r2, [pc, #28]	; (800794c <NoteSetFn+0x34>)
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	6013      	str	r3, [r2, #0]
    hookDelayMs = delayfn;
 8007932:	4a07      	ldr	r2, [pc, #28]	; (8007950 <NoteSetFn+0x38>)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6013      	str	r3, [r2, #0]
    hookGetMs = millisfn;
 8007938:	4a06      	ldr	r2, [pc, #24]	; (8007954 <NoteSetFn+0x3c>)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	6013      	str	r3, [r2, #0]
}
 800793e:	bf00      	nop
 8007940:	3714      	adds	r7, #20
 8007942:	46bd      	mov	sp, r7
 8007944:	bc80      	pop	{r7}
 8007946:	4770      	bx	lr
 8007948:	2000048c 	.word	0x2000048c
 800794c:	20000490 	.word	0x20000490
 8007950:	20000494 	.word	0x20000494
 8007954:	20000498 	.word	0x20000498

08007958 <NoteSetFnI2C>:

    notecardReset = serialNoteReset;
    notecardTransaction = serialNoteTransaction;
}

void NoteSetFnI2C(uint32_t i2caddress, uint32_t i2cmax, i2cResetFn resetfn, i2cTransmitFn transmitfn, i2cReceiveFn receivefn) {
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
 8007964:	603b      	str	r3, [r7, #0]
    i2cAddress = i2caddress;
 8007966:	4a0e      	ldr	r2, [pc, #56]	; (80079a0 <NoteSetFnI2C+0x48>)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6013      	str	r3, [r2, #0]
    i2cMax = i2cmax;
 800796c:	4a0d      	ldr	r2, [pc, #52]	; (80079a4 <NoteSetFnI2C+0x4c>)
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	6013      	str	r3, [r2, #0]

    hookActiveInterface = interfaceI2C;
 8007972:	4b0d      	ldr	r3, [pc, #52]	; (80079a8 <NoteSetFnI2C+0x50>)
 8007974:	2202      	movs	r2, #2
 8007976:	601a      	str	r2, [r3, #0]

    hookI2CReset = resetfn;
 8007978:	4a0c      	ldr	r2, [pc, #48]	; (80079ac <NoteSetFnI2C+0x54>)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6013      	str	r3, [r2, #0]
    hookI2CTransmit = transmitfn;
 800797e:	4a0c      	ldr	r2, [pc, #48]	; (80079b0 <NoteSetFnI2C+0x58>)
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	6013      	str	r3, [r2, #0]
    hookI2CReceive = receivefn;
 8007984:	4a0b      	ldr	r2, [pc, #44]	; (80079b4 <NoteSetFnI2C+0x5c>)
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	6013      	str	r3, [r2, #0]

    notecardReset = i2cNoteReset;
 800798a:	4b0b      	ldr	r3, [pc, #44]	; (80079b8 <NoteSetFnI2C+0x60>)
 800798c:	4a0b      	ldr	r2, [pc, #44]	; (80079bc <NoteSetFnI2C+0x64>)
 800798e:	601a      	str	r2, [r3, #0]
    notecardTransaction = i2cNoteTransaction;
 8007990:	4b0b      	ldr	r3, [pc, #44]	; (80079c0 <NoteSetFnI2C+0x68>)
 8007992:	4a0c      	ldr	r2, [pc, #48]	; (80079c4 <NoteSetFnI2C+0x6c>)
 8007994:	601a      	str	r2, [r3, #0]
}
 8007996:	bf00      	nop
 8007998:	3714      	adds	r7, #20
 800799a:	46bd      	mov	sp, r7
 800799c:	bc80      	pop	{r7}
 800799e:	4770      	bx	lr
 80079a0:	200004a0 	.word	0x200004a0
 80079a4:	200004a4 	.word	0x200004a4
 80079a8:	2000049c 	.word	0x2000049c
 80079ac:	200004a8 	.word	0x200004a8
 80079b0:	200004ac 	.word	0x200004ac
 80079b4:	200004b0 	.word	0x200004b0
 80079b8:	200004b4 	.word	0x200004b4
 80079bc:	08007f15 	.word	0x08007f15
 80079c0:	200004b8 	.word	0x200004b8
 80079c4:	08007c85 	.word	0x08007c85

080079c8 <NoteFnDebug>:


// Runtime hook wrappers
void NoteFnDebug(const char *format, ...) {
 80079c8:	b40f      	push	{r0, r1, r2, r3}
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b0c2      	sub	sp, #264	; 0x108
 80079ce:	af00      	add	r7, sp, #0
    if (hookDebugOutput != NULL) {
 80079d0:	4b0e      	ldr	r3, [pc, #56]	; (8007a0c <NoteFnDebug+0x44>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d011      	beq.n	80079fc <NoteFnDebug+0x34>
        char line[256];
        va_list args;
        va_start(args, format);
 80079d8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80079dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        vsnprintf(line, sizeof(line), format, args);
 80079e0:	1d38      	adds	r0, r7, #4
 80079e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079e6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80079ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80079ee:	f000 fdbb 	bl	8008568 <vsniprintf>
        va_end(args);
        hookDebugOutput(line);
 80079f2:	4b06      	ldr	r3, [pc, #24]	; (8007a0c <NoteFnDebug+0x44>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	1d3a      	adds	r2, r7, #4
 80079f8:	4610      	mov	r0, r2
 80079fa:	4798      	blx	r3
    }
}
 80079fc:	bf00      	nop
 80079fe:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007a02:	46bd      	mov	sp, r7
 8007a04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a08:	b004      	add	sp, #16
 8007a0a:	4770      	bx	lr
 8007a0c:	20000478 	.word	0x20000478

08007a10 <NoteFnGetMs>:
long unsigned int NoteFnGetMs() {
 8007a10:	b580      	push	{r7, lr}
 8007a12:	af00      	add	r7, sp, #0
    if (hookGetMs == NULL)
 8007a14:	4b05      	ldr	r3, [pc, #20]	; (8007a2c <NoteFnGetMs+0x1c>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d101      	bne.n	8007a20 <NoteFnGetMs+0x10>
        return 0;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	e003      	b.n	8007a28 <NoteFnGetMs+0x18>
    return hookGetMs();
 8007a20:	4b02      	ldr	r3, [pc, #8]	; (8007a2c <NoteFnGetMs+0x1c>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4798      	blx	r3
 8007a26:	4603      	mov	r3, r0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	20000498 	.word	0x20000498

08007a30 <NoteFnDelayMs>:
void NoteFnDelayMs(uint32_t ms) {
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
    if (hookDelayMs != NULL)
 8007a38:	4b05      	ldr	r3, [pc, #20]	; (8007a50 <NoteFnDelayMs+0x20>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d003      	beq.n	8007a48 <NoteFnDelayMs+0x18>
        hookDelayMs(ms);
 8007a40:	4b03      	ldr	r3, [pc, #12]	; (8007a50 <NoteFnDelayMs+0x20>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	4798      	blx	r3
}
 8007a48:	bf00      	nop
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	20000494 	.word	0x20000494

08007a54 <NoteFnMalloc>:
void *NoteFnMalloc(size_t size) {
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
    if (hookMalloc == NULL)
 8007a5c:	4b07      	ldr	r3, [pc, #28]	; (8007a7c <NoteFnMalloc+0x28>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <NoteFnMalloc+0x14>
        return NULL;
 8007a64:	2300      	movs	r3, #0
 8007a66:	e004      	b.n	8007a72 <NoteFnMalloc+0x1e>
    return hookMalloc(size);
 8007a68:	4b04      	ldr	r3, [pc, #16]	; (8007a7c <NoteFnMalloc+0x28>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	4798      	blx	r3
 8007a70:	4603      	mov	r3, r0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	2000048c 	.word	0x2000048c

08007a80 <NoteFnFree>:
void NoteFnFree(void *p) {
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
    if (hookFree != NULL)
 8007a88:	4b05      	ldr	r3, [pc, #20]	; (8007aa0 <NoteFnFree+0x20>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d003      	beq.n	8007a98 <NoteFnFree+0x18>
        hookFree(p);
 8007a90:	4b03      	ldr	r3, [pc, #12]	; (8007aa0 <NoteFnFree+0x20>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	4798      	blx	r3
}
 8007a98:	bf00      	nop
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	20000490 	.word	0x20000490

08007aa4 <NoteFnLockI2C>:
void NoteFnLockI2C() {
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	af00      	add	r7, sp, #0
    if (hookLockI2C != NULL)
 8007aa8:	4b04      	ldr	r3, [pc, #16]	; (8007abc <NoteFnLockI2C+0x18>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d002      	beq.n	8007ab6 <NoteFnLockI2C+0x12>
        hookLockI2C();
 8007ab0:	4b02      	ldr	r3, [pc, #8]	; (8007abc <NoteFnLockI2C+0x18>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4798      	blx	r3
}
 8007ab6:	bf00      	nop
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	2000047c 	.word	0x2000047c

08007ac0 <NoteFnUnlockI2C>:
void NoteFnUnlockI2C() {
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	af00      	add	r7, sp, #0
    if (hookUnlockI2C != NULL)
 8007ac4:	4b04      	ldr	r3, [pc, #16]	; (8007ad8 <NoteFnUnlockI2C+0x18>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d002      	beq.n	8007ad2 <NoteFnUnlockI2C+0x12>
        hookUnlockI2C();
 8007acc:	4b02      	ldr	r3, [pc, #8]	; (8007ad8 <NoteFnUnlockI2C+0x18>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4798      	blx	r3
}
 8007ad2:	bf00      	nop
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	20000480 	.word	0x20000480

08007adc <NoteFnLockNote>:
void NoteFnLockNote() {
 8007adc:	b580      	push	{r7, lr}
 8007ade:	af00      	add	r7, sp, #0
    if (hookLockNote != NULL)
 8007ae0:	4b04      	ldr	r3, [pc, #16]	; (8007af4 <NoteFnLockNote+0x18>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d002      	beq.n	8007aee <NoteFnLockNote+0x12>
        hookLockNote();
 8007ae8:	4b02      	ldr	r3, [pc, #8]	; (8007af4 <NoteFnLockNote+0x18>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4798      	blx	r3
}
 8007aee:	bf00      	nop
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	20000484 	.word	0x20000484

08007af8 <NoteFnUnlockNote>:
void NoteFnUnlockNote() {
 8007af8:	b580      	push	{r7, lr}
 8007afa:	af00      	add	r7, sp, #0
    if (hookUnlockNote != NULL)
 8007afc:	4b04      	ldr	r3, [pc, #16]	; (8007b10 <NoteFnUnlockNote+0x18>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d002      	beq.n	8007b0a <NoteFnUnlockNote+0x12>
        hookUnlockNote();
 8007b04:	4b02      	ldr	r3, [pc, #8]	; (8007b10 <NoteFnUnlockNote+0x18>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4798      	blx	r3
}
 8007b0a:	bf00      	nop
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	20000488 	.word	0x20000488

08007b14 <NoteFnI2CReset>:
char NoteFnSerialReceive() {
    if (hookActiveInterface == interfaceSerial && hookSerialReceive != NULL)
        return hookSerialReceive();
    return 0;
}
void NoteFnI2CReset() {
 8007b14:	b580      	push	{r7, lr}
 8007b16:	af00      	add	r7, sp, #0
    if (hookActiveInterface == interfaceI2C && hookI2CReset != NULL)
 8007b18:	4b06      	ldr	r3, [pc, #24]	; (8007b34 <NoteFnI2CReset+0x20>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d106      	bne.n	8007b2e <NoteFnI2CReset+0x1a>
 8007b20:	4b05      	ldr	r3, [pc, #20]	; (8007b38 <NoteFnI2CReset+0x24>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d002      	beq.n	8007b2e <NoteFnI2CReset+0x1a>
        hookI2CReset();
 8007b28:	4b03      	ldr	r3, [pc, #12]	; (8007b38 <NoteFnI2CReset+0x24>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4798      	blx	r3
}
 8007b2e:	bf00      	nop
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	2000049c 	.word	0x2000049c
 8007b38:	200004a8 	.word	0x200004a8

08007b3c <NoteFnI2CTransmit>:
const char *NoteFnI2CTransmit(uint16_t DevAddress, uint8_t* pBuffer, uint16_t Size) {
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	4603      	mov	r3, r0
 8007b44:	6039      	str	r1, [r7, #0]
 8007b46:	80fb      	strh	r3, [r7, #6]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	80bb      	strh	r3, [r7, #4]
    if (hookActiveInterface == interfaceI2C && hookI2CTransmit != NULL)
 8007b4c:	4b0a      	ldr	r3, [pc, #40]	; (8007b78 <NoteFnI2CTransmit+0x3c>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d10b      	bne.n	8007b6c <NoteFnI2CTransmit+0x30>
 8007b54:	4b09      	ldr	r3, [pc, #36]	; (8007b7c <NoteFnI2CTransmit+0x40>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d007      	beq.n	8007b6c <NoteFnI2CTransmit+0x30>
        return hookI2CTransmit(DevAddress, pBuffer, Size);
 8007b5c:	4b07      	ldr	r3, [pc, #28]	; (8007b7c <NoteFnI2CTransmit+0x40>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	88ba      	ldrh	r2, [r7, #4]
 8007b62:	88f8      	ldrh	r0, [r7, #6]
 8007b64:	6839      	ldr	r1, [r7, #0]
 8007b66:	4798      	blx	r3
 8007b68:	4603      	mov	r3, r0
 8007b6a:	e000      	b.n	8007b6e <NoteFnI2CTransmit+0x32>
    return "i2c not active";
 8007b6c:	4b04      	ldr	r3, [pc, #16]	; (8007b80 <NoteFnI2CTransmit+0x44>)
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	2000049c 	.word	0x2000049c
 8007b7c:	200004ac 	.word	0x200004ac
 8007b80:	08008d68 	.word	0x08008d68

08007b84 <NoteFnI2CReceive>:
const char *NoteFnI2CReceive(uint16_t DevAddress, uint8_t* pBuffer, uint16_t Size, uint32_t *available) {
 8007b84:	b590      	push	{r4, r7, lr}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60b9      	str	r1, [r7, #8]
 8007b8c:	607b      	str	r3, [r7, #4]
 8007b8e:	4603      	mov	r3, r0
 8007b90:	81fb      	strh	r3, [r7, #14]
 8007b92:	4613      	mov	r3, r2
 8007b94:	81bb      	strh	r3, [r7, #12]
    if (hookActiveInterface == interfaceI2C && hookI2CReceive != NULL)
 8007b96:	4b0b      	ldr	r3, [pc, #44]	; (8007bc4 <NoteFnI2CReceive+0x40>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d10c      	bne.n	8007bb8 <NoteFnI2CReceive+0x34>
 8007b9e:	4b0a      	ldr	r3, [pc, #40]	; (8007bc8 <NoteFnI2CReceive+0x44>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d008      	beq.n	8007bb8 <NoteFnI2CReceive+0x34>
        return hookI2CReceive(DevAddress, pBuffer, Size, available);
 8007ba6:	4b08      	ldr	r3, [pc, #32]	; (8007bc8 <NoteFnI2CReceive+0x44>)
 8007ba8:	681c      	ldr	r4, [r3, #0]
 8007baa:	89ba      	ldrh	r2, [r7, #12]
 8007bac:	89f8      	ldrh	r0, [r7, #14]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68b9      	ldr	r1, [r7, #8]
 8007bb2:	47a0      	blx	r4
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	e000      	b.n	8007bba <NoteFnI2CReceive+0x36>
    return "i2c not active";
 8007bb8:	4b04      	ldr	r3, [pc, #16]	; (8007bcc <NoteFnI2CReceive+0x48>)
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3714      	adds	r7, #20
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd90      	pop	{r4, r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	2000049c 	.word	0x2000049c
 8007bc8:	200004b0 	.word	0x200004b0
 8007bcc:	08008d68 	.word	0x08008d68

08007bd0 <NoteFnI2CAddress>:
uint32_t NoteFnI2CAddress() {
 8007bd0:	b480      	push	{r7}
 8007bd2:	af00      	add	r7, sp, #0
    if (i2cAddress == NOTE_I2C_MAX_DEFAULT)
 8007bd4:	4b05      	ldr	r3, [pc, #20]	; (8007bec <NoteFnI2CAddress+0x1c>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d101      	bne.n	8007be0 <NoteFnI2CAddress+0x10>
        return 0x17;
 8007bdc:	2317      	movs	r3, #23
 8007bde:	e001      	b.n	8007be4 <NoteFnI2CAddress+0x14>
    return i2cAddress;
 8007be0:	4b02      	ldr	r3, [pc, #8]	; (8007bec <NoteFnI2CAddress+0x1c>)
 8007be2:	681b      	ldr	r3, [r3, #0]
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bc80      	pop	{r7}
 8007bea:	4770      	bx	lr
 8007bec:	200004a0 	.word	0x200004a0

08007bf0 <NoteFnI2CMax>:
uint32_t NoteFnI2CMax() {
 8007bf0:	b480      	push	{r7}
 8007bf2:	af00      	add	r7, sp, #0
    // Many Arduino libraries (such as ESP32) have a limit less than 32, so if the max isn't specified
    // we must assume the worst and segment the I2C messages into very tiny chunks.
    if (i2cMax == NOTE_I2C_MAX_DEFAULT)
 8007bf4:	4b09      	ldr	r3, [pc, #36]	; (8007c1c <NoteFnI2CMax+0x2c>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d101      	bne.n	8007c00 <NoteFnI2CMax+0x10>
        return 30;
 8007bfc:	231e      	movs	r3, #30
 8007bfe:	e008      	b.n	8007c12 <NoteFnI2CMax+0x22>
    // Note design specs
    if (i2cMax > 127)
 8007c00:	4b06      	ldr	r3, [pc, #24]	; (8007c1c <NoteFnI2CMax+0x2c>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2b7f      	cmp	r3, #127	; 0x7f
 8007c06:	d902      	bls.n	8007c0e <NoteFnI2CMax+0x1e>
        i2cMax = 127;
 8007c08:	4b04      	ldr	r3, [pc, #16]	; (8007c1c <NoteFnI2CMax+0x2c>)
 8007c0a:	227f      	movs	r2, #127	; 0x7f
 8007c0c:	601a      	str	r2, [r3, #0]
    return i2cMax;
 8007c0e:	4b03      	ldr	r3, [pc, #12]	; (8007c1c <NoteFnI2CMax+0x2c>)
 8007c10:	681b      	ldr	r3, [r3, #0]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bc80      	pop	{r7}
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	200004a4 	.word	0x200004a4

08007c20 <NoteFnNoteReset>:

bool NoteFnNoteReset() {
 8007c20:	b580      	push	{r7, lr}
 8007c22:	af00      	add	r7, sp, #0
    if (notecardReset == NULL)
 8007c24:	4b05      	ldr	r3, [pc, #20]	; (8007c3c <NoteFnNoteReset+0x1c>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d101      	bne.n	8007c30 <NoteFnNoteReset+0x10>
        return "notecard not initialized";
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e003      	b.n	8007c38 <NoteFnNoteReset+0x18>
    return notecardReset();
 8007c30:	4b02      	ldr	r3, [pc, #8]	; (8007c3c <NoteFnNoteReset+0x1c>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4798      	blx	r3
 8007c36:	4603      	mov	r3, r0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	200004b4 	.word	0x200004b4

08007c40 <NoteFnTransaction>:
const char *NoteFnTransaction(char *json, char **jsonResponse) {
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
    if (notecardTransaction == NULL)
 8007c4a:	4b08      	ldr	r3, [pc, #32]	; (8007c6c <NoteFnTransaction+0x2c>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <NoteFnTransaction+0x16>
        return "notecard not initialized";
 8007c52:	4b07      	ldr	r3, [pc, #28]	; (8007c70 <NoteFnTransaction+0x30>)
 8007c54:	e005      	b.n	8007c62 <NoteFnTransaction+0x22>
    return notecardTransaction(json, jsonResponse);
 8007c56:	4b05      	ldr	r3, [pc, #20]	; (8007c6c <NoteFnTransaction+0x2c>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	6839      	ldr	r1, [r7, #0]
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	4798      	blx	r3
 8007c60:	4603      	mov	r3, r0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	200004b8 	.word	0x200004b8
 8007c70:	08008d78 	.word	0x08008d78

08007c74 <_DelayIO>:
#include "n_lib.h"

// We've noticed that there's an instability in some cards' implementations of I2C, and as a result
// we introduce an intentional delay before each and every I2C I/O.	 The timing was computed empirically based
// on a number of commercial devices.
static void _DelayIO() {
 8007c74:	b580      	push	{r7, lr}
 8007c76:	af00      	add	r7, sp, #0
	_DelayMs(6);
 8007c78:	2006      	movs	r0, #6
 8007c7a:	f7ff fed9 	bl	8007a30 <NoteFnDelayMs>
}
 8007c7e:	bf00      	nop
 8007c80:	bd80      	pop	{r7, pc}
	...

08007c84 <i2cNoteTransaction>:

// Initiate a transaction to the notecard using reqdoc, and return the result in rspdoc
const char *i2cNoteTransaction(char *json, char **jsonResponse) {
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b092      	sub	sp, #72	; 0x48
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]

	// Append '\n' to the transaction
	int jsonLen = strlen(json)+1;
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7f8 fa68 	bl	8000164 <strlen>
 8007c94:	4603      	mov	r3, r0
 8007c96:	3301      	adds	r3, #1
 8007c98:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t *transmitBuf = (uint8_t *) _Malloc(jsonLen);
 8007c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7ff fed9 	bl	8007a54 <NoteFnMalloc>
 8007ca2:	6278      	str	r0, [r7, #36]	; 0x24
	if (transmitBuf == NULL)
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d101      	bne.n	8007cae <i2cNoteTransaction+0x2a>
		return "insufficient memory";
 8007caa:	4b92      	ldr	r3, [pc, #584]	; (8007ef4 <i2cNoteTransaction+0x270>)
 8007cac:	e11d      	b.n	8007eea <i2cNoteTransaction+0x266>
	memcpy(transmitBuf, json, jsonLen-1);
 8007cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	6879      	ldr	r1, [r7, #4]
 8007cb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007cb8:	f000 fb28 	bl	800830c <memcpy>
	transmitBuf[jsonLen-1] = '\n';
 8007cbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cc2:	4413      	add	r3, r2
 8007cc4:	220a      	movs	r2, #10
 8007cc6:	701a      	strb	r2, [r3, #0]

	// Transmit the request in chunks, but also in segments so as not to overwhelm the notecard's interrupt buffers
	const char *errstr;
	uint8_t *chunk = transmitBuf;
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t sentInSegment = 0;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (jsonLen > 0) {
 8007cd0:	e046      	b.n	8007d60 <i2cNoteTransaction+0xdc>
		int chunklen = (uint8_t) (jsonLen > (int)_I2CMax() ? (int)_I2CMax() : jsonLen);
 8007cd2:	f7ff ff8d 	bl	8007bf0 <NoteFnI2CMax>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	461a      	mov	r2, r3
 8007cda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	dd04      	ble.n	8007cea <i2cNoteTransaction+0x66>
 8007ce0:	f7ff ff86 	bl	8007bf0 <NoteFnI2CMax>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	e001      	b.n	8007cee <i2cNoteTransaction+0x6a>
 8007cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	613b      	str	r3, [r7, #16]
		_LockI2C();
 8007cf0:	f7ff fed8 	bl	8007aa4 <NoteFnLockI2C>
		_DelayIO();
 8007cf4:	f7ff ffbe 	bl	8007c74 <_DelayIO>
		errstr = _I2CTransmit(_I2CAddress(), chunk, chunklen);
 8007cf8:	f7ff ff6a 	bl	8007bd0 <NoteFnI2CAddress>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	693a      	ldr	r2, [r7, #16]
 8007d02:	b292      	uxth	r2, r2
 8007d04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7ff ff18 	bl	8007b3c <NoteFnI2CTransmit>
 8007d0c:	60f8      	str	r0, [r7, #12]
		if (errstr != NULL) {
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00c      	beq.n	8007d2e <i2cNoteTransaction+0xaa>
			_Free(transmitBuf);
 8007d14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d16:	f7ff feb3 	bl	8007a80 <NoteFnFree>
			_I2CReset();
 8007d1a:	f7ff fefb 	bl	8007b14 <NoteFnI2CReset>
			_UnlockI2C();
 8007d1e:	f7ff fecf 	bl	8007ac0 <NoteFnUnlockI2C>
			_Debug("i2c transmit: %s\n", errstr);
 8007d22:	68f9      	ldr	r1, [r7, #12]
 8007d24:	4874      	ldr	r0, [pc, #464]	; (8007ef8 <i2cNoteTransaction+0x274>)
 8007d26:	f7ff fe4f 	bl	80079c8 <NoteFnDebug>
			return errstr;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	e0dd      	b.n	8007eea <i2cNoteTransaction+0x266>
		}
		_UnlockI2C();
 8007d2e:	f7ff fec7 	bl	8007ac0 <NoteFnUnlockI2C>
		chunk += chunklen;
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d36:	4413      	add	r3, r2
 8007d38:	643b      	str	r3, [r7, #64]	; 0x40
		jsonLen -= chunklen;
 8007d3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	647b      	str	r3, [r7, #68]	; 0x44
		sentInSegment += chunklen;
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d46:	4413      	add	r3, r2
 8007d48:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (sentInSegment > CARD_REQUEST_SEGMENT_MAX_LEN) {
 8007d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d50:	d906      	bls.n	8007d60 <i2cNoteTransaction+0xdc>
			sentInSegment -= CARD_REQUEST_SEGMENT_MAX_LEN;
 8007d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d54:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8007d58:	63fb      	str	r3, [r7, #60]	; 0x3c
			_DelayMs(CARD_REQUEST_SEGMENT_DELAY_MS);
 8007d5a:	20fa      	movs	r0, #250	; 0xfa
 8007d5c:	f7ff fe68 	bl	8007a30 <NoteFnDelayMs>
	while (jsonLen > 0) {
 8007d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	dcb5      	bgt.n	8007cd2 <i2cNoteTransaction+0x4e>
		}
	}

	// Free the transmit buffer
	_Free(transmitBuf);
 8007d66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d68:	f7ff fe8a 	bl	8007a80 <NoteFnFree>

	// Dynamically grow the buffer as we read.	Note that we always put the +1 in the alloc
	// so we can be assured that it can be null-terminated, which must be the case because
	// our json parser requires a null-terminated string.
	int jsonbufAllocLen = 1024;
 8007d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d70:	63bb      	str	r3, [r7, #56]	; 0x38
	char *jsonbuf = (char *) _Malloc(jsonbufAllocLen+1);
 8007d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d74:	3301      	adds	r3, #1
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7ff fe6c 	bl	8007a54 <NoteFnMalloc>
 8007d7c:	6378      	str	r0, [r7, #52]	; 0x34
	if (jsonbuf == NULL) {
 8007d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d105      	bne.n	8007d90 <i2cNoteTransaction+0x10c>
		_Debug("transaction: jsonbuf malloc(%d) failed\n", jsonbufAllocLen);
 8007d84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d86:	485d      	ldr	r0, [pc, #372]	; (8007efc <i2cNoteTransaction+0x278>)
 8007d88:	f7ff fe1e 	bl	80079c8 <NoteFnDebug>
		return "insufficient memory";
 8007d8c:	4b59      	ldr	r3, [pc, #356]	; (8007ef4 <i2cNoteTransaction+0x270>)
 8007d8e:	e0ac      	b.n	8007eea <i2cNoteTransaction+0x266>
	}

	// Loop, building a reply buffer out of received chunks.  We'll build the reply in the same
	// buffer we used to transmit, and will grow it as necessary.
	bool receivedNewline = false;
 8007d90:	2300      	movs	r3, #0
 8007d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	int jsonbufLen = 0;
 8007d96:	2300      	movs	r3, #0
 8007d98:	62fb      	str	r3, [r7, #44]	; 0x2c
	int chunklen = 0;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t start = _GetMs();
 8007d9e:	f7ff fe37 	bl	8007a10 <NoteFnGetMs>
 8007da2:	6238      	str	r0, [r7, #32]
	while (true) {

		// Grow the buffer as necessary to read this next chunk
		if (jsonbufLen + chunklen > jsonbufAllocLen) {
 8007da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da8:	4413      	add	r3, r2
 8007daa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dac:	429a      	cmp	r2, r3
 8007dae:	da2c      	bge.n	8007e0a <i2cNoteTransaction+0x186>
			int growlen = 1024;
 8007db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007db4:	61fb      	str	r3, [r7, #28]
			if (chunklen > growlen)
 8007db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	dd04      	ble.n	8007dc8 <i2cNoteTransaction+0x144>
				jsonbufAllocLen += chunklen;
 8007dbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc2:	4413      	add	r3, r2
 8007dc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007dc6:	e003      	b.n	8007dd0 <i2cNoteTransaction+0x14c>
			else
				jsonbufAllocLen += growlen;
 8007dc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	4413      	add	r3, r2
 8007dce:	63bb      	str	r3, [r7, #56]	; 0x38
			char *jsonbufNew = (char *) _Malloc(jsonbufAllocLen+1);
 8007dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7ff fe3d 	bl	8007a54 <NoteFnMalloc>
 8007dda:	61b8      	str	r0, [r7, #24]
			if (jsonbufNew == NULL) {
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d108      	bne.n	8007df4 <i2cNoteTransaction+0x170>
				_Debug("transaction: jsonbuf grow malloc(%d) failed\n", jsonbufAllocLen);
 8007de2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007de4:	4846      	ldr	r0, [pc, #280]	; (8007f00 <i2cNoteTransaction+0x27c>)
 8007de6:	f7ff fdef 	bl	80079c8 <NoteFnDebug>
				_Free(jsonbuf);
 8007dea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007dec:	f7ff fe48 	bl	8007a80 <NoteFnFree>
				return "insufficient memory";
 8007df0:	4b40      	ldr	r3, [pc, #256]	; (8007ef4 <i2cNoteTransaction+0x270>)
 8007df2:	e07a      	b.n	8007eea <i2cNoteTransaction+0x266>
			}
			memcpy(jsonbufNew, jsonbuf, jsonbufLen);
 8007df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df6:	461a      	mov	r2, r3
 8007df8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007dfa:	69b8      	ldr	r0, [r7, #24]
 8007dfc:	f000 fa86 	bl	800830c <memcpy>
			_Free(jsonbuf);
 8007e00:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007e02:	f7ff fe3d 	bl	8007a80 <NoteFnFree>
			jsonbuf = jsonbufNew;
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	637b      	str	r3, [r7, #52]	; 0x34
		}

		// Read the chunk
		uint32_t available;
		_LockI2C();
 8007e0a:	f7ff fe4b 	bl	8007aa4 <NoteFnLockI2C>
		_DelayIO();
 8007e0e:	f7ff ff31 	bl	8007c74 <_DelayIO>
		const char *err = _I2CReceive(_I2CAddress(), (uint8_t *) &jsonbuf[jsonbufLen], chunklen, &available);
 8007e12:	f7ff fedd 	bl	8007bd0 <NoteFnI2CAddress>
 8007e16:	4603      	mov	r3, r0
 8007e18:	b298      	uxth	r0, r3
 8007e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e1e:	18d1      	adds	r1, r2, r3
 8007e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	f107 0308 	add.w	r3, r7, #8
 8007e28:	f7ff feac 	bl	8007b84 <NoteFnI2CReceive>
 8007e2c:	6178      	str	r0, [r7, #20]
		_UnlockI2C();
 8007e2e:	f7ff fe47 	bl	8007ac0 <NoteFnUnlockI2C>
		if (err != NULL) {
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d009      	beq.n	8007e4c <i2cNoteTransaction+0x1c8>
			_Free(jsonbuf);
 8007e38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007e3a:	f7ff fe21 	bl	8007a80 <NoteFnFree>
			_Debug("%s: read of %d bytes\n", err, chunklen);
 8007e3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e40:	6979      	ldr	r1, [r7, #20]
 8007e42:	4830      	ldr	r0, [pc, #192]	; (8007f04 <i2cNoteTransaction+0x280>)
 8007e44:	f7ff fdc0 	bl	80079c8 <NoteFnDebug>
			return err;
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	e04e      	b.n	8007eea <i2cNoteTransaction+0x266>
		}

		// We've now received the chunk
		jsonbufLen += chunklen;
 8007e4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e50:	4413      	add	r3, r2
 8007e52:	62fb      	str	r3, [r7, #44]	; 0x2c

		// If the last byte of the chunk is \n, chances are that we're done.  However, just so
		// that we pull everything pending from the module, we only exit when we've received
		// a newline AND there's nothing left available from the module.
		if (jsonbufLen > 0 && jsonbuf[jsonbufLen-1] == '\n')
 8007e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	dd09      	ble.n	8007e6e <i2cNoteTransaction+0x1ea>
 8007e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e60:	4413      	add	r3, r2
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	2b0a      	cmp	r3, #10
 8007e66:	d102      	bne.n	8007e6e <i2cNoteTransaction+0x1ea>
			receivedNewline = true;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		// For the next iteration, read the min of what's available and what we're permitted to read
		chunklen = (int) (available > _I2CMax() ? _I2CMax() : available);
 8007e6e:	f7ff febf 	bl	8007bf0 <NoteFnI2CMax>
 8007e72:	4602      	mov	r2, r0
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d203      	bcs.n	8007e82 <i2cNoteTransaction+0x1fe>
 8007e7a:	f7ff feb9 	bl	8007bf0 <NoteFnI2CMax>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	e000      	b.n	8007e84 <i2cNoteTransaction+0x200>
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	62bb      	str	r3, [r7, #40]	; 0x28

		// If there's something available on the notecard for us to receive, do it
		if (chunklen > 0)
 8007e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	dc2c      	bgt.n	8007ee6 <i2cNoteTransaction+0x262>
			continue;

		// If there's nothing available AND we've received a newline, we're done
		if (receivedNewline)
 8007e8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d009      	beq.n	8007ea8 <i2cNoteTransaction+0x224>
		_DelayMs(50);

	}

	// Null-terminate it, using the +1 space that we'd allocated in the buffer
	jsonbuf[jsonbufLen] = '\0';
 8007e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e98:	4413      	add	r3, r2
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	701a      	strb	r2, [r3, #0]

	// Return it
	*jsonResponse = jsonbuf;
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ea2:	601a      	str	r2, [r3, #0]
	return NULL;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	e020      	b.n	8007eea <i2cNoteTransaction+0x266>
		if (_GetMs() >= start + (NOTECARD_TRANSACTION_TIMEOUT_SEC*1000)) {
 8007ea8:	f7ff fdb2 	bl	8007a10 <NoteFnGetMs>
 8007eac:	4602      	mov	r2, r0
 8007eae:	6a3b      	ldr	r3, [r7, #32]
 8007eb0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8007eb4:	3310      	adds	r3, #16
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d311      	bcc.n	8007ede <i2cNoteTransaction+0x25a>
			_Free(jsonbuf);
 8007eba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007ebc:	f7ff fde0 	bl	8007a80 <NoteFnFree>
			_Debug("reply to request didn't arrive from module in %ld sec\n", (_GetMs() - start)/1000);
 8007ec0:	f7ff fda6 	bl	8007a10 <NoteFnGetMs>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	6a3b      	ldr	r3, [r7, #32]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	4a0f      	ldr	r2, [pc, #60]	; (8007f08 <i2cNoteTransaction+0x284>)
 8007ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed0:	099b      	lsrs	r3, r3, #6
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	480d      	ldr	r0, [pc, #52]	; (8007f0c <i2cNoteTransaction+0x288>)
 8007ed6:	f7ff fd77 	bl	80079c8 <NoteFnDebug>
			return "notecard request or response was lost";
 8007eda:	4b0d      	ldr	r3, [pc, #52]	; (8007f10 <i2cNoteTransaction+0x28c>)
 8007edc:	e005      	b.n	8007eea <i2cNoteTransaction+0x266>
		_DelayMs(50);
 8007ede:	2032      	movs	r0, #50	; 0x32
 8007ee0:	f7ff fda6 	bl	8007a30 <NoteFnDelayMs>
 8007ee4:	e75e      	b.n	8007da4 <i2cNoteTransaction+0x120>
			continue;
 8007ee6:	bf00      	nop
	while (true) {
 8007ee8:	e75c      	b.n	8007da4 <i2cNoteTransaction+0x120>
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3748      	adds	r7, #72	; 0x48
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	08008d94 	.word	0x08008d94
 8007ef8:	08008da8 	.word	0x08008da8
 8007efc:	08008dbc 	.word	0x08008dbc
 8007f00:	08008de4 	.word	0x08008de4
 8007f04:	08008e14 	.word	0x08008e14
 8007f08:	10624dd3 	.word	0x10624dd3
 8007f0c:	08008e2c 	.word	0x08008e2c
 8007f10:	08008e64 	.word	0x08008e64

08007f14 <i2cNoteReset>:

// Initialize or re-initialize the module, returning false if anything fails
bool i2cNoteReset() {
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b0a6      	sub	sp, #152	; 0x98
 8007f18:	af00      	add	r7, sp, #0

	// Reset the I2C subsystem
	_LockI2C();
 8007f1a:	f7ff fdc3 	bl	8007aa4 <NoteFnLockI2C>
	_I2CReset();
 8007f1e:	f7ff fdf9 	bl	8007b14 <NoteFnI2CReset>
	_UnlockI2C();
 8007f22:	f7ff fdcd 	bl	8007ac0 <NoteFnUnlockI2C>

	// Synchronize by guaranteeing not only that I2C works, but that we drain the remainder of any
	// pending partial reply from a previously-aborted session.	 This outer loop does retries on
	// I2C error, and is simply here for robustness.
	bool notecardReady = false;
 8007f26:	2300      	movs	r3, #0
 8007f28:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	int retries;
	for (retries=0; !notecardReady && retries<3; retries++) {
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f32:	e058      	b.n	8007fe6 <i2cNoteReset+0xd2>

		_Debug("notecard i2c reset\n");
 8007f34:	4835      	ldr	r0, [pc, #212]	; (800800c <i2cNoteReset+0xf8>)
 8007f36:	f7ff fd47 	bl	80079c8 <NoteFnDebug>

		// Loop to drain all chunks of data that may be ready to transmit to us
		int chunklen = 0;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		while (true) {

			// Read the next chunk of available data
			uint32_t available;
			uint8_t buffer[128];
			chunklen = (chunklen > (int)sizeof(buffer)) ? (int)sizeof(buffer) : chunklen;
 8007f40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f44:	2b80      	cmp	r3, #128	; 0x80
 8007f46:	bfa8      	it	ge
 8007f48:	2380      	movge	r3, #128	; 0x80
 8007f4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			chunklen = (chunklen > (int)_I2CMax()) ? (int)_I2CMax() : chunklen;
 8007f4e:	f7ff fe4f 	bl	8007bf0 <NoteFnI2CMax>
 8007f52:	4603      	mov	r3, r0
 8007f54:	461a      	mov	r2, r3
 8007f56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	dd03      	ble.n	8007f66 <i2cNoteReset+0x52>
 8007f5e:	f7ff fe47 	bl	8007bf0 <NoteFnI2CMax>
 8007f62:	4603      	mov	r3, r0
 8007f64:	e001      	b.n	8007f6a <i2cNoteReset+0x56>
 8007f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			_LockI2C();
 8007f6e:	f7ff fd99 	bl	8007aa4 <NoteFnLockI2C>
			_DelayIO();
 8007f72:	f7ff fe7f 	bl	8007c74 <_DelayIO>
			const char *err = _I2CReceive(_I2CAddress(), buffer, chunklen, &available);
 8007f76:	f7ff fe2b 	bl	8007bd0 <NoteFnI2CAddress>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	b298      	uxth	r0, r3
 8007f7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007f88:	1d39      	adds	r1, r7, #4
 8007f8a:	f7ff fdfb 	bl	8007b84 <NoteFnI2CReceive>
 8007f8e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
			_UnlockI2C();
 8007f92:	f7ff fd95 	bl	8007ac0 <NoteFnUnlockI2C>
			if (err) break;
 8007f96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10c      	bne.n	8007fb8 <i2cNoteReset+0xa4>

			// If nothing left, we're ready to transmit a command to receive the data
			if (available == 0) {
 8007f9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d103      	bne.n	8007fae <i2cNoteReset+0x9a>
				notecardReady = true;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				break;
 8007fac:	e005      	b.n	8007fba <i2cNoteReset+0xa6>
			}

			// Read everything that's left on the module
			chunklen = available;
 8007fae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		while (true) {
 8007fb6:	e7c3      	b.n	8007f40 <i2cNoteReset+0x2c>
			if (err) break;
 8007fb8:	bf00      	nop

		}

		// Exit loop if success
		if (notecardReady)
 8007fba:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d11d      	bne.n	8007ffe <i2cNoteReset+0xea>
			break;

		// Reinitialize i2c if there's no response
		_LockI2C();
 8007fc2:	f7ff fd6f 	bl	8007aa4 <NoteFnLockI2C>
		_I2CReset();
 8007fc6:	f7ff fda5 	bl	8007b14 <NoteFnI2CReset>
		_UnlockI2C();
 8007fca:	f7ff fd79 	bl	8007ac0 <NoteFnUnlockI2C>
		_Debug("warning: notecard not responding\n");
 8007fce:	4810      	ldr	r0, [pc, #64]	; (8008010 <i2cNoteReset+0xfc>)
 8007fd0:	f7ff fcfa 	bl	80079c8 <NoteFnDebug>
		_DelayMs(2000);
 8007fd4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007fd8:	f7ff fd2a 	bl	8007a30 <NoteFnDelayMs>
	for (retries=0; !notecardReady && retries<3; retries++) {
 8007fdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007fe6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007fea:	f083 0301 	eor.w	r3, r3, #1
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d005      	beq.n	8008000 <i2cNoteReset+0xec>
 8007ff4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	dd9b      	ble.n	8007f34 <i2cNoteReset+0x20>
 8007ffc:	e000      	b.n	8008000 <i2cNoteReset+0xec>
			break;
 8007ffe:	bf00      	nop

	}

	// Done
	return notecardReady;
 8008000:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8008004:	4618      	mov	r0, r3
 8008006:	3798      	adds	r7, #152	; 0x98
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	08008e8c 	.word	0x08008e8c
 8008010:	08008ea0 	.word	0x08008ea0

08008014 <errDoc>:

// Flag that gets set whenever an error occurs that should force a reset
static bool resetRequired = true;

// Create an error response document
static J *errDoc(const char *errmsg) {
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
    J *rspdoc = JCreateObject();
 800801c:	f7ff fa46 	bl	80074ac <JCreateObject>
 8008020:	60f8      	str	r0, [r7, #12]
    if (rspdoc != NULL)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d004      	beq.n	8008032 <errDoc+0x1e>
        JAddStringToObject(rspdoc, "err", errmsg);
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	4906      	ldr	r1, [pc, #24]	; (8008044 <errDoc+0x30>)
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f7ff f993 	bl	8007358 <JAddStringToObject>
#ifdef SHOW_TRANSACTIONS
    _Debug("{\"err\":\"%s\"}\n", errmsg);
 8008032:	6879      	ldr	r1, [r7, #4]
 8008034:	4804      	ldr	r0, [pc, #16]	; (8008048 <errDoc+0x34>)
 8008036:	f7ff fcc7 	bl	80079c8 <NoteFnDebug>
#endif
    return rspdoc;
 800803a:	68fb      	ldr	r3, [r7, #12]
}
 800803c:	4618      	mov	r0, r3
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	08008ec4 	.word	0x08008ec4
 8008048:	08008ec8 	.word	0x08008ec8

0800804c <NoteNewRequest>:

// Lock for mutual exclusion, not only because access to the card must be serialized, but also because
// both C++ and ArduinoJSON call malloc() which is not a thread-safe operation.
J *NoteNewRequest(const char *request) {
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
    J *reqdoc = JCreateObject();
 8008054:	f7ff fa2a 	bl	80074ac <JCreateObject>
 8008058:	60f8      	str	r0, [r7, #12]
    if (reqdoc != NULL)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d004      	beq.n	800806a <NoteNewRequest+0x1e>
        JAddStringToObject(reqdoc, "req", request);
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	4904      	ldr	r1, [pc, #16]	; (8008074 <NoteNewRequest+0x28>)
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f7ff f977 	bl	8007358 <JAddStringToObject>
    return reqdoc;
 800806a:	68fb      	ldr	r3, [r7, #12]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	08008ed8 	.word	0x08008ed8

08008078 <NoteRequest>:

// Perform a request, FREEING THE REQUEST STRUCTURE, then returning true if success and
// false if either we ran into an error such as out-of-memory or if an error was returned
// from the transaction in the "err" field.
bool NoteRequest(J *req) {
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
    // Exit if null request.  This allows safe execution of the form NoteRequest(NoteNewRequest("xxx"))
    if (req == NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d101      	bne.n	800808a <NoteRequest+0x12>
        return false;
 8008086:	2300      	movs	r3, #0
 8008088:	e018      	b.n	80080bc <NoteRequest+0x44>
    // Execute the transaction
    J *rsp = NoteTransaction(req);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f83a 	bl	8008104 <NoteTransaction>
 8008090:	60f8      	str	r0, [r7, #12]
    if (rsp == NULL) {
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d104      	bne.n	80080a2 <NoteRequest+0x2a>
        JDelete(req);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7fd fa8f 	bl	80055bc <JDelete>
        return false;
 800809e:	2300      	movs	r3, #0
 80080a0:	e00c      	b.n	80080bc <NoteRequest+0x44>
    }
    // Check for a transaction error, and exit
    bool success = JIsNullString(rsp, "err");
 80080a2:	4908      	ldr	r1, [pc, #32]	; (80080c4 <NoteRequest+0x4c>)
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f7ff fa70 	bl	800758a <JIsNullString>
 80080aa:	4603      	mov	r3, r0
 80080ac:	72fb      	strb	r3, [r7, #11]
    JDelete(req);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7fd fa84 	bl	80055bc <JDelete>
    JDelete(rsp);
 80080b4:	68f8      	ldr	r0, [r7, #12]
 80080b6:	f7fd fa81 	bl	80055bc <JDelete>
    return success;
 80080ba:	7afb      	ldrb	r3, [r7, #11]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3710      	adds	r7, #16
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	08008ec4 	.word	0x08008ec4

080080c8 <NoteRequestResponse>:

// Perform a request, FREEING THE REQUEST STRUCTURE, and returning a reply structure or
// NULL if there's insufficient memory.
J *NoteRequestResponse(J *req) {
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
    // Exit if null request.  This allows safe execution of the form NoteRequestResponse(NoteNewRequest("xxx"))
    if (req == NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d101      	bne.n	80080da <NoteRequestResponse+0x12>
        return NULL;
 80080d6:	2300      	movs	r3, #0
 80080d8:	e00f      	b.n	80080fa <NoteRequestResponse+0x32>
    // Execute the transaction
    J *rsp = NoteTransaction(req);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f812 	bl	8008104 <NoteTransaction>
 80080e0:	60f8      	str	r0, [r7, #12]
    if (rsp == NULL) {
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d104      	bne.n	80080f2 <NoteRequestResponse+0x2a>
        JDelete(req);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f7fd fa67 	bl	80055bc <JDelete>
        return NULL;
 80080ee:	2300      	movs	r3, #0
 80080f0:	e003      	b.n	80080fa <NoteRequestResponse+0x32>
    }
    // Free the request and exit
    JDelete(req);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f7fd fa62 	bl	80055bc <JDelete>
    return rsp;
 80080f8:	68fb      	ldr	r3, [r7, #12]
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
	...

08008104 <NoteTransaction>:

// Initiate a transaction to the card using reqdoc, and return the result in rspdoc.  This does
// NOT free the request structure.
J *NoteTransaction(J *req) {
 8008104:	b580      	push	{r7, lr}
 8008106:	b08a      	sub	sp, #40	; 0x28
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]

    // If a reset of the module is required for any reason, do it now.
    // We must do this before acquiring lock.
    if (resetRequired) {
 800810c:	4b33      	ldr	r3, [pc, #204]	; (80081dc <NoteTransaction+0xd8>)
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d009      	beq.n	8008128 <NoteTransaction+0x24>
        if (!NoteReset())
 8008114:	f000 f878 	bl	8008208 <NoteReset>
 8008118:	4603      	mov	r3, r0
 800811a:	f083 0301 	eor.w	r3, r3, #1
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b00      	cmp	r3, #0
 8008122:	d001      	beq.n	8008128 <NoteTransaction+0x24>
            return NULL;
 8008124:	2300      	movs	r3, #0
 8008126:	e055      	b.n	80081d4 <NoteTransaction+0xd0>
    }

    // Lock
    _LockNote();
 8008128:	f7ff fcd8 	bl	8007adc <NoteFnLockNote>

    // Serialize the JSON requet
    char *json = JPrintUnformatted(req);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7fe fae1 	bl	80066f4 <JPrintUnformatted>
 8008132:	6278      	str	r0, [r7, #36]	; 0x24
    if (json == NULL) {
 8008134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008136:	2b00      	cmp	r3, #0
 8008138:	d107      	bne.n	800814a <NoteTransaction+0x46>
        J *rsp = errDoc("can't convert to JSON");
 800813a:	4829      	ldr	r0, [pc, #164]	; (80081e0 <NoteTransaction+0xdc>)
 800813c:	f7ff ff6a 	bl	8008014 <errDoc>
 8008140:	6138      	str	r0, [r7, #16]
        _UnlockNote();
 8008142:	f7ff fcd9 	bl	8007af8 <NoteFnUnlockNote>
        return rsp;
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	e044      	b.n	80081d4 <NoteTransaction+0xd0>
    }
    
#ifdef SHOW_TRANSACTIONS
    _Debug("%s\n", json);
 800814a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800814c:	4825      	ldr	r0, [pc, #148]	; (80081e4 <NoteTransaction+0xe0>)
 800814e:	f7ff fc3b 	bl	80079c8 <NoteFnDebug>
#endif

    // Pertform the transaction
    char *responseJSON;
    const char *errStr = _Transaction(json, &responseJSON);
 8008152:	f107 030c 	add.w	r3, r7, #12
 8008156:	4619      	mov	r1, r3
 8008158:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800815a:	f7ff fd71 	bl	8007c40 <NoteFnTransaction>
 800815e:	6238      	str	r0, [r7, #32]

    // Free the json
    JFree(json);
 8008160:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008162:	f7fd fa07 	bl	8005574 <JFree>

    // If error, queue up a reset
    if (errStr != NULL) {
 8008166:	6a3b      	ldr	r3, [r7, #32]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d009      	beq.n	8008180 <NoteTransaction+0x7c>
		NoteResetRequired();
 800816c:	f000 f840 	bl	80081f0 <NoteResetRequired>
        J *rsp = errDoc(errStr);
 8008170:	6a38      	ldr	r0, [r7, #32]
 8008172:	f7ff ff4f 	bl	8008014 <errDoc>
 8008176:	6178      	str	r0, [r7, #20]
        _UnlockNote();
 8008178:	f7ff fcbe 	bl	8007af8 <NoteFnUnlockNote>
        return rsp;
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	e029      	b.n	80081d4 <NoteTransaction+0xd0>
    }

    // Parse the reply from the card on the input stream
    J *rspdoc = JParse(responseJSON);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	4618      	mov	r0, r3
 8008184:	f7fe fa24 	bl	80065d0 <JParse>
 8008188:	61f8      	str	r0, [r7, #28]
    if (rspdoc == NULL) {
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d115      	bne.n	80081bc <NoteTransaction+0xb8>
        _Free(responseJSON);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4618      	mov	r0, r3
 8008194:	f7ff fc74 	bl	8007a80 <NoteFnFree>
        _Debug("unable to parse %d-byte response JSON: \"%s\"\n", strlen(responseJSON), responseJSON);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	4618      	mov	r0, r3
 800819c:	f7f7 ffe2 	bl	8000164 <strlen>
 80081a0:	4601      	mov	r1, r0
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	461a      	mov	r2, r3
 80081a6:	4810      	ldr	r0, [pc, #64]	; (80081e8 <NoteTransaction+0xe4>)
 80081a8:	f7ff fc0e 	bl	80079c8 <NoteFnDebug>
        J *rsp = errDoc("unrecognized response from card");
 80081ac:	480f      	ldr	r0, [pc, #60]	; (80081ec <NoteTransaction+0xe8>)
 80081ae:	f7ff ff31 	bl	8008014 <errDoc>
 80081b2:	61b8      	str	r0, [r7, #24]
        _UnlockNote();
 80081b4:	f7ff fca0 	bl	8007af8 <NoteFnUnlockNote>
        return rsp;
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	e00b      	b.n	80081d4 <NoteTransaction+0xd0>
    }

    // Debug
#ifdef SHOW_TRANSACTIONS
    _Debug("%s\n", responseJSON);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	4619      	mov	r1, r3
 80081c0:	4808      	ldr	r0, [pc, #32]	; (80081e4 <NoteTransaction+0xe0>)
 80081c2:	f7ff fc01 	bl	80079c8 <NoteFnDebug>
#endif

    // Discard the buffer now that it's parsed
    _Free(responseJSON);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7ff fc59 	bl	8007a80 <NoteFnFree>

    // Unlock
    _UnlockNote();
 80081ce:	f7ff fc93 	bl	8007af8 <NoteFnUnlockNote>

    // Done
    return rspdoc;
 80081d2:	69fb      	ldr	r3, [r7, #28]
    
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3728      	adds	r7, #40	; 0x28
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	20000064 	.word	0x20000064
 80081e0:	08008edc 	.word	0x08008edc
 80081e4:	08008ef4 	.word	0x08008ef4
 80081e8:	08008ef8 	.word	0x08008ef8
 80081ec:	08008f28 	.word	0x08008f28

080081f0 <NoteResetRequired>:

// Mark that a reset will be required before doing further I/O on a given port
void NoteResetRequired() {
 80081f0:	b480      	push	{r7}
 80081f2:	af00      	add	r7, sp, #0
    resetRequired = true;
 80081f4:	4b03      	ldr	r3, [pc, #12]	; (8008204 <NoteResetRequired+0x14>)
 80081f6:	2201      	movs	r2, #1
 80081f8:	701a      	strb	r2, [r3, #0]
}
 80081fa:	bf00      	nop
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bc80      	pop	{r7}
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	20000064 	.word	0x20000064

08008208 <NoteReset>:

// Initialize or re-initialize the module, returning false if anything fails
bool NoteReset() {
 8008208:	b580      	push	{r7, lr}
 800820a:	af00      	add	r7, sp, #0
    _LockNote();
 800820c:	f7ff fc66 	bl	8007adc <NoteFnLockNote>
    resetRequired = !_NoteReset();
 8008210:	f7ff fd06 	bl	8007c20 <NoteFnNoteReset>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	bf14      	ite	ne
 800821a:	2301      	movne	r3, #1
 800821c:	2300      	moveq	r3, #0
 800821e:	b2db      	uxtb	r3, r3
 8008220:	f083 0301 	eor.w	r3, r3, #1
 8008224:	b2db      	uxtb	r3, r3
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	b2da      	uxtb	r2, r3
 800822c:	4b09      	ldr	r3, [pc, #36]	; (8008254 <NoteReset+0x4c>)
 800822e:	701a      	strb	r2, [r3, #0]
    _UnlockNote();
 8008230:	f7ff fc62 	bl	8007af8 <NoteFnUnlockNote>
    return !resetRequired;
 8008234:	4b07      	ldr	r3, [pc, #28]	; (8008254 <NoteReset+0x4c>)
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	bf14      	ite	ne
 800823c:	2301      	movne	r3, #1
 800823e:	2300      	moveq	r3, #0
 8008240:	b2db      	uxtb	r3, r3
 8008242:	f083 0301 	eor.w	r3, r3, #1
 8008246:	b2db      	uxtb	r3, r3
 8008248:	f003 0301 	and.w	r3, r3, #1
 800824c:	b2db      	uxtb	r3, r3
}
 800824e:	4618      	mov	r0, r3
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	20000064 	.word	0x20000064

08008258 <__errno>:
 8008258:	4b01      	ldr	r3, [pc, #4]	; (8008260 <__errno+0x8>)
 800825a:	6818      	ldr	r0, [r3, #0]
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	20000068 	.word	0x20000068

08008264 <__libc_init_array>:
 8008264:	b570      	push	{r4, r5, r6, lr}
 8008266:	2500      	movs	r5, #0
 8008268:	4e0c      	ldr	r6, [pc, #48]	; (800829c <__libc_init_array+0x38>)
 800826a:	4c0d      	ldr	r4, [pc, #52]	; (80082a0 <__libc_init_array+0x3c>)
 800826c:	1ba4      	subs	r4, r4, r6
 800826e:	10a4      	asrs	r4, r4, #2
 8008270:	42a5      	cmp	r5, r4
 8008272:	d109      	bne.n	8008288 <__libc_init_array+0x24>
 8008274:	f000 fcac 	bl	8008bd0 <_init>
 8008278:	2500      	movs	r5, #0
 800827a:	4e0a      	ldr	r6, [pc, #40]	; (80082a4 <__libc_init_array+0x40>)
 800827c:	4c0a      	ldr	r4, [pc, #40]	; (80082a8 <__libc_init_array+0x44>)
 800827e:	1ba4      	subs	r4, r4, r6
 8008280:	10a4      	asrs	r4, r4, #2
 8008282:	42a5      	cmp	r5, r4
 8008284:	d105      	bne.n	8008292 <__libc_init_array+0x2e>
 8008286:	bd70      	pop	{r4, r5, r6, pc}
 8008288:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800828c:	4798      	blx	r3
 800828e:	3501      	adds	r5, #1
 8008290:	e7ee      	b.n	8008270 <__libc_init_array+0xc>
 8008292:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008296:	4798      	blx	r3
 8008298:	3501      	adds	r5, #1
 800829a:	e7f2      	b.n	8008282 <__libc_init_array+0x1e>
 800829c:	08009100 	.word	0x08009100
 80082a0:	08009100 	.word	0x08009100
 80082a4:	08009100 	.word	0x08009100
 80082a8:	08009104 	.word	0x08009104

080082ac <__locale_ctype_ptr>:
 80082ac:	4b04      	ldr	r3, [pc, #16]	; (80082c0 <__locale_ctype_ptr+0x14>)
 80082ae:	4a05      	ldr	r2, [pc, #20]	; (80082c4 <__locale_ctype_ptr+0x18>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	6a1b      	ldr	r3, [r3, #32]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	bf08      	it	eq
 80082b8:	4613      	moveq	r3, r2
 80082ba:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80082be:	4770      	bx	lr
 80082c0:	20000068 	.word	0x20000068
 80082c4:	200000cc 	.word	0x200000cc

080082c8 <malloc>:
 80082c8:	4b02      	ldr	r3, [pc, #8]	; (80082d4 <malloc+0xc>)
 80082ca:	4601      	mov	r1, r0
 80082cc:	6818      	ldr	r0, [r3, #0]
 80082ce:	f000 b895 	b.w	80083fc <_malloc_r>
 80082d2:	bf00      	nop
 80082d4:	20000068 	.word	0x20000068

080082d8 <free>:
 80082d8:	4b02      	ldr	r3, [pc, #8]	; (80082e4 <free+0xc>)
 80082da:	4601      	mov	r1, r0
 80082dc:	6818      	ldr	r0, [r3, #0]
 80082de:	f000 b841 	b.w	8008364 <_free_r>
 80082e2:	bf00      	nop
 80082e4:	20000068 	.word	0x20000068

080082e8 <__ascii_mbtowc>:
 80082e8:	b082      	sub	sp, #8
 80082ea:	b901      	cbnz	r1, 80082ee <__ascii_mbtowc+0x6>
 80082ec:	a901      	add	r1, sp, #4
 80082ee:	b142      	cbz	r2, 8008302 <__ascii_mbtowc+0x1a>
 80082f0:	b14b      	cbz	r3, 8008306 <__ascii_mbtowc+0x1e>
 80082f2:	7813      	ldrb	r3, [r2, #0]
 80082f4:	600b      	str	r3, [r1, #0]
 80082f6:	7812      	ldrb	r2, [r2, #0]
 80082f8:	1c10      	adds	r0, r2, #0
 80082fa:	bf18      	it	ne
 80082fc:	2001      	movne	r0, #1
 80082fe:	b002      	add	sp, #8
 8008300:	4770      	bx	lr
 8008302:	4610      	mov	r0, r2
 8008304:	e7fb      	b.n	80082fe <__ascii_mbtowc+0x16>
 8008306:	f06f 0001 	mvn.w	r0, #1
 800830a:	e7f8      	b.n	80082fe <__ascii_mbtowc+0x16>

0800830c <memcpy>:
 800830c:	b510      	push	{r4, lr}
 800830e:	1e43      	subs	r3, r0, #1
 8008310:	440a      	add	r2, r1
 8008312:	4291      	cmp	r1, r2
 8008314:	d100      	bne.n	8008318 <memcpy+0xc>
 8008316:	bd10      	pop	{r4, pc}
 8008318:	f811 4b01 	ldrb.w	r4, [r1], #1
 800831c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008320:	e7f7      	b.n	8008312 <memcpy+0x6>

08008322 <memmove>:
 8008322:	4288      	cmp	r0, r1
 8008324:	b510      	push	{r4, lr}
 8008326:	eb01 0302 	add.w	r3, r1, r2
 800832a:	d807      	bhi.n	800833c <memmove+0x1a>
 800832c:	1e42      	subs	r2, r0, #1
 800832e:	4299      	cmp	r1, r3
 8008330:	d00a      	beq.n	8008348 <memmove+0x26>
 8008332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008336:	f802 4f01 	strb.w	r4, [r2, #1]!
 800833a:	e7f8      	b.n	800832e <memmove+0xc>
 800833c:	4283      	cmp	r3, r0
 800833e:	d9f5      	bls.n	800832c <memmove+0xa>
 8008340:	1881      	adds	r1, r0, r2
 8008342:	1ad2      	subs	r2, r2, r3
 8008344:	42d3      	cmn	r3, r2
 8008346:	d100      	bne.n	800834a <memmove+0x28>
 8008348:	bd10      	pop	{r4, pc}
 800834a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800834e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008352:	e7f7      	b.n	8008344 <memmove+0x22>

08008354 <memset>:
 8008354:	4603      	mov	r3, r0
 8008356:	4402      	add	r2, r0
 8008358:	4293      	cmp	r3, r2
 800835a:	d100      	bne.n	800835e <memset+0xa>
 800835c:	4770      	bx	lr
 800835e:	f803 1b01 	strb.w	r1, [r3], #1
 8008362:	e7f9      	b.n	8008358 <memset+0x4>

08008364 <_free_r>:
 8008364:	b538      	push	{r3, r4, r5, lr}
 8008366:	4605      	mov	r5, r0
 8008368:	2900      	cmp	r1, #0
 800836a:	d043      	beq.n	80083f4 <_free_r+0x90>
 800836c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008370:	1f0c      	subs	r4, r1, #4
 8008372:	2b00      	cmp	r3, #0
 8008374:	bfb8      	it	lt
 8008376:	18e4      	addlt	r4, r4, r3
 8008378:	f000 f911 	bl	800859e <__malloc_lock>
 800837c:	4a1e      	ldr	r2, [pc, #120]	; (80083f8 <_free_r+0x94>)
 800837e:	6813      	ldr	r3, [r2, #0]
 8008380:	4610      	mov	r0, r2
 8008382:	b933      	cbnz	r3, 8008392 <_free_r+0x2e>
 8008384:	6063      	str	r3, [r4, #4]
 8008386:	6014      	str	r4, [r2, #0]
 8008388:	4628      	mov	r0, r5
 800838a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800838e:	f000 b907 	b.w	80085a0 <__malloc_unlock>
 8008392:	42a3      	cmp	r3, r4
 8008394:	d90b      	bls.n	80083ae <_free_r+0x4a>
 8008396:	6821      	ldr	r1, [r4, #0]
 8008398:	1862      	adds	r2, r4, r1
 800839a:	4293      	cmp	r3, r2
 800839c:	bf01      	itttt	eq
 800839e:	681a      	ldreq	r2, [r3, #0]
 80083a0:	685b      	ldreq	r3, [r3, #4]
 80083a2:	1852      	addeq	r2, r2, r1
 80083a4:	6022      	streq	r2, [r4, #0]
 80083a6:	6063      	str	r3, [r4, #4]
 80083a8:	6004      	str	r4, [r0, #0]
 80083aa:	e7ed      	b.n	8008388 <_free_r+0x24>
 80083ac:	4613      	mov	r3, r2
 80083ae:	685a      	ldr	r2, [r3, #4]
 80083b0:	b10a      	cbz	r2, 80083b6 <_free_r+0x52>
 80083b2:	42a2      	cmp	r2, r4
 80083b4:	d9fa      	bls.n	80083ac <_free_r+0x48>
 80083b6:	6819      	ldr	r1, [r3, #0]
 80083b8:	1858      	adds	r0, r3, r1
 80083ba:	42a0      	cmp	r0, r4
 80083bc:	d10b      	bne.n	80083d6 <_free_r+0x72>
 80083be:	6820      	ldr	r0, [r4, #0]
 80083c0:	4401      	add	r1, r0
 80083c2:	1858      	adds	r0, r3, r1
 80083c4:	4282      	cmp	r2, r0
 80083c6:	6019      	str	r1, [r3, #0]
 80083c8:	d1de      	bne.n	8008388 <_free_r+0x24>
 80083ca:	6810      	ldr	r0, [r2, #0]
 80083cc:	6852      	ldr	r2, [r2, #4]
 80083ce:	4401      	add	r1, r0
 80083d0:	6019      	str	r1, [r3, #0]
 80083d2:	605a      	str	r2, [r3, #4]
 80083d4:	e7d8      	b.n	8008388 <_free_r+0x24>
 80083d6:	d902      	bls.n	80083de <_free_r+0x7a>
 80083d8:	230c      	movs	r3, #12
 80083da:	602b      	str	r3, [r5, #0]
 80083dc:	e7d4      	b.n	8008388 <_free_r+0x24>
 80083de:	6820      	ldr	r0, [r4, #0]
 80083e0:	1821      	adds	r1, r4, r0
 80083e2:	428a      	cmp	r2, r1
 80083e4:	bf01      	itttt	eq
 80083e6:	6811      	ldreq	r1, [r2, #0]
 80083e8:	6852      	ldreq	r2, [r2, #4]
 80083ea:	1809      	addeq	r1, r1, r0
 80083ec:	6021      	streq	r1, [r4, #0]
 80083ee:	6062      	str	r2, [r4, #4]
 80083f0:	605c      	str	r4, [r3, #4]
 80083f2:	e7c9      	b.n	8008388 <_free_r+0x24>
 80083f4:	bd38      	pop	{r3, r4, r5, pc}
 80083f6:	bf00      	nop
 80083f8:	200004bc 	.word	0x200004bc

080083fc <_malloc_r>:
 80083fc:	b570      	push	{r4, r5, r6, lr}
 80083fe:	1ccd      	adds	r5, r1, #3
 8008400:	f025 0503 	bic.w	r5, r5, #3
 8008404:	3508      	adds	r5, #8
 8008406:	2d0c      	cmp	r5, #12
 8008408:	bf38      	it	cc
 800840a:	250c      	movcc	r5, #12
 800840c:	2d00      	cmp	r5, #0
 800840e:	4606      	mov	r6, r0
 8008410:	db01      	blt.n	8008416 <_malloc_r+0x1a>
 8008412:	42a9      	cmp	r1, r5
 8008414:	d903      	bls.n	800841e <_malloc_r+0x22>
 8008416:	230c      	movs	r3, #12
 8008418:	6033      	str	r3, [r6, #0]
 800841a:	2000      	movs	r0, #0
 800841c:	bd70      	pop	{r4, r5, r6, pc}
 800841e:	f000 f8be 	bl	800859e <__malloc_lock>
 8008422:	4a21      	ldr	r2, [pc, #132]	; (80084a8 <_malloc_r+0xac>)
 8008424:	6814      	ldr	r4, [r2, #0]
 8008426:	4621      	mov	r1, r4
 8008428:	b991      	cbnz	r1, 8008450 <_malloc_r+0x54>
 800842a:	4c20      	ldr	r4, [pc, #128]	; (80084ac <_malloc_r+0xb0>)
 800842c:	6823      	ldr	r3, [r4, #0]
 800842e:	b91b      	cbnz	r3, 8008438 <_malloc_r+0x3c>
 8008430:	4630      	mov	r0, r6
 8008432:	f000 f83d 	bl	80084b0 <_sbrk_r>
 8008436:	6020      	str	r0, [r4, #0]
 8008438:	4629      	mov	r1, r5
 800843a:	4630      	mov	r0, r6
 800843c:	f000 f838 	bl	80084b0 <_sbrk_r>
 8008440:	1c43      	adds	r3, r0, #1
 8008442:	d124      	bne.n	800848e <_malloc_r+0x92>
 8008444:	230c      	movs	r3, #12
 8008446:	4630      	mov	r0, r6
 8008448:	6033      	str	r3, [r6, #0]
 800844a:	f000 f8a9 	bl	80085a0 <__malloc_unlock>
 800844e:	e7e4      	b.n	800841a <_malloc_r+0x1e>
 8008450:	680b      	ldr	r3, [r1, #0]
 8008452:	1b5b      	subs	r3, r3, r5
 8008454:	d418      	bmi.n	8008488 <_malloc_r+0x8c>
 8008456:	2b0b      	cmp	r3, #11
 8008458:	d90f      	bls.n	800847a <_malloc_r+0x7e>
 800845a:	600b      	str	r3, [r1, #0]
 800845c:	18cc      	adds	r4, r1, r3
 800845e:	50cd      	str	r5, [r1, r3]
 8008460:	4630      	mov	r0, r6
 8008462:	f000 f89d 	bl	80085a0 <__malloc_unlock>
 8008466:	f104 000b 	add.w	r0, r4, #11
 800846a:	1d23      	adds	r3, r4, #4
 800846c:	f020 0007 	bic.w	r0, r0, #7
 8008470:	1ac3      	subs	r3, r0, r3
 8008472:	d0d3      	beq.n	800841c <_malloc_r+0x20>
 8008474:	425a      	negs	r2, r3
 8008476:	50e2      	str	r2, [r4, r3]
 8008478:	e7d0      	b.n	800841c <_malloc_r+0x20>
 800847a:	684b      	ldr	r3, [r1, #4]
 800847c:	428c      	cmp	r4, r1
 800847e:	bf16      	itet	ne
 8008480:	6063      	strne	r3, [r4, #4]
 8008482:	6013      	streq	r3, [r2, #0]
 8008484:	460c      	movne	r4, r1
 8008486:	e7eb      	b.n	8008460 <_malloc_r+0x64>
 8008488:	460c      	mov	r4, r1
 800848a:	6849      	ldr	r1, [r1, #4]
 800848c:	e7cc      	b.n	8008428 <_malloc_r+0x2c>
 800848e:	1cc4      	adds	r4, r0, #3
 8008490:	f024 0403 	bic.w	r4, r4, #3
 8008494:	42a0      	cmp	r0, r4
 8008496:	d005      	beq.n	80084a4 <_malloc_r+0xa8>
 8008498:	1a21      	subs	r1, r4, r0
 800849a:	4630      	mov	r0, r6
 800849c:	f000 f808 	bl	80084b0 <_sbrk_r>
 80084a0:	3001      	adds	r0, #1
 80084a2:	d0cf      	beq.n	8008444 <_malloc_r+0x48>
 80084a4:	6025      	str	r5, [r4, #0]
 80084a6:	e7db      	b.n	8008460 <_malloc_r+0x64>
 80084a8:	200004bc 	.word	0x200004bc
 80084ac:	200004c0 	.word	0x200004c0

080084b0 <_sbrk_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	2300      	movs	r3, #0
 80084b4:	4c05      	ldr	r4, [pc, #20]	; (80084cc <_sbrk_r+0x1c>)
 80084b6:	4605      	mov	r5, r0
 80084b8:	4608      	mov	r0, r1
 80084ba:	6023      	str	r3, [r4, #0]
 80084bc:	f7fc fdec 	bl	8005098 <_sbrk>
 80084c0:	1c43      	adds	r3, r0, #1
 80084c2:	d102      	bne.n	80084ca <_sbrk_r+0x1a>
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	b103      	cbz	r3, 80084ca <_sbrk_r+0x1a>
 80084c8:	602b      	str	r3, [r5, #0]
 80084ca:	bd38      	pop	{r3, r4, r5, pc}
 80084cc:	2000055c 	.word	0x2000055c

080084d0 <strchr>:
 80084d0:	b2c9      	uxtb	r1, r1
 80084d2:	4603      	mov	r3, r0
 80084d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084d8:	b11a      	cbz	r2, 80084e2 <strchr+0x12>
 80084da:	428a      	cmp	r2, r1
 80084dc:	d1f9      	bne.n	80084d2 <strchr+0x2>
 80084de:	4618      	mov	r0, r3
 80084e0:	4770      	bx	lr
 80084e2:	2900      	cmp	r1, #0
 80084e4:	bf18      	it	ne
 80084e6:	2300      	movne	r3, #0
 80084e8:	e7f9      	b.n	80084de <strchr+0xe>

080084ea <strncmp>:
 80084ea:	b510      	push	{r4, lr}
 80084ec:	b16a      	cbz	r2, 800850a <strncmp+0x20>
 80084ee:	3901      	subs	r1, #1
 80084f0:	1884      	adds	r4, r0, r2
 80084f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80084f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d103      	bne.n	8008506 <strncmp+0x1c>
 80084fe:	42a0      	cmp	r0, r4
 8008500:	d001      	beq.n	8008506 <strncmp+0x1c>
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1f5      	bne.n	80084f2 <strncmp+0x8>
 8008506:	1a98      	subs	r0, r3, r2
 8008508:	bd10      	pop	{r4, pc}
 800850a:	4610      	mov	r0, r2
 800850c:	e7fc      	b.n	8008508 <strncmp+0x1e>

0800850e <_vsniprintf_r>:
 800850e:	b530      	push	{r4, r5, lr}
 8008510:	1e14      	subs	r4, r2, #0
 8008512:	4605      	mov	r5, r0
 8008514:	b09b      	sub	sp, #108	; 0x6c
 8008516:	4618      	mov	r0, r3
 8008518:	da05      	bge.n	8008526 <_vsniprintf_r+0x18>
 800851a:	238b      	movs	r3, #139	; 0x8b
 800851c:	f04f 30ff 	mov.w	r0, #4294967295
 8008520:	602b      	str	r3, [r5, #0]
 8008522:	b01b      	add	sp, #108	; 0x6c
 8008524:	bd30      	pop	{r4, r5, pc}
 8008526:	f44f 7302 	mov.w	r3, #520	; 0x208
 800852a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800852e:	bf0c      	ite	eq
 8008530:	4623      	moveq	r3, r4
 8008532:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008536:	9302      	str	r3, [sp, #8]
 8008538:	9305      	str	r3, [sp, #20]
 800853a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800853e:	9100      	str	r1, [sp, #0]
 8008540:	9104      	str	r1, [sp, #16]
 8008542:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008546:	4602      	mov	r2, r0
 8008548:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800854a:	4669      	mov	r1, sp
 800854c:	4628      	mov	r0, r5
 800854e:	f000 f883 	bl	8008658 <_svfiprintf_r>
 8008552:	1c43      	adds	r3, r0, #1
 8008554:	bfbc      	itt	lt
 8008556:	238b      	movlt	r3, #139	; 0x8b
 8008558:	602b      	strlt	r3, [r5, #0]
 800855a:	2c00      	cmp	r4, #0
 800855c:	d0e1      	beq.n	8008522 <_vsniprintf_r+0x14>
 800855e:	2200      	movs	r2, #0
 8008560:	9b00      	ldr	r3, [sp, #0]
 8008562:	701a      	strb	r2, [r3, #0]
 8008564:	e7dd      	b.n	8008522 <_vsniprintf_r+0x14>
	...

08008568 <vsniprintf>:
 8008568:	b507      	push	{r0, r1, r2, lr}
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	4613      	mov	r3, r2
 800856e:	460a      	mov	r2, r1
 8008570:	4601      	mov	r1, r0
 8008572:	4803      	ldr	r0, [pc, #12]	; (8008580 <vsniprintf+0x18>)
 8008574:	6800      	ldr	r0, [r0, #0]
 8008576:	f7ff ffca 	bl	800850e <_vsniprintf_r>
 800857a:	b003      	add	sp, #12
 800857c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008580:	20000068 	.word	0x20000068

08008584 <__ascii_wctomb>:
 8008584:	b149      	cbz	r1, 800859a <__ascii_wctomb+0x16>
 8008586:	2aff      	cmp	r2, #255	; 0xff
 8008588:	bf8b      	itete	hi
 800858a:	238a      	movhi	r3, #138	; 0x8a
 800858c:	700a      	strbls	r2, [r1, #0]
 800858e:	6003      	strhi	r3, [r0, #0]
 8008590:	2001      	movls	r0, #1
 8008592:	bf88      	it	hi
 8008594:	f04f 30ff 	movhi.w	r0, #4294967295
 8008598:	4770      	bx	lr
 800859a:	4608      	mov	r0, r1
 800859c:	4770      	bx	lr

0800859e <__malloc_lock>:
 800859e:	4770      	bx	lr

080085a0 <__malloc_unlock>:
 80085a0:	4770      	bx	lr

080085a2 <__ssputs_r>:
 80085a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085a6:	688e      	ldr	r6, [r1, #8]
 80085a8:	4682      	mov	sl, r0
 80085aa:	429e      	cmp	r6, r3
 80085ac:	460c      	mov	r4, r1
 80085ae:	4690      	mov	r8, r2
 80085b0:	4699      	mov	r9, r3
 80085b2:	d837      	bhi.n	8008624 <__ssputs_r+0x82>
 80085b4:	898a      	ldrh	r2, [r1, #12]
 80085b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085ba:	d031      	beq.n	8008620 <__ssputs_r+0x7e>
 80085bc:	2302      	movs	r3, #2
 80085be:	6825      	ldr	r5, [r4, #0]
 80085c0:	6909      	ldr	r1, [r1, #16]
 80085c2:	1a6f      	subs	r7, r5, r1
 80085c4:	6965      	ldr	r5, [r4, #20]
 80085c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085ca:	fb95 f5f3 	sdiv	r5, r5, r3
 80085ce:	f109 0301 	add.w	r3, r9, #1
 80085d2:	443b      	add	r3, r7
 80085d4:	429d      	cmp	r5, r3
 80085d6:	bf38      	it	cc
 80085d8:	461d      	movcc	r5, r3
 80085da:	0553      	lsls	r3, r2, #21
 80085dc:	d530      	bpl.n	8008640 <__ssputs_r+0x9e>
 80085de:	4629      	mov	r1, r5
 80085e0:	f7ff ff0c 	bl	80083fc <_malloc_r>
 80085e4:	4606      	mov	r6, r0
 80085e6:	b950      	cbnz	r0, 80085fe <__ssputs_r+0x5c>
 80085e8:	230c      	movs	r3, #12
 80085ea:	f04f 30ff 	mov.w	r0, #4294967295
 80085ee:	f8ca 3000 	str.w	r3, [sl]
 80085f2:	89a3      	ldrh	r3, [r4, #12]
 80085f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085f8:	81a3      	strh	r3, [r4, #12]
 80085fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085fe:	463a      	mov	r2, r7
 8008600:	6921      	ldr	r1, [r4, #16]
 8008602:	f7ff fe83 	bl	800830c <memcpy>
 8008606:	89a3      	ldrh	r3, [r4, #12]
 8008608:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800860c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008610:	81a3      	strh	r3, [r4, #12]
 8008612:	6126      	str	r6, [r4, #16]
 8008614:	443e      	add	r6, r7
 8008616:	6026      	str	r6, [r4, #0]
 8008618:	464e      	mov	r6, r9
 800861a:	6165      	str	r5, [r4, #20]
 800861c:	1bed      	subs	r5, r5, r7
 800861e:	60a5      	str	r5, [r4, #8]
 8008620:	454e      	cmp	r6, r9
 8008622:	d900      	bls.n	8008626 <__ssputs_r+0x84>
 8008624:	464e      	mov	r6, r9
 8008626:	4632      	mov	r2, r6
 8008628:	4641      	mov	r1, r8
 800862a:	6820      	ldr	r0, [r4, #0]
 800862c:	f7ff fe79 	bl	8008322 <memmove>
 8008630:	68a3      	ldr	r3, [r4, #8]
 8008632:	2000      	movs	r0, #0
 8008634:	1b9b      	subs	r3, r3, r6
 8008636:	60a3      	str	r3, [r4, #8]
 8008638:	6823      	ldr	r3, [r4, #0]
 800863a:	441e      	add	r6, r3
 800863c:	6026      	str	r6, [r4, #0]
 800863e:	e7dc      	b.n	80085fa <__ssputs_r+0x58>
 8008640:	462a      	mov	r2, r5
 8008642:	f000 fa97 	bl	8008b74 <_realloc_r>
 8008646:	4606      	mov	r6, r0
 8008648:	2800      	cmp	r0, #0
 800864a:	d1e2      	bne.n	8008612 <__ssputs_r+0x70>
 800864c:	6921      	ldr	r1, [r4, #16]
 800864e:	4650      	mov	r0, sl
 8008650:	f7ff fe88 	bl	8008364 <_free_r>
 8008654:	e7c8      	b.n	80085e8 <__ssputs_r+0x46>
	...

08008658 <_svfiprintf_r>:
 8008658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865c:	461d      	mov	r5, r3
 800865e:	898b      	ldrh	r3, [r1, #12]
 8008660:	b09d      	sub	sp, #116	; 0x74
 8008662:	061f      	lsls	r7, r3, #24
 8008664:	4680      	mov	r8, r0
 8008666:	460c      	mov	r4, r1
 8008668:	4616      	mov	r6, r2
 800866a:	d50f      	bpl.n	800868c <_svfiprintf_r+0x34>
 800866c:	690b      	ldr	r3, [r1, #16]
 800866e:	b96b      	cbnz	r3, 800868c <_svfiprintf_r+0x34>
 8008670:	2140      	movs	r1, #64	; 0x40
 8008672:	f7ff fec3 	bl	80083fc <_malloc_r>
 8008676:	6020      	str	r0, [r4, #0]
 8008678:	6120      	str	r0, [r4, #16]
 800867a:	b928      	cbnz	r0, 8008688 <_svfiprintf_r+0x30>
 800867c:	230c      	movs	r3, #12
 800867e:	f8c8 3000 	str.w	r3, [r8]
 8008682:	f04f 30ff 	mov.w	r0, #4294967295
 8008686:	e0c8      	b.n	800881a <_svfiprintf_r+0x1c2>
 8008688:	2340      	movs	r3, #64	; 0x40
 800868a:	6163      	str	r3, [r4, #20]
 800868c:	2300      	movs	r3, #0
 800868e:	9309      	str	r3, [sp, #36]	; 0x24
 8008690:	2320      	movs	r3, #32
 8008692:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008696:	2330      	movs	r3, #48	; 0x30
 8008698:	f04f 0b01 	mov.w	fp, #1
 800869c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086a0:	9503      	str	r5, [sp, #12]
 80086a2:	4637      	mov	r7, r6
 80086a4:	463d      	mov	r5, r7
 80086a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80086aa:	b10b      	cbz	r3, 80086b0 <_svfiprintf_r+0x58>
 80086ac:	2b25      	cmp	r3, #37	; 0x25
 80086ae:	d13e      	bne.n	800872e <_svfiprintf_r+0xd6>
 80086b0:	ebb7 0a06 	subs.w	sl, r7, r6
 80086b4:	d00b      	beq.n	80086ce <_svfiprintf_r+0x76>
 80086b6:	4653      	mov	r3, sl
 80086b8:	4632      	mov	r2, r6
 80086ba:	4621      	mov	r1, r4
 80086bc:	4640      	mov	r0, r8
 80086be:	f7ff ff70 	bl	80085a2 <__ssputs_r>
 80086c2:	3001      	adds	r0, #1
 80086c4:	f000 80a4 	beq.w	8008810 <_svfiprintf_r+0x1b8>
 80086c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086ca:	4453      	add	r3, sl
 80086cc:	9309      	str	r3, [sp, #36]	; 0x24
 80086ce:	783b      	ldrb	r3, [r7, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f000 809d 	beq.w	8008810 <_svfiprintf_r+0x1b8>
 80086d6:	2300      	movs	r3, #0
 80086d8:	f04f 32ff 	mov.w	r2, #4294967295
 80086dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086e0:	9304      	str	r3, [sp, #16]
 80086e2:	9307      	str	r3, [sp, #28]
 80086e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086e8:	931a      	str	r3, [sp, #104]	; 0x68
 80086ea:	462f      	mov	r7, r5
 80086ec:	2205      	movs	r2, #5
 80086ee:	f817 1b01 	ldrb.w	r1, [r7], #1
 80086f2:	4850      	ldr	r0, [pc, #320]	; (8008834 <_svfiprintf_r+0x1dc>)
 80086f4:	f000 fa30 	bl	8008b58 <memchr>
 80086f8:	9b04      	ldr	r3, [sp, #16]
 80086fa:	b9d0      	cbnz	r0, 8008732 <_svfiprintf_r+0xda>
 80086fc:	06d9      	lsls	r1, r3, #27
 80086fe:	bf44      	itt	mi
 8008700:	2220      	movmi	r2, #32
 8008702:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008706:	071a      	lsls	r2, r3, #28
 8008708:	bf44      	itt	mi
 800870a:	222b      	movmi	r2, #43	; 0x2b
 800870c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008710:	782a      	ldrb	r2, [r5, #0]
 8008712:	2a2a      	cmp	r2, #42	; 0x2a
 8008714:	d015      	beq.n	8008742 <_svfiprintf_r+0xea>
 8008716:	462f      	mov	r7, r5
 8008718:	2000      	movs	r0, #0
 800871a:	250a      	movs	r5, #10
 800871c:	9a07      	ldr	r2, [sp, #28]
 800871e:	4639      	mov	r1, r7
 8008720:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008724:	3b30      	subs	r3, #48	; 0x30
 8008726:	2b09      	cmp	r3, #9
 8008728:	d94d      	bls.n	80087c6 <_svfiprintf_r+0x16e>
 800872a:	b1b8      	cbz	r0, 800875c <_svfiprintf_r+0x104>
 800872c:	e00f      	b.n	800874e <_svfiprintf_r+0xf6>
 800872e:	462f      	mov	r7, r5
 8008730:	e7b8      	b.n	80086a4 <_svfiprintf_r+0x4c>
 8008732:	4a40      	ldr	r2, [pc, #256]	; (8008834 <_svfiprintf_r+0x1dc>)
 8008734:	463d      	mov	r5, r7
 8008736:	1a80      	subs	r0, r0, r2
 8008738:	fa0b f000 	lsl.w	r0, fp, r0
 800873c:	4318      	orrs	r0, r3
 800873e:	9004      	str	r0, [sp, #16]
 8008740:	e7d3      	b.n	80086ea <_svfiprintf_r+0x92>
 8008742:	9a03      	ldr	r2, [sp, #12]
 8008744:	1d11      	adds	r1, r2, #4
 8008746:	6812      	ldr	r2, [r2, #0]
 8008748:	9103      	str	r1, [sp, #12]
 800874a:	2a00      	cmp	r2, #0
 800874c:	db01      	blt.n	8008752 <_svfiprintf_r+0xfa>
 800874e:	9207      	str	r2, [sp, #28]
 8008750:	e004      	b.n	800875c <_svfiprintf_r+0x104>
 8008752:	4252      	negs	r2, r2
 8008754:	f043 0302 	orr.w	r3, r3, #2
 8008758:	9207      	str	r2, [sp, #28]
 800875a:	9304      	str	r3, [sp, #16]
 800875c:	783b      	ldrb	r3, [r7, #0]
 800875e:	2b2e      	cmp	r3, #46	; 0x2e
 8008760:	d10c      	bne.n	800877c <_svfiprintf_r+0x124>
 8008762:	787b      	ldrb	r3, [r7, #1]
 8008764:	2b2a      	cmp	r3, #42	; 0x2a
 8008766:	d133      	bne.n	80087d0 <_svfiprintf_r+0x178>
 8008768:	9b03      	ldr	r3, [sp, #12]
 800876a:	3702      	adds	r7, #2
 800876c:	1d1a      	adds	r2, r3, #4
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	9203      	str	r2, [sp, #12]
 8008772:	2b00      	cmp	r3, #0
 8008774:	bfb8      	it	lt
 8008776:	f04f 33ff 	movlt.w	r3, #4294967295
 800877a:	9305      	str	r3, [sp, #20]
 800877c:	4d2e      	ldr	r5, [pc, #184]	; (8008838 <_svfiprintf_r+0x1e0>)
 800877e:	2203      	movs	r2, #3
 8008780:	7839      	ldrb	r1, [r7, #0]
 8008782:	4628      	mov	r0, r5
 8008784:	f000 f9e8 	bl	8008b58 <memchr>
 8008788:	b138      	cbz	r0, 800879a <_svfiprintf_r+0x142>
 800878a:	2340      	movs	r3, #64	; 0x40
 800878c:	1b40      	subs	r0, r0, r5
 800878e:	fa03 f000 	lsl.w	r0, r3, r0
 8008792:	9b04      	ldr	r3, [sp, #16]
 8008794:	3701      	adds	r7, #1
 8008796:	4303      	orrs	r3, r0
 8008798:	9304      	str	r3, [sp, #16]
 800879a:	7839      	ldrb	r1, [r7, #0]
 800879c:	2206      	movs	r2, #6
 800879e:	4827      	ldr	r0, [pc, #156]	; (800883c <_svfiprintf_r+0x1e4>)
 80087a0:	1c7e      	adds	r6, r7, #1
 80087a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087a6:	f000 f9d7 	bl	8008b58 <memchr>
 80087aa:	2800      	cmp	r0, #0
 80087ac:	d038      	beq.n	8008820 <_svfiprintf_r+0x1c8>
 80087ae:	4b24      	ldr	r3, [pc, #144]	; (8008840 <_svfiprintf_r+0x1e8>)
 80087b0:	bb13      	cbnz	r3, 80087f8 <_svfiprintf_r+0x1a0>
 80087b2:	9b03      	ldr	r3, [sp, #12]
 80087b4:	3307      	adds	r3, #7
 80087b6:	f023 0307 	bic.w	r3, r3, #7
 80087ba:	3308      	adds	r3, #8
 80087bc:	9303      	str	r3, [sp, #12]
 80087be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087c0:	444b      	add	r3, r9
 80087c2:	9309      	str	r3, [sp, #36]	; 0x24
 80087c4:	e76d      	b.n	80086a2 <_svfiprintf_r+0x4a>
 80087c6:	fb05 3202 	mla	r2, r5, r2, r3
 80087ca:	2001      	movs	r0, #1
 80087cc:	460f      	mov	r7, r1
 80087ce:	e7a6      	b.n	800871e <_svfiprintf_r+0xc6>
 80087d0:	2300      	movs	r3, #0
 80087d2:	250a      	movs	r5, #10
 80087d4:	4619      	mov	r1, r3
 80087d6:	3701      	adds	r7, #1
 80087d8:	9305      	str	r3, [sp, #20]
 80087da:	4638      	mov	r0, r7
 80087dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087e0:	3a30      	subs	r2, #48	; 0x30
 80087e2:	2a09      	cmp	r2, #9
 80087e4:	d903      	bls.n	80087ee <_svfiprintf_r+0x196>
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d0c8      	beq.n	800877c <_svfiprintf_r+0x124>
 80087ea:	9105      	str	r1, [sp, #20]
 80087ec:	e7c6      	b.n	800877c <_svfiprintf_r+0x124>
 80087ee:	fb05 2101 	mla	r1, r5, r1, r2
 80087f2:	2301      	movs	r3, #1
 80087f4:	4607      	mov	r7, r0
 80087f6:	e7f0      	b.n	80087da <_svfiprintf_r+0x182>
 80087f8:	ab03      	add	r3, sp, #12
 80087fa:	9300      	str	r3, [sp, #0]
 80087fc:	4622      	mov	r2, r4
 80087fe:	4b11      	ldr	r3, [pc, #68]	; (8008844 <_svfiprintf_r+0x1ec>)
 8008800:	a904      	add	r1, sp, #16
 8008802:	4640      	mov	r0, r8
 8008804:	f3af 8000 	nop.w
 8008808:	f1b0 3fff 	cmp.w	r0, #4294967295
 800880c:	4681      	mov	r9, r0
 800880e:	d1d6      	bne.n	80087be <_svfiprintf_r+0x166>
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	065b      	lsls	r3, r3, #25
 8008814:	f53f af35 	bmi.w	8008682 <_svfiprintf_r+0x2a>
 8008818:	9809      	ldr	r0, [sp, #36]	; 0x24
 800881a:	b01d      	add	sp, #116	; 0x74
 800881c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008820:	ab03      	add	r3, sp, #12
 8008822:	9300      	str	r3, [sp, #0]
 8008824:	4622      	mov	r2, r4
 8008826:	4b07      	ldr	r3, [pc, #28]	; (8008844 <_svfiprintf_r+0x1ec>)
 8008828:	a904      	add	r1, sp, #16
 800882a:	4640      	mov	r0, r8
 800882c:	f000 f882 	bl	8008934 <_printf_i>
 8008830:	e7ea      	b.n	8008808 <_svfiprintf_r+0x1b0>
 8008832:	bf00      	nop
 8008834:	080090cb 	.word	0x080090cb
 8008838:	080090d1 	.word	0x080090d1
 800883c:	080090d5 	.word	0x080090d5
 8008840:	00000000 	.word	0x00000000
 8008844:	080085a3 	.word	0x080085a3

08008848 <_printf_common>:
 8008848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800884c:	4691      	mov	r9, r2
 800884e:	461f      	mov	r7, r3
 8008850:	688a      	ldr	r2, [r1, #8]
 8008852:	690b      	ldr	r3, [r1, #16]
 8008854:	4606      	mov	r6, r0
 8008856:	4293      	cmp	r3, r2
 8008858:	bfb8      	it	lt
 800885a:	4613      	movlt	r3, r2
 800885c:	f8c9 3000 	str.w	r3, [r9]
 8008860:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008864:	460c      	mov	r4, r1
 8008866:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800886a:	b112      	cbz	r2, 8008872 <_printf_common+0x2a>
 800886c:	3301      	adds	r3, #1
 800886e:	f8c9 3000 	str.w	r3, [r9]
 8008872:	6823      	ldr	r3, [r4, #0]
 8008874:	0699      	lsls	r1, r3, #26
 8008876:	bf42      	ittt	mi
 8008878:	f8d9 3000 	ldrmi.w	r3, [r9]
 800887c:	3302      	addmi	r3, #2
 800887e:	f8c9 3000 	strmi.w	r3, [r9]
 8008882:	6825      	ldr	r5, [r4, #0]
 8008884:	f015 0506 	ands.w	r5, r5, #6
 8008888:	d107      	bne.n	800889a <_printf_common+0x52>
 800888a:	f104 0a19 	add.w	sl, r4, #25
 800888e:	68e3      	ldr	r3, [r4, #12]
 8008890:	f8d9 2000 	ldr.w	r2, [r9]
 8008894:	1a9b      	subs	r3, r3, r2
 8008896:	42ab      	cmp	r3, r5
 8008898:	dc29      	bgt.n	80088ee <_printf_common+0xa6>
 800889a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800889e:	6822      	ldr	r2, [r4, #0]
 80088a0:	3300      	adds	r3, #0
 80088a2:	bf18      	it	ne
 80088a4:	2301      	movne	r3, #1
 80088a6:	0692      	lsls	r2, r2, #26
 80088a8:	d42e      	bmi.n	8008908 <_printf_common+0xc0>
 80088aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088ae:	4639      	mov	r1, r7
 80088b0:	4630      	mov	r0, r6
 80088b2:	47c0      	blx	r8
 80088b4:	3001      	adds	r0, #1
 80088b6:	d021      	beq.n	80088fc <_printf_common+0xb4>
 80088b8:	6823      	ldr	r3, [r4, #0]
 80088ba:	68e5      	ldr	r5, [r4, #12]
 80088bc:	f003 0306 	and.w	r3, r3, #6
 80088c0:	2b04      	cmp	r3, #4
 80088c2:	bf18      	it	ne
 80088c4:	2500      	movne	r5, #0
 80088c6:	f8d9 2000 	ldr.w	r2, [r9]
 80088ca:	f04f 0900 	mov.w	r9, #0
 80088ce:	bf08      	it	eq
 80088d0:	1aad      	subeq	r5, r5, r2
 80088d2:	68a3      	ldr	r3, [r4, #8]
 80088d4:	6922      	ldr	r2, [r4, #16]
 80088d6:	bf08      	it	eq
 80088d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088dc:	4293      	cmp	r3, r2
 80088de:	bfc4      	itt	gt
 80088e0:	1a9b      	subgt	r3, r3, r2
 80088e2:	18ed      	addgt	r5, r5, r3
 80088e4:	341a      	adds	r4, #26
 80088e6:	454d      	cmp	r5, r9
 80088e8:	d11a      	bne.n	8008920 <_printf_common+0xd8>
 80088ea:	2000      	movs	r0, #0
 80088ec:	e008      	b.n	8008900 <_printf_common+0xb8>
 80088ee:	2301      	movs	r3, #1
 80088f0:	4652      	mov	r2, sl
 80088f2:	4639      	mov	r1, r7
 80088f4:	4630      	mov	r0, r6
 80088f6:	47c0      	blx	r8
 80088f8:	3001      	adds	r0, #1
 80088fa:	d103      	bne.n	8008904 <_printf_common+0xbc>
 80088fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008904:	3501      	adds	r5, #1
 8008906:	e7c2      	b.n	800888e <_printf_common+0x46>
 8008908:	2030      	movs	r0, #48	; 0x30
 800890a:	18e1      	adds	r1, r4, r3
 800890c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008910:	1c5a      	adds	r2, r3, #1
 8008912:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008916:	4422      	add	r2, r4
 8008918:	3302      	adds	r3, #2
 800891a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800891e:	e7c4      	b.n	80088aa <_printf_common+0x62>
 8008920:	2301      	movs	r3, #1
 8008922:	4622      	mov	r2, r4
 8008924:	4639      	mov	r1, r7
 8008926:	4630      	mov	r0, r6
 8008928:	47c0      	blx	r8
 800892a:	3001      	adds	r0, #1
 800892c:	d0e6      	beq.n	80088fc <_printf_common+0xb4>
 800892e:	f109 0901 	add.w	r9, r9, #1
 8008932:	e7d8      	b.n	80088e6 <_printf_common+0x9e>

08008934 <_printf_i>:
 8008934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008938:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800893c:	460c      	mov	r4, r1
 800893e:	7e09      	ldrb	r1, [r1, #24]
 8008940:	b085      	sub	sp, #20
 8008942:	296e      	cmp	r1, #110	; 0x6e
 8008944:	4617      	mov	r7, r2
 8008946:	4606      	mov	r6, r0
 8008948:	4698      	mov	r8, r3
 800894a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800894c:	f000 80b3 	beq.w	8008ab6 <_printf_i+0x182>
 8008950:	d822      	bhi.n	8008998 <_printf_i+0x64>
 8008952:	2963      	cmp	r1, #99	; 0x63
 8008954:	d036      	beq.n	80089c4 <_printf_i+0x90>
 8008956:	d80a      	bhi.n	800896e <_printf_i+0x3a>
 8008958:	2900      	cmp	r1, #0
 800895a:	f000 80b9 	beq.w	8008ad0 <_printf_i+0x19c>
 800895e:	2958      	cmp	r1, #88	; 0x58
 8008960:	f000 8083 	beq.w	8008a6a <_printf_i+0x136>
 8008964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008968:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800896c:	e032      	b.n	80089d4 <_printf_i+0xa0>
 800896e:	2964      	cmp	r1, #100	; 0x64
 8008970:	d001      	beq.n	8008976 <_printf_i+0x42>
 8008972:	2969      	cmp	r1, #105	; 0x69
 8008974:	d1f6      	bne.n	8008964 <_printf_i+0x30>
 8008976:	6820      	ldr	r0, [r4, #0]
 8008978:	6813      	ldr	r3, [r2, #0]
 800897a:	0605      	lsls	r5, r0, #24
 800897c:	f103 0104 	add.w	r1, r3, #4
 8008980:	d52a      	bpl.n	80089d8 <_printf_i+0xa4>
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	6011      	str	r1, [r2, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	da03      	bge.n	8008992 <_printf_i+0x5e>
 800898a:	222d      	movs	r2, #45	; 0x2d
 800898c:	425b      	negs	r3, r3
 800898e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008992:	486f      	ldr	r0, [pc, #444]	; (8008b50 <_printf_i+0x21c>)
 8008994:	220a      	movs	r2, #10
 8008996:	e039      	b.n	8008a0c <_printf_i+0xd8>
 8008998:	2973      	cmp	r1, #115	; 0x73
 800899a:	f000 809d 	beq.w	8008ad8 <_printf_i+0x1a4>
 800899e:	d808      	bhi.n	80089b2 <_printf_i+0x7e>
 80089a0:	296f      	cmp	r1, #111	; 0x6f
 80089a2:	d020      	beq.n	80089e6 <_printf_i+0xb2>
 80089a4:	2970      	cmp	r1, #112	; 0x70
 80089a6:	d1dd      	bne.n	8008964 <_printf_i+0x30>
 80089a8:	6823      	ldr	r3, [r4, #0]
 80089aa:	f043 0320 	orr.w	r3, r3, #32
 80089ae:	6023      	str	r3, [r4, #0]
 80089b0:	e003      	b.n	80089ba <_printf_i+0x86>
 80089b2:	2975      	cmp	r1, #117	; 0x75
 80089b4:	d017      	beq.n	80089e6 <_printf_i+0xb2>
 80089b6:	2978      	cmp	r1, #120	; 0x78
 80089b8:	d1d4      	bne.n	8008964 <_printf_i+0x30>
 80089ba:	2378      	movs	r3, #120	; 0x78
 80089bc:	4865      	ldr	r0, [pc, #404]	; (8008b54 <_printf_i+0x220>)
 80089be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089c2:	e055      	b.n	8008a70 <_printf_i+0x13c>
 80089c4:	6813      	ldr	r3, [r2, #0]
 80089c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089ca:	1d19      	adds	r1, r3, #4
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	6011      	str	r1, [r2, #0]
 80089d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089d4:	2301      	movs	r3, #1
 80089d6:	e08c      	b.n	8008af2 <_printf_i+0x1be>
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80089de:	6011      	str	r1, [r2, #0]
 80089e0:	bf18      	it	ne
 80089e2:	b21b      	sxthne	r3, r3
 80089e4:	e7cf      	b.n	8008986 <_printf_i+0x52>
 80089e6:	6813      	ldr	r3, [r2, #0]
 80089e8:	6825      	ldr	r5, [r4, #0]
 80089ea:	1d18      	adds	r0, r3, #4
 80089ec:	6010      	str	r0, [r2, #0]
 80089ee:	0628      	lsls	r0, r5, #24
 80089f0:	d501      	bpl.n	80089f6 <_printf_i+0xc2>
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	e002      	b.n	80089fc <_printf_i+0xc8>
 80089f6:	0668      	lsls	r0, r5, #25
 80089f8:	d5fb      	bpl.n	80089f2 <_printf_i+0xbe>
 80089fa:	881b      	ldrh	r3, [r3, #0]
 80089fc:	296f      	cmp	r1, #111	; 0x6f
 80089fe:	bf14      	ite	ne
 8008a00:	220a      	movne	r2, #10
 8008a02:	2208      	moveq	r2, #8
 8008a04:	4852      	ldr	r0, [pc, #328]	; (8008b50 <_printf_i+0x21c>)
 8008a06:	2100      	movs	r1, #0
 8008a08:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a0c:	6865      	ldr	r5, [r4, #4]
 8008a0e:	2d00      	cmp	r5, #0
 8008a10:	60a5      	str	r5, [r4, #8]
 8008a12:	f2c0 8095 	blt.w	8008b40 <_printf_i+0x20c>
 8008a16:	6821      	ldr	r1, [r4, #0]
 8008a18:	f021 0104 	bic.w	r1, r1, #4
 8008a1c:	6021      	str	r1, [r4, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d13d      	bne.n	8008a9e <_printf_i+0x16a>
 8008a22:	2d00      	cmp	r5, #0
 8008a24:	f040 808e 	bne.w	8008b44 <_printf_i+0x210>
 8008a28:	4665      	mov	r5, ip
 8008a2a:	2a08      	cmp	r2, #8
 8008a2c:	d10b      	bne.n	8008a46 <_printf_i+0x112>
 8008a2e:	6823      	ldr	r3, [r4, #0]
 8008a30:	07db      	lsls	r3, r3, #31
 8008a32:	d508      	bpl.n	8008a46 <_printf_i+0x112>
 8008a34:	6923      	ldr	r3, [r4, #16]
 8008a36:	6862      	ldr	r2, [r4, #4]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	bfde      	ittt	le
 8008a3c:	2330      	movle	r3, #48	; 0x30
 8008a3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a42:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a46:	ebac 0305 	sub.w	r3, ip, r5
 8008a4a:	6123      	str	r3, [r4, #16]
 8008a4c:	f8cd 8000 	str.w	r8, [sp]
 8008a50:	463b      	mov	r3, r7
 8008a52:	aa03      	add	r2, sp, #12
 8008a54:	4621      	mov	r1, r4
 8008a56:	4630      	mov	r0, r6
 8008a58:	f7ff fef6 	bl	8008848 <_printf_common>
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	d14d      	bne.n	8008afc <_printf_i+0x1c8>
 8008a60:	f04f 30ff 	mov.w	r0, #4294967295
 8008a64:	b005      	add	sp, #20
 8008a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a6a:	4839      	ldr	r0, [pc, #228]	; (8008b50 <_printf_i+0x21c>)
 8008a6c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008a70:	6813      	ldr	r3, [r2, #0]
 8008a72:	6821      	ldr	r1, [r4, #0]
 8008a74:	1d1d      	adds	r5, r3, #4
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	6015      	str	r5, [r2, #0]
 8008a7a:	060a      	lsls	r2, r1, #24
 8008a7c:	d50b      	bpl.n	8008a96 <_printf_i+0x162>
 8008a7e:	07ca      	lsls	r2, r1, #31
 8008a80:	bf44      	itt	mi
 8008a82:	f041 0120 	orrmi.w	r1, r1, #32
 8008a86:	6021      	strmi	r1, [r4, #0]
 8008a88:	b91b      	cbnz	r3, 8008a92 <_printf_i+0x15e>
 8008a8a:	6822      	ldr	r2, [r4, #0]
 8008a8c:	f022 0220 	bic.w	r2, r2, #32
 8008a90:	6022      	str	r2, [r4, #0]
 8008a92:	2210      	movs	r2, #16
 8008a94:	e7b7      	b.n	8008a06 <_printf_i+0xd2>
 8008a96:	064d      	lsls	r5, r1, #25
 8008a98:	bf48      	it	mi
 8008a9a:	b29b      	uxthmi	r3, r3
 8008a9c:	e7ef      	b.n	8008a7e <_printf_i+0x14a>
 8008a9e:	4665      	mov	r5, ip
 8008aa0:	fbb3 f1f2 	udiv	r1, r3, r2
 8008aa4:	fb02 3311 	mls	r3, r2, r1, r3
 8008aa8:	5cc3      	ldrb	r3, [r0, r3]
 8008aaa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008aae:	460b      	mov	r3, r1
 8008ab0:	2900      	cmp	r1, #0
 8008ab2:	d1f5      	bne.n	8008aa0 <_printf_i+0x16c>
 8008ab4:	e7b9      	b.n	8008a2a <_printf_i+0xf6>
 8008ab6:	6813      	ldr	r3, [r2, #0]
 8008ab8:	6825      	ldr	r5, [r4, #0]
 8008aba:	1d18      	adds	r0, r3, #4
 8008abc:	6961      	ldr	r1, [r4, #20]
 8008abe:	6010      	str	r0, [r2, #0]
 8008ac0:	0628      	lsls	r0, r5, #24
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	d501      	bpl.n	8008aca <_printf_i+0x196>
 8008ac6:	6019      	str	r1, [r3, #0]
 8008ac8:	e002      	b.n	8008ad0 <_printf_i+0x19c>
 8008aca:	066a      	lsls	r2, r5, #25
 8008acc:	d5fb      	bpl.n	8008ac6 <_printf_i+0x192>
 8008ace:	8019      	strh	r1, [r3, #0]
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	4665      	mov	r5, ip
 8008ad4:	6123      	str	r3, [r4, #16]
 8008ad6:	e7b9      	b.n	8008a4c <_printf_i+0x118>
 8008ad8:	6813      	ldr	r3, [r2, #0]
 8008ada:	1d19      	adds	r1, r3, #4
 8008adc:	6011      	str	r1, [r2, #0]
 8008ade:	681d      	ldr	r5, [r3, #0]
 8008ae0:	6862      	ldr	r2, [r4, #4]
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	f000 f837 	bl	8008b58 <memchr>
 8008aea:	b108      	cbz	r0, 8008af0 <_printf_i+0x1bc>
 8008aec:	1b40      	subs	r0, r0, r5
 8008aee:	6060      	str	r0, [r4, #4]
 8008af0:	6863      	ldr	r3, [r4, #4]
 8008af2:	6123      	str	r3, [r4, #16]
 8008af4:	2300      	movs	r3, #0
 8008af6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008afa:	e7a7      	b.n	8008a4c <_printf_i+0x118>
 8008afc:	6923      	ldr	r3, [r4, #16]
 8008afe:	462a      	mov	r2, r5
 8008b00:	4639      	mov	r1, r7
 8008b02:	4630      	mov	r0, r6
 8008b04:	47c0      	blx	r8
 8008b06:	3001      	adds	r0, #1
 8008b08:	d0aa      	beq.n	8008a60 <_printf_i+0x12c>
 8008b0a:	6823      	ldr	r3, [r4, #0]
 8008b0c:	079b      	lsls	r3, r3, #30
 8008b0e:	d413      	bmi.n	8008b38 <_printf_i+0x204>
 8008b10:	68e0      	ldr	r0, [r4, #12]
 8008b12:	9b03      	ldr	r3, [sp, #12]
 8008b14:	4298      	cmp	r0, r3
 8008b16:	bfb8      	it	lt
 8008b18:	4618      	movlt	r0, r3
 8008b1a:	e7a3      	b.n	8008a64 <_printf_i+0x130>
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	464a      	mov	r2, r9
 8008b20:	4639      	mov	r1, r7
 8008b22:	4630      	mov	r0, r6
 8008b24:	47c0      	blx	r8
 8008b26:	3001      	adds	r0, #1
 8008b28:	d09a      	beq.n	8008a60 <_printf_i+0x12c>
 8008b2a:	3501      	adds	r5, #1
 8008b2c:	68e3      	ldr	r3, [r4, #12]
 8008b2e:	9a03      	ldr	r2, [sp, #12]
 8008b30:	1a9b      	subs	r3, r3, r2
 8008b32:	42ab      	cmp	r3, r5
 8008b34:	dcf2      	bgt.n	8008b1c <_printf_i+0x1e8>
 8008b36:	e7eb      	b.n	8008b10 <_printf_i+0x1dc>
 8008b38:	2500      	movs	r5, #0
 8008b3a:	f104 0919 	add.w	r9, r4, #25
 8008b3e:	e7f5      	b.n	8008b2c <_printf_i+0x1f8>
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1ac      	bne.n	8008a9e <_printf_i+0x16a>
 8008b44:	7803      	ldrb	r3, [r0, #0]
 8008b46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b4e:	e76c      	b.n	8008a2a <_printf_i+0xf6>
 8008b50:	080090dc 	.word	0x080090dc
 8008b54:	080090ed 	.word	0x080090ed

08008b58 <memchr>:
 8008b58:	b510      	push	{r4, lr}
 8008b5a:	b2c9      	uxtb	r1, r1
 8008b5c:	4402      	add	r2, r0
 8008b5e:	4290      	cmp	r0, r2
 8008b60:	4603      	mov	r3, r0
 8008b62:	d101      	bne.n	8008b68 <memchr+0x10>
 8008b64:	2300      	movs	r3, #0
 8008b66:	e003      	b.n	8008b70 <memchr+0x18>
 8008b68:	781c      	ldrb	r4, [r3, #0]
 8008b6a:	3001      	adds	r0, #1
 8008b6c:	428c      	cmp	r4, r1
 8008b6e:	d1f6      	bne.n	8008b5e <memchr+0x6>
 8008b70:	4618      	mov	r0, r3
 8008b72:	bd10      	pop	{r4, pc}

08008b74 <_realloc_r>:
 8008b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b76:	4607      	mov	r7, r0
 8008b78:	4614      	mov	r4, r2
 8008b7a:	460e      	mov	r6, r1
 8008b7c:	b921      	cbnz	r1, 8008b88 <_realloc_r+0x14>
 8008b7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b82:	4611      	mov	r1, r2
 8008b84:	f7ff bc3a 	b.w	80083fc <_malloc_r>
 8008b88:	b922      	cbnz	r2, 8008b94 <_realloc_r+0x20>
 8008b8a:	f7ff fbeb 	bl	8008364 <_free_r>
 8008b8e:	4625      	mov	r5, r4
 8008b90:	4628      	mov	r0, r5
 8008b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b94:	f000 f814 	bl	8008bc0 <_malloc_usable_size_r>
 8008b98:	42a0      	cmp	r0, r4
 8008b9a:	d20f      	bcs.n	8008bbc <_realloc_r+0x48>
 8008b9c:	4621      	mov	r1, r4
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	f7ff fc2c 	bl	80083fc <_malloc_r>
 8008ba4:	4605      	mov	r5, r0
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	d0f2      	beq.n	8008b90 <_realloc_r+0x1c>
 8008baa:	4631      	mov	r1, r6
 8008bac:	4622      	mov	r2, r4
 8008bae:	f7ff fbad 	bl	800830c <memcpy>
 8008bb2:	4631      	mov	r1, r6
 8008bb4:	4638      	mov	r0, r7
 8008bb6:	f7ff fbd5 	bl	8008364 <_free_r>
 8008bba:	e7e9      	b.n	8008b90 <_realloc_r+0x1c>
 8008bbc:	4635      	mov	r5, r6
 8008bbe:	e7e7      	b.n	8008b90 <_realloc_r+0x1c>

08008bc0 <_malloc_usable_size_r>:
 8008bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bc4:	1f18      	subs	r0, r3, #4
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	bfbc      	itt	lt
 8008bca:	580b      	ldrlt	r3, [r1, r0]
 8008bcc:	18c0      	addlt	r0, r0, r3
 8008bce:	4770      	bx	lr

08008bd0 <_init>:
 8008bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd2:	bf00      	nop
 8008bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bd6:	bc08      	pop	{r3}
 8008bd8:	469e      	mov	lr, r3
 8008bda:	4770      	bx	lr

08008bdc <_fini>:
 8008bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bde:	bf00      	nop
 8008be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008be2:	bc08      	pop	{r3}
 8008be4:	469e      	mov	lr, r3
 8008be6:	4770      	bx	lr
